/* OrderGrammar.java */
/* Generated By:JJTree&JavaCC: Do not edit this line. OrderGrammar.java */
package com.cinchapi.ccl.v2.generated.order;

/**
 * The Grammar generated by JavaCC
 */
public class OrderGrammar/*@bgen(jjtree)*/implements OrderGrammarTreeConstants, OrderGrammarConstants {/*@bgen(jjtree)*/
  protected JJTOrderGrammarState jjtree = new JJTOrderGrammarState();public static void main(String args[]) {
        System.out.println("Reading from standard input...");
        OrderGrammar grammar = new OrderGrammar(System.in);
        while (true) {
            try {
                ASTStart start = grammar.StartCommandLine();
                OrderGrammarVisitor visitor = new OrderGrammarDumpVisitor();
                start.jjtAccept(visitor, null);
                System.out.println("Thank you.");
            } catch (Exception e) {
                System.out.println("Oops.");
                System.out.println(e.getMessage());
                e.printStackTrace();
            }
        }
    }

/** Main production. */
  final public ASTStart Start() throws ParseException {/*@bgen(jjtree) Start */
  ASTStart jjtn000 = new ASTStart(JJTSTART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      label_1:
      while (true) {
        Order();
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case OPEN_ANGLE_BRACKET:
        case CLOSE_ANGLE_BRACKET:
        case SIGNED_DECIMAL:
        case NUMERIC:
        case ALPHANUMERIC:
        case PERIOD_SEPARATED_STRING:{
          ;
          break;
          }
        default:
          jj_la1[0] = jj_gen;
          break label_1;
        }
      }
      jj_consume_token(0);
jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
{if ("" != null) return jjtn000;}
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
}

/** Main production. */
  final public ASTStart StartCommandLine() throws ParseException {/*@bgen(jjtree) Start */
  ASTStart jjtn000 = new ASTStart(JJTSTART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      label_2:
      while (true) {
        Order();
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case OPEN_ANGLE_BRACKET:
        case CLOSE_ANGLE_BRACKET:
        case SIGNED_DECIMAL:
        case NUMERIC:
        case ALPHANUMERIC:
        case PERIOD_SEPARATED_STRING:{
          ;
          break;
          }
        default:
          jj_la1[1] = jj_gen;
          break label_2;
        }
      }
      jj_consume_token(20);
jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
{if ("" != null) return jjtn000;}
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
}

  final public void Order() throws ParseException {/*@bgen(jjtree) Order */
  ASTOrder jjtn000 = new ASTOrder(JJTORDER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);String direction = null;
  String key = null;
  String timestampString = null;
  String timestampFormat = null;
  String timestampNumber = null;
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case OPEN_ANGLE_BRACKET:
      case CLOSE_ANGLE_BRACKET:{
        direction = SymbolicDirection();
        key = Key();
        break;
        }
      case SIGNED_DECIMAL:
      case NUMERIC:
      case ALPHANUMERIC:
      case PERIOD_SEPARATED_STRING:{
        key = Key();
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case ASC:
        case DESC:{
          direction = WordDirection();
          break;
          }
        default:
          jj_la1[2] = jj_gen;
          ;
        }
        break;
        }
      default:
        jj_la1[3] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case AMPERSAND:{
        jj_consume_token(AMPERSAND);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case NUMERIC:{
          timestampNumber = TimestampNumber();
          break;
          }
        case QUOTED_STRING:{
          timestampString = TimestampString();
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case PIPE:{
            jj_consume_token(PIPE);
            timestampFormat = TimestampFormat();
            break;
            }
          default:
            jj_la1[4] = jj_gen;
            ;
          }
          break;
          }
        default:
          jj_la1[5] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
        }
      default:
        jj_la1[6] = jj_gen;
        ;
      }
jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
jjtn000.direction(direction);
    jjtn000.key(key);
    jjtn000.timestampString(timestampString);
    jjtn000.timestampFormat(timestampFormat);
    jjtn000.timestampNumber(timestampNumber);
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
}

  final public String SymbolicDirection() throws ParseException {Token direction;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case OPEN_ANGLE_BRACKET:{
      direction = jj_consume_token(OPEN_ANGLE_BRACKET);
      break;
      }
    case CLOSE_ANGLE_BRACKET:{
      direction = jj_consume_token(CLOSE_ANGLE_BRACKET);
      break;
      }
    default:
      jj_la1[7] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return direction.image;}
    throw new Error("Missing return statement in function");
}

  final public String WordDirection() throws ParseException {Token direction;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ASC:{
      direction = jj_consume_token(ASC);
      break;
      }
    case DESC:{
      direction = jj_consume_token(DESC);
      break;
      }
    default:
      jj_la1[8] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return direction.image;}
    throw new Error("Missing return statement in function");
}

  final public String Key() throws ParseException {Token key;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case SIGNED_DECIMAL:{
      key = jj_consume_token(SIGNED_DECIMAL);
      break;
      }
    case NUMERIC:{
      key = jj_consume_token(NUMERIC);
      break;
      }
    case ALPHANUMERIC:{
      key = jj_consume_token(ALPHANUMERIC);
      break;
      }
    case PERIOD_SEPARATED_STRING:{
      key = jj_consume_token(PERIOD_SEPARATED_STRING);
      break;
      }
    default:
      jj_la1[9] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return key.image;}
    throw new Error("Missing return statement in function");
}

  final public String TimestampString() throws ParseException {Token timestamp;
    timestamp = jj_consume_token(QUOTED_STRING);
{if ("" != null) return timestamp.image;}
    throw new Error("Missing return statement in function");
}

  final public String TimestampFormat() throws ParseException {Token format;
    format = jj_consume_token(QUOTED_STRING);
{if ("" != null) return format.image;}
    throw new Error("Missing return statement in function");
}

  final public String TimestampNumber() throws ParseException {Token timestamp;
    timestamp = jj_consume_token(NUMERIC);
{if ("" != null) return timestamp.image;}
    throw new Error("Missing return statement in function");
}

  /** Generated Token Manager. */
  public OrderGrammarTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[10];
  static private int[] jj_la1_0;
  static {
	   jj_la1_init_0();
	}
	private static void jj_la1_init_0() {
	   jj_la1_0 = new int[] {0xf060,0xf060,0x180,0xf060,0x8,0x2200,0x10,0x60,0x180,0xf000,};
	}

  /** Constructor with InputStream. */
  public OrderGrammar(java.io.InputStream stream) {
	  this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public OrderGrammar(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source = new OrderGrammarTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 10; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
	  ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jjtree.reset();
	 jj_gen = 0;
	 for (int i = 0; i < 10; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public OrderGrammar(java.io.Reader stream) {
	 jj_input_stream = new SimpleCharStream(stream, 1, 1);
	 token_source = new OrderGrammarTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 10; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
	if (jj_input_stream == null) {
	   jj_input_stream = new SimpleCharStream(stream, 1, 1);
	} else {
	   jj_input_stream.ReInit(stream, 1, 1);
	}
	if (token_source == null) {
 token_source = new OrderGrammarTokenManager(jj_input_stream);
	}

	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jjtree.reset();
	 jj_gen = 0;
	 for (int i = 0; i < 10; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public OrderGrammar(OrderGrammarTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 10; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(OrderGrammarTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jjtree.reset();
	 jj_gen = 0;
	 for (int i = 0; i < 10; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
	 Token oldToken;
	 if ((oldToken = token).next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 if (token.kind == kind) {
	   jj_gen++;
	   return token;
	 }
	 token = oldToken;
	 jj_kind = kind;
	 throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
	 if (token.next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 jj_gen++;
	 return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
	 Token t = token;
	 for (int i = 0; i < index; i++) {
	   if (t.next != null) t = t.next;
	   else t = t.next = token_source.getNextToken();
	 }
	 return t;
  }

  private int jj_ntk_f() {
	 if ((jj_nt=token.next) == null)
	   return (jj_ntk = (token.next=token_source.getNextToken()).kind);
	 else
	   return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
	 jj_expentries.clear();
	 boolean[] la1tokens = new boolean[21];
	 if (jj_kind >= 0) {
	   la1tokens[jj_kind] = true;
	   jj_kind = -1;
	 }
	 for (int i = 0; i < 10; i++) {
	   if (jj_la1[i] == jj_gen) {
		 for (int j = 0; j < 32; j++) {
		   if ((jj_la1_0[i] & (1<<j)) != 0) {
			 la1tokens[j] = true;
		   }
		 }
	   }
	 }
	 for (int i = 0; i < 21; i++) {
	   if (la1tokens[i]) {
		 jj_expentry = new int[1];
		 jj_expentry[0] = i;
		 jj_expentries.add(jj_expentry);
	   }
	 }
	 int[][] exptokseq = new int[jj_expentries.size()][];
	 for (int i = 0; i < jj_expentries.size(); i++) {
	   exptokseq[i] = jj_expentries.get(i);
	 }
	 return new ParseException(token, exptokseq, tokenImage);
  }

  private int trace_indent = 0;
  private boolean trace_enabled;

/** Trace enabled. */
  final public boolean trace_enabled() {
	 return trace_enabled;
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
