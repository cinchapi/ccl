/* Grammar.java */
/* Generated By:JJTree&JavaCC: Do not edit this line. Grammar.java */
package com.cinchapi.ccl.v2.generated;

import com.cinchapi.ccl.SyntaxException;
import com.cinchapi.ccl.grammar.ConjunctionSymbol;
import com.cinchapi.ccl.grammar.ExplicitCclFunction;
import com.cinchapi.ccl.grammar.ExplicitRecordsFunction;
import com.cinchapi.ccl.grammar.FunctionKeySymbol;
import com.cinchapi.ccl.grammar.FunctionValueSymbol;
import com.cinchapi.ccl.grammar.ImplicitFunction;
import com.cinchapi.ccl.grammar.KeySymbol;
import com.cinchapi.ccl.grammar.OperatorSymbol;
import com.cinchapi.ccl.grammar.ParenthesisSymbol;
import com.cinchapi.ccl.grammar.Symbol;
import com.cinchapi.ccl.grammar.TimestampSymbol;
import com.cinchapi.ccl.grammar.ValueSymbol;
import com.cinchapi.ccl.type.Operator;
import com.cinchapi.ccl.util.NaturalLanguage;
import com.cinchapi.common.base.AnyStrings;
import com.google.common.collect.Iterables;
import com.google.common.collect.Lists;
import com.google.common.collect.Multimap;

import java.util.List;
import java.util.NoSuchElementException;
import java.util.function.Function;

/**
 * The Grammar generated by JavaCC
 */
public class Grammar/*@bgen(jjtree)*/implements GrammarTreeConstants, GrammarConstants {/*@bgen(jjtree)*/
  protected JJTGrammarState jjtree = new JJTGrammarState();private Multimap<String, Object> data;
    private Function<String, Object> valueTransformFunction;
    private Function<String, Operator> operatorTransformFunction;

    public Grammar(java.io.InputStream stream,
                Function<String, Object> valueTransformFunction,
                Function<String, Operator> operatorTransformFunction) {
        this(stream, null);
        this.data = null;
        this.valueTransformFunction = valueTransformFunction;
        this.operatorTransformFunction = operatorTransformFunction;
    }

    public Grammar(java.io.InputStream stream,
                Function<String, Object> valueTransformFunction,
                Function<String, Operator> operatorTransformFunction,
                Multimap<String, Object> data) {
        this(stream, null);
        this.data = data;
        this.valueTransformFunction = valueTransformFunction;
        this.operatorTransformFunction = operatorTransformFunction;
    }

    public Operator transformOperator(String token) {
        return operatorTransformFunction.apply(token);
    }

    public Object transformValue(String token) {
        return valueTransformFunction.apply(token);
    }

  final public List<Symbol> Start() throws ParseException {List<Symbol> symbols = Lists.newArrayList();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case WHERE:{
      jj_consume_token(WHERE);
      break;
      }
    default:
      jj_la1[0] = jj_gen;
      ;
    }
    DisjunctionExpression(symbols);
    jj_consume_token(0);
{if ("" != null) return symbols;}
    throw new Error("Missing return statement in function");
}

  final public List<Symbol> Ccl() throws ParseException {List<Symbol> symbols = Lists.newArrayList();
    DisjunctionExpression(symbols);
{if ("" != null) return symbols;}
    throw new Error("Missing return statement in function");
}

  final public void DisjunctionExpression(List<Symbol> symbols) throws ParseException {
    ConjunctionExpression(symbols);
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case DISJUNCTION:{
        ;
        break;
        }
      default:
        jj_la1[1] = jj_gen;
        break label_1;
      }
      jj_consume_token(DISJUNCTION);
symbols.add(ConjunctionSymbol.OR);
      ConjunctionExpression(symbols);
    }
}

  final public void ConjunctionExpression(List<Symbol> symbols) throws ParseException {
    UnaryExpression(symbols);
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case CONJUNCTION:{
        ;
        break;
        }
      default:
        jj_la1[2] = jj_gen;
        break label_2;
      }
      jj_consume_token(CONJUNCTION);
symbols.add(ConjunctionSymbol.AND);
      UnaryExpression(symbols);
    }
}

  final public void UnaryExpression(List<Symbol> symbols) throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case OPEN_PARENTHESES:{
      jj_consume_token(OPEN_PARENTHESES);
symbols.add(ParenthesisSymbol.LEFT);
      DisjunctionExpression(symbols);
      jj_consume_token(CLOSE_PARENTHESES);
symbols.add(ParenthesisSymbol.RIGHT);
      break;
      }
    case SIGNED_DECIMAL:
    case ALPHANUMERIC:{
      RelationalExpression(symbols);
      break;
      }
    default:
      jj_la1[3] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  final public void RelationalExpression(List<Symbol> symbols) throws ParseException {
    Key(symbols);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case UNARY_OPERATOR:{
      UnaryOperator(symbols);
      UnaryValue(symbols);
      Timestamp(symbols);
      break;
      }
    case BINARY_OPERATOR:{
      BinaryOperator(symbols);
      BinaryValue(symbols);
      BinaryValue(symbols);
      Timestamp(symbols);
      break;
      }
    default:
      jj_la1[4] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  final public void Key(List<Symbol> symbols) throws ParseException {Token f;
  Token k;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case SIGNED_DECIMAL:{
      k = jj_consume_token(SIGNED_DECIMAL);
      break;
      }
    case ALPHANUMERIC:{
      k = jj_consume_token(ALPHANUMERIC);
      break;
      }
    default:
      jj_la1[5] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case OPEN_PARENTHESES:{
      jj_consume_token(OPEN_PARENTHESES);
      f = jj_consume_token(FUNCTION_ALPHANUMERIC);
      jj_consume_token(33);
      jj_consume_token(CLOSE_PARENTHESES);
symbols.add(new FunctionKeySymbol(new ImplicitFunction(k.image, f.image.substring(0, f.image.length()-1))));
      break;
      }
    default:
      jj_la1[6] = jj_gen;
symbols.add(new KeySymbol(k.image));
    }
}

  final public void UnaryValue(List<Symbol> symbols) throws ParseException {Token f;
  Token k;
  Token v;
  String value = "";
  List<String> records = Lists.newArrayList();
  List<Symbol> ccl;
    if (jj_2_3(2)) {
      f = jj_consume_token(ALPHANUMERIC);
      jj_consume_token(OPEN_PARENTHESES);
      k = jj_consume_token(FUNCTION_ALPHANUMERIC);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 33:{
        jj_consume_token(33);
        jj_consume_token(CLOSE_PARENTHESES);
symbols.add(new FunctionValueSymbol(new ImplicitFunction(f.image, k.image.substring(0, k.image.length()-1))));
        break;
        }
      default:
        jj_la1[9] = jj_gen;
        if (jj_2_1(2)) {
          label_3:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case FUNCTION_ALPHANUMERIC:{
              ;
              break;
              }
            default:
              jj_la1[7] = jj_gen;
              break label_3;
            }
            v = jj_consume_token(FUNCTION_ALPHANUMERIC);
records.add(v.image.substring(0, v.image.length()-1));
          }
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case SIGNED_DECIMAL:{
            v = jj_consume_token(SIGNED_DECIMAL);
            break;
            }
          case ALPHANUMERIC:{
            v = jj_consume_token(ALPHANUMERIC);
            break;
            }
          default:
            jj_la1[8] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
records.add(v.image);
          jj_consume_token(CLOSE_PARENTHESES);
symbols.add(new FunctionValueSymbol(new ExplicitRecordsFunction(f.image, k.image.substring(0, k.image.length()-1), records)));
        } else {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case OPEN_PARENTHESES:
          case SIGNED_DECIMAL:
          case ALPHANUMERIC:{
            ccl = Ccl();
            jj_consume_token(CLOSE_PARENTHESES);
symbols.add(new FunctionValueSymbol(new ExplicitCclFunction(f.image, k.image.substring(0, k.image.length()-1), ccl)));
            break;
            }
          default:
            jj_la1[10] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      }
    } else {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case QUOTED_STRING:
      case SIGNED_DECIMAL:
      case ALPHANUMERIC:
      case NON_ALPHANUMERIC_AND_ALPHANUMERIC:{
        label_4:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case QUOTED_STRING:{
            v = jj_consume_token(QUOTED_STRING);
            break;
            }
          case SIGNED_DECIMAL:{
            v = jj_consume_token(SIGNED_DECIMAL);
            break;
            }
          case ALPHANUMERIC:{
            v = jj_consume_token(ALPHANUMERIC);
            break;
            }
          case NON_ALPHANUMERIC_AND_ALPHANUMERIC:{
            v = jj_consume_token(NON_ALPHANUMERIC_AND_ALPHANUMERIC);
            break;
            }
          default:
            jj_la1[11] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
value += (value.equals("")) ? v.image : " " + v.image;
          if (jj_2_2(2)) {
            ;
          } else {
            break label_4;
          }
        }
if(value.charAt(0) == '$') {
        String var = value.substring(1);
        try {
            value = Iterables.getOnlyElement(data.get(var)).toString();
        }
        catch (IllegalArgumentException e) {
            String err = "Unable to resolve variable {} because multiple values exist locally: {}";
            {if (true) throw new SyntaxException(AnyStrings.format(err, value, data.get(var)));}
        }
        catch (NoSuchElementException e) {
            String err = "Unable to resolve variable {} because no values exist locally";
            {if (true) throw new SyntaxException(AnyStrings.format(err, value));}
        }
    }
    else if(value.length() > 2 && value.charAt(0) == '\\'
            && value.charAt(1) == '$') {
        value = value.substring(1);
    }

    symbols.add(new ValueSymbol(transformValue(value)));
        break;
        }
      default:
        jj_la1[12] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
}

  final public void BinaryValue(List<Symbol> symbols) throws ParseException {Token f;
  Token k;
  Token v;
  String value = "";
  List<String> records = Lists.newArrayList();
  List<Symbol> ccl;
    if (jj_2_5(2)) {
      f = jj_consume_token(ALPHANUMERIC);
      jj_consume_token(OPEN_PARENTHESES);
      k = jj_consume_token(FUNCTION_ALPHANUMERIC);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 33:{
        jj_consume_token(33);
        jj_consume_token(CLOSE_PARENTHESES);
symbols.add(new FunctionValueSymbol(new ImplicitFunction(f.image, k.image.substring(0, k.image.length()-1))));
        break;
        }
      default:
        jj_la1[15] = jj_gen;
        if (jj_2_4(2)) {
          label_5:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case FUNCTION_ALPHANUMERIC:{
              ;
              break;
              }
            default:
              jj_la1[13] = jj_gen;
              break label_5;
            }
            v = jj_consume_token(FUNCTION_ALPHANUMERIC);
records.add(v.image.substring(0, v.image.length()-1));
          }
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case SIGNED_DECIMAL:{
            v = jj_consume_token(SIGNED_DECIMAL);
            break;
            }
          case ALPHANUMERIC:{
            v = jj_consume_token(ALPHANUMERIC);
            break;
            }
          default:
            jj_la1[14] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
records.add(v.image);
          jj_consume_token(CLOSE_PARENTHESES);
symbols.add(new FunctionValueSymbol(new ExplicitRecordsFunction(f.image, k.image.substring(0, k.image.length()-1), records)));
        } else {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case OPEN_PARENTHESES:
          case SIGNED_DECIMAL:
          case ALPHANUMERIC:{
            ccl = Ccl();
            jj_consume_token(CLOSE_PARENTHESES);
symbols.add(new FunctionValueSymbol(new ExplicitCclFunction(f.image, k.image.substring(0, k.image.length()-1), ccl)));
            break;
            }
          default:
            jj_la1[16] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      }
    } else {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case QUOTED_STRING:
      case SIGNED_DECIMAL:
      case ALPHANUMERIC:
      case NON_ALPHANUMERIC_AND_ALPHANUMERIC:{
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case QUOTED_STRING:{
          v = jj_consume_token(QUOTED_STRING);
          break;
          }
        case SIGNED_DECIMAL:{
          v = jj_consume_token(SIGNED_DECIMAL);
          break;
          }
        case ALPHANUMERIC:{
          v = jj_consume_token(ALPHANUMERIC);
          break;
          }
        case NON_ALPHANUMERIC_AND_ALPHANUMERIC:{
          v = jj_consume_token(NON_ALPHANUMERIC_AND_ALPHANUMERIC);
          break;
          }
        default:
          jj_la1[17] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
value = v.image;
    if(value.charAt(0) == '$') {
        String var = value.substring(1);
        try {
            value = Iterables.getOnlyElement(data.get(var)).toString();
        }
        catch (IllegalArgumentException e) {
            String err = "Unable to resolve variable {} because multiple values exist locally: {}";
            {if (true) throw new SyntaxException(AnyStrings.format(err, value, data.get(var)));}
        }
        catch (NoSuchElementException e) {
            String err = "Unable to resolve variable {} because no values exist locally";
            {if (true) throw new SyntaxException(AnyStrings.format(err, value));}
        }
    }
    else if(value.length() > 2 && value.charAt(0) == '\\'
            && value.charAt(1) == '$') {
        value = value.substring(1);
    }

    symbols.add(new ValueSymbol(transformValue(value)));
        break;
        }
      default:
        jj_la1[18] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
}

  final public void UnaryOperator(List<Symbol> symbols) throws ParseException {Token o;
    o = jj_consume_token(UNARY_OPERATOR);
symbols.add(new OperatorSymbol(transformOperator(o.image)));
}

  final public void BinaryOperator(List<Symbol> symbols) throws ParseException {Token o;
    o = jj_consume_token(BINARY_OPERATOR);
symbols.add(new OperatorSymbol(transformOperator(o.image)));
}

  final public void Timestamp(List<Symbol> symbols) throws ParseException {Token t;
  String ts = "";
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case TIMESTAMP:{
      jj_consume_token(TIMESTAMP);
      label_6:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case QUOTED_STRING:{
          t = jj_consume_token(QUOTED_STRING);
          break;
          }
        case SIGNED_DECIMAL:{
          t = jj_consume_token(SIGNED_DECIMAL);
          break;
          }
        case ALPHANUMERIC:{
          t = jj_consume_token(ALPHANUMERIC);
          break;
          }
        case NON_ALPHANUMERIC_AND_ALPHANUMERIC:{
          t = jj_consume_token(NON_ALPHANUMERIC_AND_ALPHANUMERIC);
          break;
          }
        default:
          jj_la1[19] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
ts += (ts.equals("")) ? t.image : " " + t.image;
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case QUOTED_STRING:
        case SIGNED_DECIMAL:
        case ALPHANUMERIC:
        case NON_ALPHANUMERIC_AND_ALPHANUMERIC:{
          ;
          break;
          }
        default:
          jj_la1[20] = jj_gen;
          break label_6;
        }
      }
symbols.add(new TimestampSymbol(NaturalLanguage.parseMicros(ts)));
      break;
      }
    default:
      jj_la1[21] = jj_gen;
      ;
    }
}

  private boolean jj_2_1(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_1()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_2()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_3()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_4()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_2_5(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_5()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  private boolean jj_3R_7()
 {
    if (jj_scan_token(FUNCTION_ALPHANUMERIC)) return true;
    return false;
  }

  private boolean jj_3_3()
 {
    if (jj_scan_token(ALPHANUMERIC)) return true;
    if (jj_scan_token(OPEN_PARENTHESES)) return true;
    return false;
  }

  private boolean jj_3R_8()
 {
    if (jj_scan_token(FUNCTION_ALPHANUMERIC)) return true;
    return false;
  }

  private boolean jj_3_1()
 {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_7()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_scan_token(25)) {
    jj_scanpos = xsp;
    if (jj_scan_token(26)) return true;
    }
    if (jj_scan_token(CLOSE_PARENTHESES)) return true;
    return false;
  }

  private boolean jj_3_5()
 {
    if (jj_scan_token(ALPHANUMERIC)) return true;
    if (jj_scan_token(OPEN_PARENTHESES)) return true;
    return false;
  }

  private boolean jj_3_2()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(23)) {
    jj_scanpos = xsp;
    if (jj_scan_token(25)) {
    jj_scanpos = xsp;
    if (jj_scan_token(26)) {
    jj_scanpos = xsp;
    if (jj_scan_token(27)) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3_4()
 {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_8()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_scan_token(25)) {
    jj_scanpos = xsp;
    if (jj_scan_token(26)) return true;
    }
    if (jj_scan_token(CLOSE_PARENTHESES)) return true;
    return false;
  }

  /** Generated Token Manager. */
  public GrammarTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[22];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
	   jj_la1_init_0();
	   jj_la1_init_1();
	}
	private static void jj_la1_init_0() {
	   jj_la1_0 = new int[] {0x40,0x100,0x80,0x6000008,0x600,0x6000000,0x8,0x1000000,0x6000000,0x0,0x6000008,0xe800000,0xe800000,0x1000000,0x6000000,0x0,0x6000008,0xe800000,0xe800000,0xe800000,0xe800000,0x20,};
	}
	private static void jj_la1_init_1() {
	   jj_la1_1 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0x0,0x0,0x0,};
	}
  final private JJCalls[] jj_2_rtns = new JJCalls[5];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public Grammar(java.io.InputStream stream) {
	  this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Grammar(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source = new GrammarTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 22; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
	  ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jjtree.reset();
	 jj_gen = 0;
	 for (int i = 0; i < 22; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public Grammar(java.io.Reader stream) {
	 jj_input_stream = new SimpleCharStream(stream, 1, 1);
	 token_source = new GrammarTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 22; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
	if (jj_input_stream == null) {
	   jj_input_stream = new SimpleCharStream(stream, 1, 1);
	} else {
	   jj_input_stream.ReInit(stream, 1, 1);
	}
	if (token_source == null) {
 token_source = new GrammarTokenManager(jj_input_stream);
	}

	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jjtree.reset();
	 jj_gen = 0;
	 for (int i = 0; i < 22; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public Grammar(GrammarTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 22; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(GrammarTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jjtree.reset();
	 jj_gen = 0;
	 for (int i = 0; i < 22; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
	 Token oldToken;
	 if ((oldToken = token).next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 if (token.kind == kind) {
	   jj_gen++;
	   if (++jj_gc > 100) {
		 jj_gc = 0;
		 for (int i = 0; i < jj_2_rtns.length; i++) {
		   JJCalls c = jj_2_rtns[i];
		   while (c != null) {
			 if (c.gen < jj_gen) c.first = null;
			 c = c.next;
		   }
		 }
	   }
	   return token;
	 }
	 token = oldToken;
	 jj_kind = kind;
	 throw generateParseException();
  }

  @SuppressWarnings("serial")
  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
	 if (jj_scanpos == jj_lastpos) {
	   jj_la--;
	   if (jj_scanpos.next == null) {
		 jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
	   } else {
		 jj_lastpos = jj_scanpos = jj_scanpos.next;
	   }
	 } else {
	   jj_scanpos = jj_scanpos.next;
	 }
	 if (jj_rescan) {
	   int i = 0; Token tok = token;
	   while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
	   if (tok != null) jj_add_error_token(kind, i);
	 }
	 if (jj_scanpos.kind != kind) return true;
	 if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
	 return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
	 if (token.next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 jj_gen++;
	 return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
	 Token t = token;
	 for (int i = 0; i < index; i++) {
	   if (t.next != null) t = t.next;
	   else t = t.next = token_source.getNextToken();
	 }
	 return t;
  }

  private int jj_ntk_f() {
	 if ((jj_nt=token.next) == null)
	   return (jj_ntk = (token.next=token_source.getNextToken()).kind);
	 else
	   return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
	 if (pos >= 100) {
		return;
	 }

	 if (pos == jj_endpos + 1) {
	   jj_lasttokens[jj_endpos++] = kind;
	 } else if (jj_endpos != 0) {
	   jj_expentry = new int[jj_endpos];

	   for (int i = 0; i < jj_endpos; i++) {
		 jj_expentry[i] = jj_lasttokens[i];
	   }

	   for (int[] oldentry : jj_expentries) {
		 if (oldentry.length == jj_expentry.length) {
		   boolean isMatched = true;

		   for (int i = 0; i < jj_expentry.length; i++) {
			 if (oldentry[i] != jj_expentry[i]) {
			   isMatched = false;
			   break;
			 }

		   }
		   if (isMatched) {
			 jj_expentries.add(jj_expentry);
			 break;
		   }
		 }
	   }

	   if (pos != 0) {
		 jj_lasttokens[(jj_endpos = pos) - 1] = kind;
	   }
	 }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
	 jj_expentries.clear();
	 boolean[] la1tokens = new boolean[34];
	 if (jj_kind >= 0) {
	   la1tokens[jj_kind] = true;
	   jj_kind = -1;
	 }
	 for (int i = 0; i < 22; i++) {
	   if (jj_la1[i] == jj_gen) {
		 for (int j = 0; j < 32; j++) {
		   if ((jj_la1_0[i] & (1<<j)) != 0) {
			 la1tokens[j] = true;
		   }
		   if ((jj_la1_1[i] & (1<<j)) != 0) {
			 la1tokens[32+j] = true;
		   }
		 }
	   }
	 }
	 for (int i = 0; i < 34; i++) {
	   if (la1tokens[i]) {
		 jj_expentry = new int[1];
		 jj_expentry[0] = i;
		 jj_expentries.add(jj_expentry);
	   }
	 }
	 jj_endpos = 0;
	 jj_rescan_token();
	 jj_add_error_token(0, 0);
	 int[][] exptokseq = new int[jj_expentries.size()][];
	 for (int i = 0; i < jj_expentries.size(); i++) {
	   exptokseq[i] = jj_expentries.get(i);
	 }
	 return new ParseException(token, exptokseq, tokenImage);
  }

  private int trace_indent = 0;
  private boolean trace_enabled;

/** Trace enabled. */
  final public boolean trace_enabled() {
	 return trace_enabled;
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
	 jj_rescan = true;
	 for (int i = 0; i < 5; i++) {
	   try {
		 JJCalls p = jj_2_rtns[i];

		 do {
		   if (p.gen > jj_gen) {
			 jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
			 switch (i) {
			   case 0: jj_3_1(); break;
			   case 1: jj_3_2(); break;
			   case 2: jj_3_3(); break;
			   case 3: jj_3_4(); break;
			   case 4: jj_3_5(); break;
			 }
		   }
		   p = p.next;
		 } while (p != null);

		 } catch(LookaheadSuccess ls) { }
	 }
	 jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
	 JJCalls p = jj_2_rtns[index];
	 while (p.gen > jj_gen) {
	   if (p.next == null) { p = p.next = new JJCalls(); break; }
	   p = p.next;
	 }

	 p.gen = jj_gen + xla - jj_la; 
	 p.first = token;
	 p.arg = xla;
  }

  static final class JJCalls {
	 int gen;
	 Token first;
	 int arg;
	 JJCalls next;
  }

}
