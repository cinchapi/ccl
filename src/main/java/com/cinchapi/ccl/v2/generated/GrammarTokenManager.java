/* GrammarTokenManager.java */
/* Generated By:JJTree&JavaCC: Do not edit this line. GrammarTokenManager.java */
package com.cinchapi.ccl.v2.generated;

/** Token Manager. */
public class GrammarTokenManager implements GrammarConstants {

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_0(){
   switch(curChar)
   {
      case 9:
         jjmatchedKind = 2;
         return jjMoveNfa_0(5, 0);
      case 10:
         jjmatchedKind = 37;
         return jjMoveNfa_0(5, 0);
      case 32:
         jjmatchedKind = 1;
         return jjMoveNfa_0(5, 0);
      case 36:
         return jjMoveStringLiteralDfa1_0(0x80L);
      case 40:
         jjmatchedKind = 3;
         return jjMoveNfa_0(5, 0);
      case 41:
         jjmatchedKind = 4;
         return jjMoveNfa_0(5, 0);
      case 87:
         return jjMoveStringLiteralDfa1_0(0x40L);
      case 119:
         return jjMoveStringLiteralDfa1_0(0x40L);
      default :
         return jjMoveNfa_0(5, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0){
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(5, 0);
   }
   switch(curChar)
   {
      case 72:
         return jjMoveStringLiteralDfa2_0(active0, 0x40L);
      case 73:
         return jjMoveStringLiteralDfa2_0(active0, 0x80L);
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0x40L);
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x80L);
      default :
         break;
   }
   return jjMoveNfa_0(5, 1);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjMoveNfa_0(5, 1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(5, 1);
   }
   switch(curChar)
   {
      case 68:
         return jjMoveStringLiteralDfa3_0(active0, 0x80L);
      case 69:
         return jjMoveStringLiteralDfa3_0(active0, 0x40L);
      case 100:
         return jjMoveStringLiteralDfa3_0(active0, 0x80L);
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x40L);
      default :
         break;
   }
   return jjMoveNfa_0(5, 2);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjMoveNfa_0(5, 2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(5, 2);
   }
   switch(curChar)
   {
      case 36:
         if ((active0 & 0x80L) != 0L)
         {
            jjmatchedKind = 7;
            jjmatchedPos = 3;
         }
         break;
      case 82:
         return jjMoveStringLiteralDfa4_0(active0, 0x40L);
      case 114:
         return jjMoveStringLiteralDfa4_0(active0, 0x40L);
      default :
         break;
   }
   return jjMoveNfa_0(5, 3);
}
private int jjMoveStringLiteralDfa4_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjMoveNfa_0(5, 3);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(5, 3);
   }
   switch(curChar)
   {
      case 69:
         if ((active0 & 0x40L) != 0L)
         {
            jjmatchedKind = 6;
            jjmatchedPos = 4;
         }
         break;
      case 101:
         if ((active0 & 0x40L) != 0L)
         {
            jjmatchedKind = 6;
            jjmatchedPos = 4;
         }
         break;
      default :
         break;
   }
   return jjMoveNfa_0(5, 4);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private int jjMoveNfa_0(int startState, int curPos)
{
   int strKind = jjmatchedKind;
   int strPos = jjmatchedPos;
   int seenUpto;
   input_stream.backup(seenUpto = curPos + 1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { throw new Error("Internal Error"); }
   curPos = 0;
   int startsAt = 0;
   jjnewStateCnt = 196;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 5:
                  if ((0xdffffcfeffffd9ffL & l) != 0L)
                  {
                     if (kind > 32)
                        kind = 32;
                     { jjCheckNAddTwoStates(26, 27); }
                  }
                  else if (curChar == 61)
                     { jjCheckNAdd(19); }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 30)
                        kind = 30;
                     { jjCheckNAddStates(0, 4); }
                  }
                  else if ((0x7000000000000000L & l) != 0L)
                  {
                     if (kind > 10)
                        kind = 10;
                  }
                  else if ((0x280000000000L & l) != 0L)
                     { jjCheckNAddStates(5, 8); }
                  else if (curChar == 39)
                     { jjCheckNAddStates(9, 12); }
                  else if (curChar == 34)
                     { jjCheckNAddStates(13, 16); }
                  else if (curChar == 33)
                     { jjCheckNAdd(19); }
                  else if (curChar == 38)
                  {
                     if (kind > 8)
                        kind = 8;
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 27)
                        kind = 27;
                     { jjCheckNAddStates(17, 24); }
                  }
                  else if (curChar == 62)
                     { jjCheckNAddTwoStates(19, 114); }
                  else if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 24;
                  else if (curChar == 60)
                     { jjCheckNAdd(19); }
                  else if (curChar == 38)
                     jjstateSet[jjnewStateCnt++] = 8;
                  break;
               case 8:
                  if (curChar == 38 && kind > 8)
                     kind = 8;
                  break;
               case 9:
                  if (curChar == 38)
                     jjstateSet[jjnewStateCnt++] = 8;
                  break;
               case 10:
                  if (curChar == 38 && kind > 8)
                     kind = 8;
                  break;
               case 19:
                  if (curChar == 61 && kind > 10)
                     kind = 10;
                  break;
               case 20:
                  if (curChar == 61)
                     { jjCheckNAdd(19); }
                  break;
               case 21:
                  if ((0x7000000000000000L & l) != 0L && kind > 10)
                     kind = 10;
                  break;
               case 22:
                  if (curChar == 33)
                     { jjCheckNAdd(19); }
                  break;
               case 23:
                  if (curChar == 60)
                     { jjCheckNAdd(19); }
                  break;
               case 24:
                  if (curChar == 62 && kind > 18)
                     kind = 18;
                  break;
               case 25:
                  if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 24;
                  break;
               case 26:
                  if ((0xdffffcfeffffd9ffL & l) == 0L)
                     break;
                  if (kind > 32)
                     kind = 32;
                  { jjCheckNAddTwoStates(26, 27); }
                  break;
               case 27:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 32)
                     kind = 32;
                  { jjCheckNAddTwoStates(26, 27); }
                  break;
               case 113:
                  if (curChar == 62)
                     { jjCheckNAddTwoStates(19, 114); }
                  break;
               case 114:
                  if (curChar == 60 && kind > 11)
                     kind = 11;
                  break;
               case 115:
                  if (curChar == 34)
                     { jjCheckNAddStates(13, 16); }
                  break;
               case 117:
                  { jjCheckNAddStates(25, 27); }
                  break;
               case 118:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     { jjCheckNAddStates(25, 27); }
                  break;
               case 119:
                  if (curChar == 34 && kind > 24)
                     kind = 24;
                  break;
               case 121:
                  { jjCheckNAddStates(28, 30); }
                  break;
               case 122:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     { jjCheckNAddStates(28, 30); }
                  break;
               case 123:
                  if (curChar == 34 && kind > 25)
                     kind = 25;
                  break;
               case 124:
                  if (curChar == 39)
                     { jjCheckNAddStates(9, 12); }
                  break;
               case 126:
                  { jjCheckNAddStates(31, 33); }
                  break;
               case 127:
                  if ((0xffffff7fffffffffL & l) != 0L)
                     { jjCheckNAddStates(31, 33); }
                  break;
               case 128:
                  if (curChar == 39 && kind > 24)
                     kind = 24;
                  break;
               case 130:
                  { jjCheckNAddStates(34, 36); }
                  break;
               case 131:
                  if ((0xffffff7fffffffffL & l) != 0L)
                     { jjCheckNAddStates(34, 36); }
                  break;
               case 132:
                  if (curChar == 39 && kind > 26)
                     kind = 26;
                  break;
               case 133:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 27)
                     kind = 27;
                  { jjCheckNAddStates(17, 24); }
                  break;
               case 134:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 27)
                     kind = 27;
                  { jjCheckNAdd(134); }
                  break;
               case 135:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 28)
                     kind = 28;
                  { jjCheckNAdd(135); }
                  break;
               case 136:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(136, 137); }
                  break;
               case 137:
                  if (curChar == 46)
                     { jjCheckNAdd(138); }
                  break;
               case 138:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 29)
                     kind = 29;
                  { jjCheckNAdd(138); }
                  break;
               case 139:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 31)
                     kind = 31;
                  { jjCheckNAddTwoStates(139, 140); }
                  break;
               case 140:
                  if (curChar == 46)
                     { jjCheckNAddStates(37, 39); }
                  break;
               case 141:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 31)
                     kind = 31;
                  { jjCheckNAddTwoStates(140, 141); }
                  break;
               case 142:
                  if ((0x280000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(143, 144); }
                  break;
               case 143:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 31)
                     kind = 31;
                  { jjCheckNAddTwoStates(140, 143); }
                  break;
               case 144:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(144, 145); }
                  break;
               case 145:
                  if (curChar == 46)
                     { jjCheckNAdd(146); }
                  break;
               case 146:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 31)
                     kind = 31;
                  { jjCheckNAddTwoStates(140, 146); }
                  break;
               case 147:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 31)
                     kind = 31;
                  { jjCheckNAddStates(40, 43); }
                  break;
               case 148:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(148, 149); }
                  break;
               case 149:
                  if (curChar == 46)
                     { jjCheckNAdd(150); }
                  break;
               case 150:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 31)
                     kind = 31;
                  { jjCheckNAddTwoStates(150, 140); }
                  break;
               case 151:
                  if ((0x280000000000L & l) != 0L)
                     { jjCheckNAddStates(5, 8); }
                  break;
               case 152:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 30)
                     kind = 30;
                  { jjCheckNAddStates(0, 4); }
                  break;
               case 153:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 30)
                     kind = 30;
                  { jjCheckNAdd(153); }
                  break;
               case 154:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 31)
                     kind = 31;
                  { jjCheckNAddTwoStates(154, 140); }
                  break;
               case 183:
                  if (curChar == 50 && kind > 18)
                     kind = 18;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 5:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 30)
                        kind = 30;
                     { jjCheckNAddStates(0, 4); }
                  }
                  else if ((0xf800000178000001L & l) != 0L)
                  {
                     if (kind > 32)
                        kind = 32;
                     { jjCheckNAddTwoStates(26, 27); }
                  }
                  if ((0x100000001000L & l) != 0L)
                     { jjCheckNAddStates(44, 51); }
                  else if ((0x800000008000L & l) != 0L)
                     { jjCheckNAddTwoStates(6, 112); }
                  else if ((0x200000002L & l) != 0L)
                     { jjAddStates(52, 53); }
                  else if ((0x8000000080L & l) != 0L)
                     { jjCheckNAddStates(54, 57); }
                  else if ((0x400000004000L & l) != 0L)
                     { jjCheckNAddStates(58, 63); }
                  else if ((0x2000000020L & l) != 0L)
                     { jjAddStates(64, 65); }
                  else if ((0x400000004L & l) != 0L)
                     { jjAddStates(66, 67); }
                  else if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 17;
                  else if ((0x20000000200L & l) != 0L)
                     { jjCheckNAdd(6); }
                  else if ((0x1000000010L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 4;
                  else if (curChar == 124)
                  {
                     if (kind > 9)
                        kind = 9;
                  }
                  if (curChar == 124)
                     jjstateSet[jjnewStateCnt++] = 11;
                  break;
               case 0:
                  if ((0x8000000080L & l) != 0L && kind > 5)
                     kind = 5;
                  break;
               case 1:
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 0;
                  break;
               case 2:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 3:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 4:
                  if ((0x20000000200000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 6:
                  if ((0x400000004000L & l) != 0L && kind > 5)
                     kind = 5;
                  break;
               case 7:
                  if ((0x20000000200L & l) != 0L)
                     { jjCheckNAdd(6); }
                  break;
               case 11:
                  if (curChar == 124 && kind > 9)
                     kind = 9;
                  break;
               case 12:
                  if (curChar == 124)
                     jjstateSet[jjnewStateCnt++] = 11;
                  break;
               case 13:
                  if (curChar == 124 && kind > 9)
                     kind = 9;
                  break;
               case 14:
                  if ((0x100000001000000L & l) != 0L && kind > 10)
                     kind = 10;
                  break;
               case 15:
               case 53:
               case 60:
                  if ((0x2000000020L & l) != 0L)
                     { jjCheckNAdd(14); }
                  break;
               case 16:
                  if ((0x8000000080L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 15;
                  break;
               case 17:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 16;
                  break;
               case 18:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 17;
                  break;
               case 26:
                  if ((0xf800000178000001L & l) == 0L)
                     break;
                  if (kind > 32)
                     kind = 32;
                  { jjCheckNAddTwoStates(26, 27); }
                  break;
               case 27:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 32)
                     kind = 32;
                  { jjCheckNAddTwoStates(26, 27); }
                  break;
               case 28:
                  if ((0x400000004L & l) != 0L)
                     { jjAddStates(66, 67); }
                  break;
               case 29:
                  if ((0x80000000800000L & l) != 0L && kind > 11)
                     kind = 11;
                  break;
               case 30:
                  if ((0x400000004000L & l) != 0L && kind > 11)
                     kind = 11;
                  break;
               case 31:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 30;
                  break;
               case 32:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 31;
                  break;
               case 33:
                  if ((0x80000000800000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 32;
                  break;
               case 34:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 33;
                  break;
               case 35:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 34;
                  break;
               case 36:
                  if ((0x2000000020L & l) != 0L)
                     { jjAddStates(64, 65); }
                  break;
               case 37:
                  if ((0x8000000080000L & l) != 0L && kind > 10)
                     kind = 10;
                  break;
               case 38:
               case 44:
               case 86:
               case 165:
                  if ((0x100000001000L & l) != 0L)
                     { jjCheckNAdd(37); }
                  break;
               case 39:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 38;
                  break;
               case 40:
                  if ((0x20000000200000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 39;
                  break;
               case 41:
                  if ((0x2000000020000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 40;
                  break;
               case 42:
                  if ((0x2000000020000L & l) != 0L && kind > 10)
                     kind = 10;
                  break;
               case 43:
                  if ((0x400000004000L & l) != 0L)
                     { jjCheckNAddStates(58, 63); }
                  break;
               case 45:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 44;
                  break;
               case 46:
                  if ((0x20000000200000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 45;
                  break;
               case 47:
                  if ((0x2000000020000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 46;
                  break;
               case 48:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 47;
                  break;
               case 49:
                  if (curChar == 95)
                     jjstateSet[jjnewStateCnt++] = 48;
                  break;
               case 50:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 49;
                  break;
               case 51:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 50;
                  break;
               case 52:
                  if ((0x2000000020L & l) != 0L && kind > 10)
                     kind = 10;
                  break;
               case 54:
                  if ((0x8000000080L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 53;
                  break;
               case 55:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 54;
                  break;
               case 56:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 55;
                  break;
               case 57:
                  if (curChar == 95)
                     jjstateSet[jjnewStateCnt++] = 56;
                  break;
               case 58:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 57;
                  break;
               case 59:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 58;
                  break;
               case 61:
                  if ((0x8000000080L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 60;
                  break;
               case 62:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 61;
                  break;
               case 63:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 62;
                  break;
               case 64:
               case 70:
               case 156:
                  if ((0x80000000800L & l) != 0L)
                     { jjCheckNAdd(52); }
                  break;
               case 65:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 64;
                  break;
               case 66:
                  if ((0x100000001000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 65;
                  break;
               case 67:
                  if (curChar == 95)
                     jjstateSet[jjnewStateCnt++] = 66;
                  break;
               case 68:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 67;
                  break;
               case 69:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 68;
                  break;
               case 71:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 70;
                  break;
               case 72:
                  if ((0x100000001000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 71;
                  break;
               case 73:
                  if ((0x8000000080L & l) != 0L)
                     { jjCheckNAddStates(54, 57); }
                  break;
               case 74:
                  if ((0x400000004000L & l) != 0L && kind > 10)
                     kind = 10;
                  break;
               case 75:
               case 158:
                  if ((0x200000002L & l) != 0L)
                     { jjCheckNAdd(74); }
                  break;
               case 76:
                  if ((0x10000000100L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 75;
                  break;
               case 77:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 76;
                  break;
               case 78:
                  if (curChar == 95)
                     jjstateSet[jjnewStateCnt++] = 77;
                  break;
               case 79:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 78;
                  break;
               case 80:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 79;
                  break;
               case 81:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 80;
                  break;
               case 82:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 81;
                  break;
               case 83:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 82;
                  break;
               case 84:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 83;
                  break;
               case 85:
                  if ((0x10000000100000L & l) != 0L && kind > 10)
                     kind = 10;
                  break;
               case 87:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 86;
                  break;
               case 88:
                  if ((0x20000000200000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 87;
                  break;
               case 89:
                  if ((0x2000000020000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 88;
                  break;
               case 90:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 89;
                  break;
               case 91:
                  if (curChar == 95)
                     jjstateSet[jjnewStateCnt++] = 90;
                  break;
               case 92:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 91;
                  break;
               case 93:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 92;
                  break;
               case 94:
                  if (curChar == 95)
                     jjstateSet[jjnewStateCnt++] = 93;
                  break;
               case 95:
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 94;
                  break;
               case 96:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 95;
                  break;
               case 97:
                  if ((0x10000000100L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 96;
                  break;
               case 98:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 97;
                  break;
               case 99:
                  if (curChar == 95)
                     jjstateSet[jjnewStateCnt++] = 98;
                  break;
               case 100:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 99;
                  break;
               case 101:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 100;
                  break;
               case 102:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 101;
                  break;
               case 103:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 102;
                  break;
               case 104:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 103;
                  break;
               case 105:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 104;
                  break;
               case 106:
               case 182:
                  if ((0x10000000100000L & l) != 0L)
                     { jjCheckNAdd(52); }
                  break;
               case 107:
                  if ((0x200000002L & l) != 0L)
                     { jjAddStates(52, 53); }
                  break;
               case 108:
                  if ((0x10000000100000L & l) != 0L && kind > 5)
                     kind = 5;
                  break;
               case 109:
                  if ((0x1000000010L & l) != 0L && kind > 8)
                     kind = 8;
                  break;
               case 110:
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 109;
                  break;
               case 111:
                  if ((0x800000008000L & l) != 0L)
                     { jjCheckNAddTwoStates(6, 112); }
                  break;
               case 112:
                  if ((0x4000000040000L & l) != 0L && kind > 9)
                     kind = 9;
                  break;
               case 116:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 117;
                  break;
               case 117:
                  { jjCheckNAddStates(25, 27); }
                  break;
               case 118:
                  if ((0xffffffffefffffffL & l) != 0L)
                     { jjCheckNAddStates(25, 27); }
                  break;
               case 120:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 121;
                  break;
               case 121:
                  { jjCheckNAddStates(28, 30); }
                  break;
               case 122:
                  if ((0xffffffffefffffffL & l) != 0L)
                     { jjCheckNAddStates(28, 30); }
                  break;
               case 125:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 126;
                  break;
               case 126:
                  { jjCheckNAddStates(31, 33); }
                  break;
               case 127:
                  if ((0xffffffffefffffffL & l) != 0L)
                     { jjCheckNAddStates(31, 33); }
                  break;
               case 129:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 130;
                  break;
               case 130:
                  { jjCheckNAddStates(34, 36); }
                  break;
               case 131:
                  if ((0xffffffffefffffffL & l) != 0L)
                     { jjCheckNAddStates(34, 36); }
                  break;
               case 141:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 31)
                     kind = 31;
                  { jjCheckNAddTwoStates(140, 141); }
                  break;
               case 152:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 30)
                     kind = 30;
                  { jjCheckNAddStates(0, 4); }
                  break;
               case 153:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 30)
                     kind = 30;
                  { jjCheckNAdd(153); }
                  break;
               case 154:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 31)
                     kind = 31;
                  { jjCheckNAddTwoStates(154, 140); }
                  break;
               case 155:
                  if ((0x100000001000L & l) != 0L)
                     { jjCheckNAddStates(44, 51); }
                  break;
               case 157:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 156;
                  break;
               case 159:
                  if ((0x10000000100L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 158;
                  break;
               case 160:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 159;
                  break;
               case 161:
                  if (curChar == 95)
                     jjstateSet[jjnewStateCnt++] = 160;
                  break;
               case 162:
                  if ((0x8000000080000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 161;
                  break;
               case 163:
                  if ((0x8000000080000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 162;
                  break;
               case 164:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 163;
                  break;
               case 166:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 165;
                  break;
               case 167:
                  if ((0x20000000200000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 166;
                  break;
               case 168:
                  if ((0x2000000020000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 167;
                  break;
               case 169:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 168;
                  break;
               case 170:
                  if (curChar == 95)
                     jjstateSet[jjnewStateCnt++] = 169;
                  break;
               case 171:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 170;
                  break;
               case 172:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 171;
                  break;
               case 173:
                  if (curChar == 95)
                     jjstateSet[jjnewStateCnt++] = 172;
                  break;
               case 174:
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 173;
                  break;
               case 175:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 174;
                  break;
               case 176:
                  if ((0x10000000100L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 175;
                  break;
               case 177:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 176;
                  break;
               case 178:
                  if (curChar == 95)
                     jjstateSet[jjnewStateCnt++] = 177;
                  break;
               case 179:
                  if ((0x8000000080000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 178;
                  break;
               case 180:
                  if ((0x8000000080000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 179;
                  break;
               case 181:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 180;
                  break;
               case 184:
                  if ((0x8000000080000L & l) != 0L)
                     { jjCheckNAdd(183); }
                  break;
               case 185:
                  if ((0x80000000800L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 184;
                  break;
               case 186:
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 185;
                  break;
               case 187:
                  if ((0x80000000800L & l) != 0L)
                     { jjCheckNAdd(183); }
                  break;
               case 188:
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 187;
                  break;
               case 189:
                  if ((0x800000008000L & l) != 0L && kind > 18)
                     kind = 18;
                  break;
               case 190:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 189;
                  break;
               case 191:
                  if (curChar == 95)
                     jjstateSet[jjnewStateCnt++] = 190;
                  break;
               case 192:
                  if ((0x8000000080000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 191;
                  break;
               case 193:
                  if ((0x80000000800L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 192;
                  break;
               case 194:
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 193;
                  break;
               case 195:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 194;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 5:
               case 26:
                  if ((jjbitVec0[i2] & l2) == 0L)
                     break;
                  if (kind > 32)
                     kind = 32;
                  { jjCheckNAddTwoStates(26, 27); }
                  break;
               case 117:
               case 118:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     { jjCheckNAddStates(25, 27); }
                  break;
               case 121:
               case 122:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     { jjCheckNAddStates(28, 30); }
                  break;
               case 126:
               case 127:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     { jjCheckNAddStates(31, 33); }
                  break;
               case 130:
               case 131:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     { jjCheckNAddStates(34, 36); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 196 - (jjnewStateCnt = startsAt)))
         break;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { break; }
   }
   if (jjmatchedPos > strPos)
      return curPos;

   int toRet = Math.max(curPos, seenUpto);

   if (curPos < toRet)
      for (i = toRet - Math.min(curPos, seenUpto); i-- > 0; )
         try { curChar = input_stream.readChar(); }
         catch(java.io.IOException e) { throw new Error("Internal Error : Please send a bug report."); }

   if (jjmatchedPos < strPos)
   {
      jjmatchedKind = strKind;
      jjmatchedPos = strPos;
   }
   else if (jjmatchedPos == strPos && jjmatchedKind > strKind)
      jjmatchedKind = strKind;

   return toRet;
}

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, "\50", "\51", null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, "\12", };
protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}
static final int[] jjnextStates = {
   153, 154, 140, 26, 27, 135, 136, 139, 148, 125, 127, 129, 131, 116, 118, 120, 
   122, 134, 135, 136, 137, 139, 148, 149, 140, 116, 118, 119, 120, 122, 123, 125, 
   127, 128, 129, 131, 132, 141, 142, 147, 140, 143, 144, 145, 157, 164, 85, 181, 
   182, 186, 188, 195, 108, 110, 84, 85, 105, 106, 51, 52, 59, 63, 69, 72, 
   41, 42, 29, 35, 
};

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(Exception e)
   {
      jjmatchedKind = 0;
      jjmatchedPos = -1;
      matchedToken = jjFillToken();
      return matchedToken;
   }

   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         return matchedToken;
      }
      else
      {
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

void SkipLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      default :
         break;
   }
}
void MoreLexicalActions()
{
   jjimageLen += (lengthOfMatch = jjmatchedPos + 1);
   switch(jjmatchedKind)
   {
      default :
         break;
   }
}
void TokenLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      default :
         break;
   }
}
private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

    /** Constructor. */
    public GrammarTokenManager(SimpleCharStream stream){

      if (SimpleCharStream.staticFlag)
            throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");

    input_stream = stream;
  }

  /** Constructor. */
  public GrammarTokenManager (SimpleCharStream stream, int lexState){
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Reinitialise parser. */
  
  public void ReInit(SimpleCharStream stream)
  {


    jjmatchedPos =
    jjnewStateCnt =
    0;
    curLexState = defaultLexState;
    input_stream = stream;
    ReInitRounds();
  }

  private void ReInitRounds()
  {
    int i;
    jjround = 0x80000001;
    for (i = 196; i-- > 0;)
      jjrounds[i] = 0x80000000;
  }

  /** Reinitialise parser. */
  public void ReInit(SimpleCharStream stream, int lexState)
  
  {
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Switch to specified lex state. */
  public void SwitchTo(int lexState)
  {
    if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
    else
      curLexState = lexState;
  }


/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
};

/** Lex State array. */
public static final int[] jjnewLexState = {
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
};
static final long[] jjtoToken = {
   0x21ff040ff9L, 
};
static final long[] jjtoSkip = {
   0x6L, 
};
static final long[] jjtoSpecial = {
   0x0L, 
};
static final long[] jjtoMore = {
   0x0L, 
};
    protected SimpleCharStream  input_stream;

    private final int[] jjrounds = new int[196];
    private final int[] jjstateSet = new int[2 * 196];
    private final StringBuilder jjimage = new StringBuilder();
    private StringBuilder image = jjimage;
    private int jjimageLen;
    private int lengthOfMatch;
    protected int curChar;
}
