/* GrammarTokenManager.java */
/* Generated By:JJTree&JavaCC: Do not edit this line. GrammarTokenManager.java */
package com.cinchapi.ccl.generated;
import com.cinchapi.ccl.SyntaxException;
import com.cinchapi.ccl.grammar.DirectionSymbol;
import com.cinchapi.ccl.grammar.FunctionTokenSymbol;
import com.cinchapi.ccl.grammar.KeySymbol;
import com.cinchapi.ccl.grammar.ValueTokenSymbol;
import com.cinchapi.ccl.type.function.KeyConditionFunction;
import com.cinchapi.ccl.type.function.KeyRecordsFunction;
import com.cinchapi.ccl.grammar.FunctionKeySymbol;
import com.cinchapi.ccl.grammar.FunctionValueSymbol;
import com.cinchapi.ccl.type.function.ImplicitKeyRecordFunction;
import com.cinchapi.ccl.type.function.IndexFunction;
import com.cinchapi.ccl.grammar.NavigationKeySymbol;
import com.cinchapi.ccl.grammar.KeyTokenSymbol;
import com.cinchapi.ccl.grammar.OperatorSymbol;
import com.cinchapi.ccl.grammar.OrderComponentSymbol;
import com.cinchapi.ccl.grammar.TimestampSymbol;
import com.cinchapi.ccl.grammar.ValueSymbol;
import com.cinchapi.ccl.grammar.PageSymbol;
import com.cinchapi.ccl.grammar.OrderSymbol;
import com.cinchapi.ccl.syntax.AbstractSyntaxTree;
import com.cinchapi.ccl.syntax.ConditionTree;
import com.cinchapi.ccl.type.Operator;
import com.cinchapi.ccl.util.NaturalLanguage;
import com.cinchapi.common.base.AnyStrings;
import com.google.common.collect.Iterables;
import com.google.common.collect.Lists;
import com.google.common.collect.Multimap;
import java.util.List;
import java.util.NoSuchElementException;
import java.util.function.Function;

/** Token Manager. */
public class GrammarTokenManager implements GrammarConstants {

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_0(){
   switch(curChar)
   {
      case 9:
         jjmatchedKind = 2;
         return jjMoveNfa_0(5, 0);
      case 10:
         jjmatchedKind = 50;
         return jjMoveNfa_0(5, 0);
      case 32:
         jjmatchedKind = 1;
         return jjMoveNfa_0(5, 0);
      case 36:
         return jjMoveStringLiteralDfa1_0(0x200L);
      case 40:
         jjmatchedKind = 3;
         return jjMoveNfa_0(5, 0);
      case 41:
         jjmatchedKind = 4;
         return jjMoveNfa_0(5, 0);
      case 44:
         jjmatchedKind = 40;
         return jjMoveNfa_0(5, 0);
      case 60:
         jjmatchedKind = 14;
         return jjMoveNfa_0(5, 0);
      case 61:
         jjmatchedKind = 52;
         return jjMoveNfa_0(5, 0);
      case 62:
         jjmatchedKind = 15;
         return jjMoveNfa_0(5, 0);
      case 65:
         return jjMoveStringLiteralDfa1_0(0x80000000L);
      case 68:
         return jjMoveStringLiteralDfa1_0(0x100000000L);
      case 76:
         return jjMoveStringLiteralDfa1_0(0x2000000L);
      case 79:
         return jjMoveStringLiteralDfa1_0(0x40000000L);
      case 80:
         return jjMoveStringLiteralDfa1_0(0x10000000L);
      case 82:
         return jjMoveStringLiteralDfa1_0(0x800000L);
      case 83:
         return jjMoveStringLiteralDfa1_0(0x20000000L);
      case 87:
         return jjMoveStringLiteralDfa1_0(0x100L);
      case 91:
         jjmatchedKind = 5;
         return jjMoveNfa_0(5, 0);
      case 93:
         jjmatchedKind = 6;
         return jjMoveNfa_0(5, 0);
      case 95:
         jjmatchedKind = 51;
         return jjMoveNfa_0(5, 0);
      case 97:
         return jjMoveStringLiteralDfa1_0(0x80000000L);
      case 100:
         return jjMoveStringLiteralDfa1_0(0x100000000L);
      case 108:
         return jjMoveStringLiteralDfa1_0(0x2000000L);
      case 111:
         return jjMoveStringLiteralDfa1_0(0x40000000L);
      case 112:
         return jjMoveStringLiteralDfa1_0(0x10000000L);
      case 114:
         return jjMoveStringLiteralDfa1_0(0x800000L);
      case 115:
         return jjMoveStringLiteralDfa1_0(0x20000000L);
      case 119:
         return jjMoveStringLiteralDfa1_0(0x100L);
      case 124:
         jjmatchedKind = 35;
         return jjMoveNfa_0(5, 0);
      default :
         return jjMoveNfa_0(5, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0){
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(5, 0);
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa2_0(active0, 0x10000000L);
      case 69:
         return jjMoveStringLiteralDfa2_0(active0, 0x100800000L);
      case 72:
         return jjMoveStringLiteralDfa2_0(active0, 0x100L);
      case 73:
         return jjMoveStringLiteralDfa2_0(active0, 0x22000200L);
      case 82:
         return jjMoveStringLiteralDfa2_0(active0, 0x40000000L);
      case 83:
         return jjMoveStringLiteralDfa2_0(active0, 0x80000000L);
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x10000000L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x100800000L);
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0x100L);
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x22000200L);
      case 114:
         return jjMoveStringLiteralDfa2_0(active0, 0x40000000L);
      case 115:
         return jjMoveStringLiteralDfa2_0(active0, 0x80000000L);
      default :
         break;
   }
   return jjMoveNfa_0(5, 1);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjMoveNfa_0(5, 1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(5, 1);
   }
   switch(curChar)
   {
      case 67:
         if ((active0 & 0x80000000L) != 0L)
         {
            jjmatchedKind = 31;
            jjmatchedPos = 2;
         }
         break;
      case 68:
         return jjMoveStringLiteralDfa3_0(active0, 0x40000200L);
      case 69:
         return jjMoveStringLiteralDfa3_0(active0, 0x100L);
      case 71:
         return jjMoveStringLiteralDfa3_0(active0, 0x10800000L);
      case 75:
         return jjMoveStringLiteralDfa3_0(active0, 0x2000000L);
      case 83:
         return jjMoveStringLiteralDfa3_0(active0, 0x100000000L);
      case 90:
         return jjMoveStringLiteralDfa3_0(active0, 0x20000000L);
      case 99:
         if ((active0 & 0x80000000L) != 0L)
         {
            jjmatchedKind = 31;
            jjmatchedPos = 2;
         }
         break;
      case 100:
         return jjMoveStringLiteralDfa3_0(active0, 0x40000200L);
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x100L);
      case 103:
         return jjMoveStringLiteralDfa3_0(active0, 0x10800000L);
      case 107:
         return jjMoveStringLiteralDfa3_0(active0, 0x2000000L);
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x100000000L);
      case 122:
         return jjMoveStringLiteralDfa3_0(active0, 0x20000000L);
      default :
         break;
   }
   return jjMoveNfa_0(5, 2);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjMoveNfa_0(5, 2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(5, 2);
   }
   switch(curChar)
   {
      case 36:
         if ((active0 & 0x200L) != 0L)
         {
            jjmatchedKind = 9;
            jjmatchedPos = 3;
         }
         break;
      case 67:
         if ((active0 & 0x100000000L) != 0L)
         {
            jjmatchedKind = 32;
            jjmatchedPos = 3;
         }
         break;
      case 69:
         if ((active0 & 0x2000000L) != 0L)
         {
            jjmatchedKind = 25;
            jjmatchedPos = 3;
         }
         else if ((active0 & 0x10000000L) != 0L)
         {
            jjmatchedKind = 28;
            jjmatchedPos = 3;
         }
         else if ((active0 & 0x20000000L) != 0L)
         {
            jjmatchedKind = 29;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x40800000L);
      case 82:
         return jjMoveStringLiteralDfa4_0(active0, 0x100L);
      case 99:
         if ((active0 & 0x100000000L) != 0L)
         {
            jjmatchedKind = 32;
            jjmatchedPos = 3;
         }
         break;
      case 101:
         if ((active0 & 0x2000000L) != 0L)
         {
            jjmatchedKind = 25;
            jjmatchedPos = 3;
         }
         else if ((active0 & 0x10000000L) != 0L)
         {
            jjmatchedKind = 28;
            jjmatchedPos = 3;
         }
         else if ((active0 & 0x20000000L) != 0L)
         {
            jjmatchedKind = 29;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x40800000L);
      case 114:
         return jjMoveStringLiteralDfa4_0(active0, 0x100L);
      default :
         break;
   }
   return jjMoveNfa_0(5, 3);
}
private int jjMoveStringLiteralDfa4_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjMoveNfa_0(5, 3);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(5, 3);
   }
   switch(curChar)
   {
      case 69:
         if ((active0 & 0x100L) != 0L)
         {
            jjmatchedKind = 8;
            jjmatchedPos = 4;
         }
         break;
      case 82:
         return jjMoveStringLiteralDfa5_0(active0, 0x40000000L);
      case 88:
         if ((active0 & 0x800000L) != 0L)
         {
            jjmatchedKind = 23;
            jjmatchedPos = 4;
         }
         break;
      case 101:
         if ((active0 & 0x100L) != 0L)
         {
            jjmatchedKind = 8;
            jjmatchedPos = 4;
         }
         break;
      case 114:
         return jjMoveStringLiteralDfa5_0(active0, 0x40000000L);
      case 120:
         if ((active0 & 0x800000L) != 0L)
         {
            jjmatchedKind = 23;
            jjmatchedPos = 4;
         }
         break;
      default :
         break;
   }
   return jjMoveNfa_0(5, 4);
}
private int jjMoveStringLiteralDfa5_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjMoveNfa_0(5, 4);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(5, 4);
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa6_0(active0, 0x40000000L);
      default :
         break;
   }
   return jjMoveNfa_0(5, 5);
}
private int jjMoveStringLiteralDfa6_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjMoveNfa_0(5, 5);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(5, 5);
   }
   switch(curChar)
   {
      case 66:
         return jjMoveStringLiteralDfa7_0(active0, 0x40000000L);
      case 98:
         return jjMoveStringLiteralDfa7_0(active0, 0x40000000L);
      default :
         break;
   }
   return jjMoveNfa_0(5, 6);
}
private int jjMoveStringLiteralDfa7_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjMoveNfa_0(5, 6);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(5, 6);
   }
   switch(curChar)
   {
      case 89:
         if ((active0 & 0x40000000L) != 0L)
         {
            jjmatchedKind = 30;
            jjmatchedPos = 7;
         }
         break;
      case 121:
         if ((active0 & 0x40000000L) != 0L)
         {
            jjmatchedKind = 30;
            jjmatchedPos = 7;
         }
         break;
      default :
         break;
   }
   return jjMoveNfa_0(5, 7);
}
static final long[] jjbitVec0 = {
   0xfffffffffffffffeL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec2 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec3 = {
   0x10000000L, 0x0L, 0x0L, 0x0L
};
static final long[] jjbitVec4 = {
   0xfffffffefffffffeL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec5 = {
   0xffffffffdfffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec6 = {
   0x20000000L, 0x0L, 0x0L, 0x0L
};
static final long[] jjbitVec7 = {
   0x1000000L, 0x0L, 0x0L, 0x0L
};
static final long[] jjbitVec8 = {
   0xfffffffffdffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec9 = {
   0x2000000L, 0x0L, 0x0L, 0x0L
};
private int jjMoveNfa_0(int startState, int curPos)
{
   int strKind = jjmatchedKind;
   int strPos = jjmatchedPos;
   int seenUpto;
   input_stream.backup(seenUpto = curPos + 1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { throw new Error("Internal Error"); }
   curPos = 0;
   int startsAt = 0;
   jjnewStateCnt = 241;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 5:
                  if ((0xdfffecfeffffd9ffL & l) != 0L)
                  {
                     if (kind > 45)
                        kind = 45;
                     { jjCheckNAddTwoStates(20, 21); }
                  }
                  else if (curChar == 61)
                  {
                     if (kind > 12)
                        kind = 12;
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 43)
                        kind = 43;
                     { jjCheckNAddStates(0, 4); }
                  }
                  else if ((0x280000000000L & l) != 0L)
                     { jjCheckNAddStates(5, 7); }
                  else if (curChar == 39)
                     { jjCheckNAddStates(8, 11); }
                  else if (curChar == 34)
                     { jjCheckNAddStates(12, 15); }
                  else if (curChar == 62)
                     { jjCheckNAddTwoStates(13, 81); }
                  else if (curChar == 33)
                     { jjCheckNAddTwoStates(13, 79); }
                  else if (curChar == 60)
                     { jjCheckNAdd(13); }
                  else if (curChar == 61)
                     { jjCheckNAdd(13); }
                  else if (curChar == 38)
                  {
                     if (kind > 10)
                        kind = 10;
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 39)
                        kind = 39;
                     { jjCheckNAddStates(16, 21); }
                  }
                  else if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 17;
                  else if (curChar == 38)
                     jjstateSet[jjnewStateCnt++] = 8;
                  break;
               case 8:
                  if (curChar == 38 && kind > 10)
                     kind = 10;
                  break;
               case 9:
                  if (curChar == 38)
                     jjstateSet[jjnewStateCnt++] = 8;
                  break;
               case 10:
                  if (curChar == 38 && kind > 10)
                     kind = 10;
                  break;
               case 13:
                  if (curChar == 61 && kind > 12)
                     kind = 12;
                  break;
               case 14:
                  if (curChar == 61)
                     { jjCheckNAdd(13); }
                  break;
               case 15:
                  if (curChar == 61 && kind > 12)
                     kind = 12;
                  break;
               case 16:
                  if (curChar == 60)
                     { jjCheckNAdd(13); }
                  break;
               case 17:
                  if (curChar == 62 && kind > 22)
                     kind = 22;
                  break;
               case 18:
                  if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 17;
                  break;
               case 20:
                  if ((0xdfffecfeffffd9ffL & l) == 0L)
                     break;
                  if (kind > 45)
                     kind = 45;
                  { jjCheckNAddTwoStates(20, 21); }
                  break;
               case 21:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 45)
                     kind = 45;
                  { jjCheckNAddTwoStates(20, 21); }
                  break;
               case 78:
                  if (curChar == 33)
                     { jjCheckNAddTwoStates(13, 79); }
                  break;
               case 80:
                  if (curChar == 62)
                     { jjCheckNAddTwoStates(13, 81); }
                  break;
               case 81:
                  if (curChar == 60 && kind > 13)
                     kind = 13;
                  break;
               case 109:
               case 110:
                  { jjCheckNAddStates(22, 24); }
                  break;
               case 113:
               case 114:
                  { jjCheckNAddStates(25, 27); }
                  break;
               case 116:
                  if (curChar == 34)
                     { jjCheckNAddStates(12, 15); }
                  break;
               case 118:
                  { jjCheckNAddStates(28, 30); }
                  break;
               case 119:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     { jjCheckNAddStates(28, 30); }
                  break;
               case 120:
                  if (curChar == 34 && kind > 36)
                     kind = 36;
                  break;
               case 122:
                  { jjCheckNAddStates(31, 33); }
                  break;
               case 123:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     { jjCheckNAddStates(31, 33); }
                  break;
               case 124:
                  if (curChar == 34 && kind > 37)
                     kind = 37;
                  break;
               case 127:
               case 128:
                  { jjCheckNAddStates(34, 36); }
                  break;
               case 131:
               case 132:
                  { jjCheckNAddStates(37, 39); }
                  break;
               case 136:
               case 137:
                  { jjCheckNAddStates(40, 42); }
                  break;
               case 140:
               case 141:
                  { jjCheckNAddStates(43, 45); }
                  break;
               case 143:
                  if (curChar == 39)
                     { jjCheckNAddStates(8, 11); }
                  break;
               case 145:
                  { jjCheckNAddStates(46, 48); }
                  break;
               case 146:
                  if ((0xffffff7fffffffffL & l) != 0L)
                     { jjCheckNAddStates(46, 48); }
                  break;
               case 147:
                  if (curChar == 39 && kind > 36)
                     kind = 36;
                  break;
               case 149:
                  { jjCheckNAddStates(49, 51); }
                  break;
               case 150:
                  if ((0xffffff7fffffffffL & l) != 0L)
                     { jjCheckNAddStates(49, 51); }
                  break;
               case 151:
                  if (curChar == 39 && kind > 38)
                     kind = 38;
                  break;
               case 152:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 39)
                     kind = 39;
                  { jjCheckNAddStates(16, 21); }
                  break;
               case 153:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 39)
                     kind = 39;
                  { jjCheckNAdd(153); }
                  break;
               case 154:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 41)
                     kind = 41;
                  { jjCheckNAdd(154); }
                  break;
               case 155:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(155, 156); }
                  break;
               case 156:
                  if (curChar == 46)
                     { jjCheckNAdd(157); }
                  break;
               case 157:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 42)
                     kind = 42;
                  { jjCheckNAdd(157); }
                  break;
               case 158:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(158, 159); }
                  break;
               case 159:
                  if (curChar == 46)
                     { jjCheckNAdd(160); }
                  break;
               case 160:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 44)
                     kind = 44;
                  { jjCheckNAddTwoStates(160, 161); }
                  break;
               case 161:
                  if (curChar == 46)
                     { jjCheckNAddStates(52, 54); }
                  break;
               case 162:
                  if ((0x280000000000L & l) != 0L)
                     { jjCheckNAdd(163); }
                  break;
               case 163:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(163, 164); }
                  break;
               case 164:
                  if (curChar == 46)
                     { jjCheckNAdd(165); }
                  break;
               case 165:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 44)
                     kind = 44;
                  { jjCheckNAddTwoStates(161, 165); }
                  break;
               case 166:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 44)
                     kind = 44;
                  { jjCheckNAddTwoStates(161, 166); }
                  break;
               case 167:
                  if ((0x280000000000L & l) != 0L)
                     { jjCheckNAddStates(5, 7); }
                  break;
               case 168:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 43)
                     kind = 43;
                  { jjCheckNAddStates(0, 4); }
                  break;
               case 169:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 43)
                     kind = 43;
                  { jjCheckNAdd(169); }
                  break;
               case 170:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 44)
                     kind = 44;
                  { jjCheckNAddTwoStates(170, 161); }
                  break;
               case 228:
                  if (curChar == 50 && kind > 22)
                     kind = 22;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 5:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 43)
                        kind = 43;
                     { jjCheckNAddStates(0, 4); }
                  }
                  else if ((0xf800000150000001L & l) != 0L)
                  {
                     if (kind > 45)
                        kind = 45;
                     { jjCheckNAddTwoStates(20, 21); }
                  }
                  if ((0x100000001000L & l) != 0L)
                     { jjCheckNAddStates(55, 61); }
                  else if ((0x400000004000L & l) != 0L)
                     { jjCheckNAddStates(62, 67); }
                  else if ((0x8000000080000L & l) != 0L)
                     { jjAddStates(68, 69); }
                  else if ((0x800000008000L & l) != 0L)
                     { jjCheckNAddTwoStates(6, 77); }
                  else if ((0x200000002L & l) != 0L)
                     { jjAddStates(70, 71); }
                  else if ((0x8000000080L & l) != 0L)
                     { jjCheckNAddStates(72, 75); }
                  else if ((0x2000000020L & l) != 0L)
                     { jjAddStates(76, 77); }
                  else if ((0x400000004L & l) != 0L)
                     { jjAddStates(78, 79); }
                  else if ((0x20000000200L & l) != 0L)
                     { jjCheckNAdd(6); }
                  else if ((0x1000000010L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 4;
                  else if (curChar == 96)
                     { jjCheckNAddStates(80, 83); }
                  else if (curChar == 126)
                  {
                     if (kind > 33)
                        kind = 33;
                  }
                  else if (curChar == 124)
                     jjstateSet[jjnewStateCnt++] = 11;
                  break;
               case 0:
                  if ((0x8000000080L & l) != 0L && kind > 7)
                     kind = 7;
                  break;
               case 1:
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 0;
                  break;
               case 2:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 3:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 4:
                  if ((0x20000000200000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 6:
                  if ((0x400000004000L & l) != 0L && kind > 7)
                     kind = 7;
                  break;
               case 7:
                  if ((0x20000000200L & l) != 0L)
                     { jjCheckNAdd(6); }
                  break;
               case 11:
                  if (curChar == 124 && kind > 11)
                     kind = 11;
                  break;
               case 12:
                  if (curChar == 124)
                     jjstateSet[jjnewStateCnt++] = 11;
                  break;
               case 19:
                  if (curChar == 126 && kind > 33)
                     kind = 33;
                  break;
               case 20:
                  if ((0xf800000150000001L & l) == 0L)
                     break;
                  if (kind > 45)
                     kind = 45;
                  { jjCheckNAddTwoStates(20, 21); }
                  break;
               case 21:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 45)
                     kind = 45;
                  { jjCheckNAddTwoStates(20, 21); }
                  break;
               case 22:
                  if ((0x400000004L & l) != 0L)
                     { jjAddStates(78, 79); }
                  break;
               case 23:
                  if ((0x80000000800000L & l) != 0L && kind > 13)
                     kind = 13;
                  break;
               case 24:
                  if ((0x400000004000L & l) != 0L && kind > 13)
                     kind = 13;
                  break;
               case 25:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 24;
                  break;
               case 26:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 25;
                  break;
               case 27:
                  if ((0x80000000800000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 26;
                  break;
               case 28:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 27;
                  break;
               case 29:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 28;
                  break;
               case 30:
                  if ((0x2000000020L & l) != 0L)
                     { jjAddStates(76, 77); }
                  break;
               case 31:
                  if ((0x8000000080000L & l) != 0L && kind > 12)
                     kind = 12;
                  break;
               case 32:
               case 50:
               case 172:
               case 210:
                  if ((0x100000001000L & l) != 0L)
                     { jjCheckNAdd(31); }
                  break;
               case 33:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 32;
                  break;
               case 34:
                  if ((0x20000000200000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 33;
                  break;
               case 35:
                  if ((0x2000000020000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 34;
                  break;
               case 36:
                  if ((0x2000000020000L & l) != 0L && kind > 12)
                     kind = 12;
                  break;
               case 37:
                  if ((0x8000000080L & l) != 0L)
                     { jjCheckNAddStates(72, 75); }
                  break;
               case 38:
                  if ((0x400000004000L & l) != 0L && kind > 12)
                     kind = 12;
                  break;
               case 39:
               case 203:
                  if ((0x200000002L & l) != 0L)
                     { jjCheckNAdd(38); }
                  break;
               case 40:
                  if ((0x10000000100L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 39;
                  break;
               case 41:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 40;
                  break;
               case 42:
                  if (curChar == 95)
                     jjstateSet[jjnewStateCnt++] = 41;
                  break;
               case 43:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 42;
                  break;
               case 44:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 43;
                  break;
               case 45:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 44;
                  break;
               case 46:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 45;
                  break;
               case 47:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 46;
                  break;
               case 48:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 47;
                  break;
               case 49:
                  if ((0x10000000100000L & l) != 0L && kind > 12)
                     kind = 12;
                  break;
               case 51:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 50;
                  break;
               case 52:
                  if ((0x20000000200000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 51;
                  break;
               case 53:
                  if ((0x2000000020000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 52;
                  break;
               case 54:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 53;
                  break;
               case 55:
                  if (curChar == 95)
                     jjstateSet[jjnewStateCnt++] = 54;
                  break;
               case 56:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 55;
                  break;
               case 57:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 56;
                  break;
               case 58:
                  if (curChar == 95)
                     jjstateSet[jjnewStateCnt++] = 57;
                  break;
               case 59:
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 58;
                  break;
               case 60:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 59;
                  break;
               case 61:
                  if ((0x10000000100L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 60;
                  break;
               case 62:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 61;
                  break;
               case 63:
                  if (curChar == 95)
                     jjstateSet[jjnewStateCnt++] = 62;
                  break;
               case 64:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 63;
                  break;
               case 65:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 64;
                  break;
               case 66:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 65;
                  break;
               case 67:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 66;
                  break;
               case 68:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 67;
                  break;
               case 69:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 68;
                  break;
               case 70:
                  if ((0x2000000020L & l) != 0L && kind > 12)
                     kind = 12;
                  break;
               case 71:
               case 227:
                  if ((0x10000000100000L & l) != 0L)
                     { jjCheckNAdd(70); }
                  break;
               case 72:
                  if ((0x200000002L & l) != 0L)
                     { jjAddStates(70, 71); }
                  break;
               case 73:
                  if ((0x10000000100000L & l) != 0L && kind > 7)
                     kind = 7;
                  break;
               case 74:
                  if ((0x1000000010L & l) != 0L && kind > 10)
                     kind = 10;
                  break;
               case 75:
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 74;
                  break;
               case 76:
                  if ((0x800000008000L & l) != 0L)
                     { jjCheckNAddTwoStates(6, 77); }
                  break;
               case 77:
                  if ((0x4000000040000L & l) != 0L && kind > 11)
                     kind = 11;
                  break;
               case 79:
                  if (curChar == 126 && kind > 34)
                     kind = 34;
                  break;
               case 82:
                  if ((0x8000000080000L & l) != 0L)
                     { jjAddStates(68, 69); }
                  break;
               case 83:
                  if ((0x10000000100L & l) != 0L && kind > 33)
                     kind = 33;
                  break;
               case 84:
                  if ((0x800000008L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 83;
                  break;
               case 85:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 84;
                  break;
               case 86:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 85;
                  break;
               case 87:
                  if ((0x200000002000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 86;
                  break;
               case 88:
                  if (curChar == 95)
                     jjstateSet[jjnewStateCnt++] = 87;
                  break;
               case 89:
                  if ((0x10000000100L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 88;
                  break;
               case 90:
                  if ((0x800000008L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 89;
                  break;
               case 91:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 90;
                  break;
               case 92:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 91;
                  break;
               case 93:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 92;
                  break;
               case 94:
                  if ((0x2000000020L & l) != 0L && kind > 34)
                     kind = 34;
                  break;
               case 95:
                  if ((0x1000000010L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 94;
                  break;
               case 96:
                  if ((0x20000000200000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 95;
                  break;
               case 97:
                  if ((0x100000001000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 96;
                  break;
               case 98:
                  if ((0x800000008L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 97;
                  break;
               case 99:
                  if ((0x100000001000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 98;
                  break;
               case 100:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 99;
                  break;
               case 101:
                  if (curChar == 95)
                     jjstateSet[jjnewStateCnt++] = 100;
                  break;
               case 102:
                  if ((0x10000000100L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 101;
                  break;
               case 103:
                  if ((0x800000008L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 102;
                  break;
               case 104:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 103;
                  break;
               case 105:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 104;
                  break;
               case 106:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 105;
                  break;
               case 108:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 109;
                  break;
               case 109:
                  { jjCheckNAddStates(22, 24); }
                  break;
               case 110:
                  if ((0xffffffffefffffffL & l) != 0L)
                     { jjCheckNAddStates(22, 24); }
                  break;
               case 112:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 113;
                  break;
               case 113:
                  { jjCheckNAddStates(25, 27); }
                  break;
               case 114:
                  if ((0xffffffffefffffffL & l) != 0L)
                     { jjCheckNAddStates(25, 27); }
                  break;
               case 117:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 118;
                  break;
               case 118:
                  { jjCheckNAddStates(28, 30); }
                  break;
               case 119:
                  if ((0xffffffffefffffffL & l) != 0L)
                     { jjCheckNAddStates(28, 30); }
                  break;
               case 121:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 122;
                  break;
               case 122:
                  { jjCheckNAddStates(31, 33); }
                  break;
               case 123:
                  if ((0xffffffffefffffffL & l) != 0L)
                     { jjCheckNAddStates(31, 33); }
                  break;
               case 125:
                  if (curChar == 96)
                     { jjCheckNAddStates(80, 83); }
                  break;
               case 126:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 127;
                  break;
               case 127:
                  { jjCheckNAddStates(34, 36); }
                  break;
               case 128:
                  if ((0xfffffffeefffffffL & l) != 0L)
                     { jjCheckNAddStates(34, 36); }
                  break;
               case 129:
                  if (curChar == 96 && kind > 36)
                     kind = 36;
                  break;
               case 130:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 131;
                  break;
               case 131:
                  { jjCheckNAddStates(37, 39); }
                  break;
               case 132:
                  if ((0xfffffffeefffffffL & l) != 0L)
                     { jjCheckNAddStates(37, 39); }
                  break;
               case 133:
                  if (curChar == 96 && kind > 38)
                     kind = 38;
                  break;
               case 135:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 136;
                  break;
               case 136:
                  { jjCheckNAddStates(40, 42); }
                  break;
               case 137:
                  if ((0xffffffffefffffffL & l) != 0L)
                     { jjCheckNAddStates(40, 42); }
                  break;
               case 139:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 140;
                  break;
               case 140:
                  { jjCheckNAddStates(43, 45); }
                  break;
               case 141:
                  if ((0xffffffffefffffffL & l) != 0L)
                     { jjCheckNAddStates(43, 45); }
                  break;
               case 144:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 145;
                  break;
               case 145:
                  { jjCheckNAddStates(46, 48); }
                  break;
               case 146:
                  if ((0xffffffffefffffffL & l) != 0L)
                     { jjCheckNAddStates(46, 48); }
                  break;
               case 148:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 149;
                  break;
               case 149:
                  { jjCheckNAddStates(49, 51); }
                  break;
               case 150:
                  if ((0xffffffffefffffffL & l) != 0L)
                     { jjCheckNAddStates(49, 51); }
                  break;
               case 166:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 44)
                     kind = 44;
                  { jjCheckNAddTwoStates(161, 166); }
                  break;
               case 168:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 43)
                     kind = 43;
                  { jjCheckNAddStates(0, 4); }
                  break;
               case 169:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 43)
                     kind = 43;
                  { jjCheckNAdd(169); }
                  break;
               case 170:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 44)
                     kind = 44;
                  { jjCheckNAddTwoStates(170, 161); }
                  break;
               case 171:
                  if ((0x400000004000L & l) != 0L)
                     { jjCheckNAddStates(62, 67); }
                  break;
               case 173:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 172;
                  break;
               case 174:
                  if ((0x20000000200000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 173;
                  break;
               case 175:
                  if ((0x2000000020000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 174;
                  break;
               case 176:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 175;
                  break;
               case 177:
                  if (curChar == 95)
                     jjstateSet[jjnewStateCnt++] = 176;
                  break;
               case 178:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 177;
                  break;
               case 179:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 178;
                  break;
               case 180:
                  if ((0x100000001000000L & l) != 0L && kind > 24)
                     kind = 24;
                  break;
               case 181:
               case 185:
                  if ((0x2000000020L & l) != 0L)
                     { jjCheckNAdd(180); }
                  break;
               case 182:
                  if ((0x8000000080L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 181;
                  break;
               case 183:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 182;
                  break;
               case 184:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 183;
                  break;
               case 186:
                  if ((0x8000000080L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 185;
                  break;
               case 187:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 186;
                  break;
               case 188:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 187;
                  break;
               case 189:
                  if (curChar == 95)
                     jjstateSet[jjnewStateCnt++] = 188;
                  break;
               case 190:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 189;
                  break;
               case 191:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 190;
                  break;
               case 192:
                  if ((0x2000000020L & l) != 0L && kind > 26)
                     kind = 26;
                  break;
               case 193:
               case 196:
                  if ((0x80000000800L & l) != 0L)
                     { jjCheckNAdd(192); }
                  break;
               case 194:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 193;
                  break;
               case 195:
                  if ((0x100000001000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 194;
                  break;
               case 197:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 196;
                  break;
               case 198:
                  if ((0x100000001000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 197;
                  break;
               case 199:
                  if (curChar == 95)
                     jjstateSet[jjnewStateCnt++] = 198;
                  break;
               case 200:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 199;
                  break;
               case 201:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 200;
                  break;
               case 202:
                  if ((0x100000001000L & l) != 0L)
                     { jjCheckNAddStates(55, 61); }
                  break;
               case 204:
                  if ((0x10000000100L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 203;
                  break;
               case 205:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 204;
                  break;
               case 206:
                  if (curChar == 95)
                     jjstateSet[jjnewStateCnt++] = 205;
                  break;
               case 207:
                  if ((0x8000000080000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 206;
                  break;
               case 208:
                  if ((0x8000000080000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 207;
                  break;
               case 209:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 208;
                  break;
               case 211:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 210;
                  break;
               case 212:
                  if ((0x20000000200000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 211;
                  break;
               case 213:
                  if ((0x2000000020000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 212;
                  break;
               case 214:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 213;
                  break;
               case 215:
                  if (curChar == 95)
                     jjstateSet[jjnewStateCnt++] = 214;
                  break;
               case 216:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 215;
                  break;
               case 217:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 216;
                  break;
               case 218:
                  if (curChar == 95)
                     jjstateSet[jjnewStateCnt++] = 217;
                  break;
               case 219:
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 218;
                  break;
               case 220:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 219;
                  break;
               case 221:
                  if ((0x10000000100L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 220;
                  break;
               case 222:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 221;
                  break;
               case 223:
                  if (curChar == 95)
                     jjstateSet[jjnewStateCnt++] = 222;
                  break;
               case 224:
                  if ((0x8000000080000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 223;
                  break;
               case 225:
                  if ((0x8000000080000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 224;
                  break;
               case 226:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 225;
                  break;
               case 229:
                  if ((0x8000000080000L & l) != 0L)
                     { jjCheckNAdd(228); }
                  break;
               case 230:
                  if ((0x80000000800L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 229;
                  break;
               case 231:
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 230;
                  break;
               case 232:
                  if ((0x80000000800L & l) != 0L)
                     { jjCheckNAdd(228); }
                  break;
               case 233:
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 232;
                  break;
               case 234:
                  if ((0x800000008000L & l) != 0L && kind > 22)
                     kind = 22;
                  break;
               case 235:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 234;
                  break;
               case 236:
                  if (curChar == 95)
                     jjstateSet[jjnewStateCnt++] = 235;
                  break;
               case 237:
                  if ((0x8000000080000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 236;
                  break;
               case 238:
                  if ((0x80000000800L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 237;
                  break;
               case 239:
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 238;
                  break;
               case 240:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 239;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 5:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 45)
                        kind = 45;
                     { jjCheckNAddTwoStates(20, 21); }
                  }
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(84, 87); }
                  if (jjCanMove_4(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(88, 91); }
                  break;
               case 20:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 45)
                     kind = 45;
                  { jjCheckNAddTwoStates(20, 21); }
                  break;
               case 107:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(84, 87); }
                  break;
               case 109:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(22, 24); }
                  break;
               case 110:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(22, 24); }
                  break;
               case 111:
                  if (jjCanMove_3(hiByte, i1, i2, l1, l2) && kind > 36)
                     kind = 36;
                  break;
               case 113:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(25, 27); }
                  break;
               case 114:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(25, 27); }
                  break;
               case 115:
                  if (jjCanMove_3(hiByte, i1, i2, l1, l2) && kind > 37)
                     kind = 37;
                  break;
               case 118:
               case 119:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(28, 30); }
                  break;
               case 122:
               case 123:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(31, 33); }
                  break;
               case 127:
               case 128:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(34, 36); }
                  break;
               case 131:
               case 132:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(37, 39); }
                  break;
               case 134:
                  if (jjCanMove_4(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(88, 91); }
                  break;
               case 136:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(40, 42); }
                  break;
               case 137:
                  if (jjCanMove_5(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(40, 42); }
                  break;
               case 138:
                  if (jjCanMove_6(hiByte, i1, i2, l1, l2) && kind > 36)
                     kind = 36;
                  break;
               case 140:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(43, 45); }
                  break;
               case 141:
                  if (jjCanMove_5(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(43, 45); }
                  break;
               case 142:
                  if (jjCanMove_6(hiByte, i1, i2, l1, l2) && kind > 38)
                     kind = 38;
                  break;
               case 145:
               case 146:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(46, 48); }
                  break;
               case 149:
               case 150:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(49, 51); }
                  break;
               default : if (i1 == 0 || l1 == 0 || i2 == 0 ||  l2 == 0) break; else break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 241 - (jjnewStateCnt = startsAt)))
         break;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { break; }
   }
   if (jjmatchedPos > strPos)
      return curPos;

   int toRet = Math.max(curPos, seenUpto);

   if (curPos < toRet)
      for (i = toRet - Math.min(curPos, seenUpto); i-- > 0; )
         try { curChar = input_stream.readChar(); }
         catch(java.io.IOException e) { throw new Error("Internal Error : Please send a bug report."); }

   if (jjmatchedPos < strPos)
   {
      jjmatchedKind = strKind;
      jjmatchedPos = strPos;
   }
   else if (jjmatchedPos == strPos && jjmatchedKind > strKind)
      jjmatchedKind = strKind;

   return toRet;
}

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, "\50", "\51", "\133", "\135", null, null, null, null, null, 
null, null, "\74", "\76", null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, "\174", null, null, null, null, 
"\54", null, null, null, null, null, null, null, null, null, "\12", "\137", "\75", };
protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}
static final int[] jjnextStates = {
   169, 170, 161, 20, 21, 154, 155, 158, 144, 146, 148, 150, 117, 119, 121, 123, 
   153, 154, 155, 156, 158, 159, 108, 110, 111, 112, 114, 115, 117, 119, 120, 121, 
   123, 124, 126, 128, 129, 130, 132, 133, 135, 137, 138, 139, 141, 142, 144, 146, 
   147, 148, 150, 151, 162, 163, 166, 209, 49, 226, 227, 231, 233, 240, 179, 70, 
   184, 191, 195, 201, 93, 106, 73, 75, 48, 49, 69, 71, 35, 36, 23, 29, 
   126, 128, 130, 132, 108, 110, 112, 114, 135, 137, 139, 141, 
};
private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec2[i2] & l2) != 0L);
      default :
         if ((jjbitVec0[i1] & l1) != 0L)
            return true;
         return false;
   }
}
private static final boolean jjCanMove_1(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 32:
         return ((jjbitVec3[i2] & l2) != 0L);
      default :
         return false;
   }
}
private static final boolean jjCanMove_2(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec2[i2] & l2) != 0L);
      case 32:
         return ((jjbitVec5[i2] & l2) != 0L);
      default :
         if ((jjbitVec4[i1] & l1) != 0L)
            return true;
         return false;
   }
}
private static final boolean jjCanMove_3(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 32:
         return ((jjbitVec6[i2] & l2) != 0L);
      default :
         return false;
   }
}
private static final boolean jjCanMove_4(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 32:
         return ((jjbitVec7[i2] & l2) != 0L);
      default :
         return false;
   }
}
private static final boolean jjCanMove_5(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec2[i2] & l2) != 0L);
      case 32:
         return ((jjbitVec8[i2] & l2) != 0L);
      default :
         if ((jjbitVec4[i1] & l1) != 0L)
            return true;
         return false;
   }
}
private static final boolean jjCanMove_6(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 32:
         return ((jjbitVec9[i2] & l2) != 0L);
      default :
         return false;
   }
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(Exception e)
   {
      jjmatchedKind = 0;
      jjmatchedPos = -1;
      matchedToken = jjFillToken();
      return matchedToken;
   }

   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         return matchedToken;
      }
      else
      {
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

void SkipLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      default :
         break;
   }
}
void MoreLexicalActions()
{
   jjimageLen += (lengthOfMatch = jjmatchedPos + 1);
   switch(jjmatchedKind)
   {
      default :
         break;
   }
}
void TokenLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      default :
         break;
   }
}
private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

    /** Constructor. */
    public GrammarTokenManager(SimpleCharStream stream){

      if (SimpleCharStream.staticFlag)
            throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");

    input_stream = stream;
  }

  /** Constructor. */
  public GrammarTokenManager (SimpleCharStream stream, int lexState){
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Reinitialise parser. */
  
  public void ReInit(SimpleCharStream stream)
  {


    jjmatchedPos =
    jjnewStateCnt =
    0;
    curLexState = defaultLexState;
    input_stream = stream;
    ReInitRounds();
  }

  private void ReInitRounds()
  {
    int i;
    jjround = 0x80000001;
    for (i = 241; i-- > 0;)
      jjrounds[i] = 0x80000000;
  }

  /** Reinitialise parser. */
  public void ReInit(SimpleCharStream stream, int lexState)
  
  {
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Switch to specified lex state. */
  public void SwitchTo(int lexState)
  {
    if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
    else
      curLexState = lexState;
  }


/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
};

/** Lex State array. */
public static final int[] jjnewLexState = {
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, 
};
static final long[] jjtoToken = {
   0x1c3ffff7c0fff9L, 
};
static final long[] jjtoSkip = {
   0x6L, 
};
static final long[] jjtoSpecial = {
   0x0L, 
};
static final long[] jjtoMore = {
   0x0L, 
};
    protected SimpleCharStream  input_stream;

    private final int[] jjrounds = new int[241];
    private final int[] jjstateSet = new int[2 * 241];
    private final StringBuilder jjimage = new StringBuilder();
    private StringBuilder image = jjimage;
    private int jjimageLen;
    private int lengthOfMatch;
    protected int curChar;
}
