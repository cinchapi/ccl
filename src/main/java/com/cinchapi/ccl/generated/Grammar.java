/* Grammar.java */
/* Generated By:JJTree&JavaCC: Do not edit this line. Grammar.java */
package com.cinchapi.ccl.generated;

import com.cinchapi.ccl.SyntaxException;
import com.cinchapi.ccl.grammar.DirectionSymbol;
import com.cinchapi.ccl.grammar.FunctionTokenSymbol;
import com.cinchapi.ccl.grammar.KeySymbol;
import com.cinchapi.ccl.grammar.ValueTokenSymbol;
import com.cinchapi.ccl.type.function.KeyConditionFunction;
import com.cinchapi.ccl.type.function.KeyRecordsFunction;
import com.cinchapi.ccl.grammar.FunctionKeySymbol;
import com.cinchapi.ccl.grammar.FunctionValueSymbol;
import com.cinchapi.ccl.type.function.ImplicitKeyRecordFunction;
import com.cinchapi.ccl.type.function.IndexFunction;
import com.cinchapi.ccl.grammar.NavigationKeySymbol;
import com.cinchapi.ccl.grammar.KeyTokenSymbol;
import com.cinchapi.ccl.grammar.OperatorSymbol;
import com.cinchapi.ccl.grammar.OrderComponentSymbol;
import com.cinchapi.ccl.grammar.TimestampSymbol;
import com.cinchapi.ccl.grammar.ValueSymbol;
import com.cinchapi.ccl.grammar.PageSymbol;
import com.cinchapi.ccl.grammar.OrderSymbol;
import com.cinchapi.ccl.syntax.AbstractSyntaxTree;
import com.cinchapi.ccl.syntax.ConditionTree;
import com.cinchapi.ccl.type.Operator;
import com.cinchapi.ccl.util.NaturalLanguage;
import com.cinchapi.common.base.AnyStrings;
import com.google.common.collect.Iterables;
import com.google.common.collect.Lists;
import com.google.common.collect.Multimap;

import java.util.List;
import java.util.NoSuchElementException;
import java.util.function.Function;

/**
 * The Grammar generated by JavaCC
 */
@SuppressWarnings({"unused", "rawtypes"})
public class Grammar/*@bgen(jjtree)*/implements GrammarTreeConstants, GrammarConstants {/*@bgen(jjtree)*/
  protected JJTGrammarState jjtree = new JJTGrammarState();private Multimap<String, Object> data;
    private Function<String, Object> valueTransformFunction;
    private Function<String, Operator> operatorTransformFunction;
    private GrammarVisitor visitor;

    public Grammar(java.io.InputStream stream,
                Function<String, Object> valueTransformFunction,
                Function<String, Operator> operatorTransformFunction,
                GrammarVisitor visitor) {
        this(stream, null);
        this.data = null;
        this.valueTransformFunction = valueTransformFunction;
        this.operatorTransformFunction = operatorTransformFunction;
        this.visitor = visitor;
    }

    public Grammar(java.io.InputStream stream,
                Function<String, Object> valueTransformFunction,
                Function<String, Operator> operatorTransformFunction,
                Multimap<String, Object> data,
                GrammarVisitor visitor) {
        this(stream, null);
        this.data = data;
        this.valueTransformFunction = valueTransformFunction;
        this.operatorTransformFunction = operatorTransformFunction;
        this.visitor = visitor;
    }

    public Operator transformOperator(String token) {
        return operatorTransformFunction.apply(token);
    }

    public Object transformValue(String token) {
        return valueTransformFunction.apply(token);
    }

  final public ASTStart StartCommandLine() throws ParseException {/*@bgen(jjtree) Start */
  ASTStart jjtn000 = new ASTStart(JJTSTART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      if (jj_2_1(4)) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case WHERE:{
          jj_consume_token(WHERE);
          break;
          }
        default:
          jj_la1[0] = jj_gen;
          ;
        }
        DisjunctionExpression();
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case ORDER:{
          Order();
          break;
          }
        default:
          jj_la1[1] = jj_gen;
          ;
        }
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case PAGE:
        case SIZE:{
          Page();
          break;
          }
        default:
          jj_la1[2] = jj_gen;
          ;
        }
        jj_consume_token(48);
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case PAGE:
        case SIZE:{
          Page();
          jj_consume_token(48);
          break;
          }
        case ORDER:{
          Order();
          jj_consume_token(48);
          break;
          }
        case NUMERIC:
        case SIGNED_INTEGER:
        case SIGNED_DECIMAL:
        case ALPHANUMERIC:
        case PERIOD_SEPARATED_STRING:{
          Function();
          jj_consume_token(48);
          break;
          }
        default:
          jj_la1[3] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
jjtree.closeNodeScope(jjtn000, true);
     jjtc000 = false;
{if ("" != null) return jjtn000;}
    } catch (Throwable jjte000) {
if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
    throw new Error("Missing return statement in function");
}

  final public ASTStart generateAST() throws ParseException {/*@bgen(jjtree) Start */
  ASTStart jjtn000 = new ASTStart(JJTSTART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      if (jj_2_2(4)) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case WHERE:{
          jj_consume_token(WHERE);
          break;
          }
        default:
          jj_la1[4] = jj_gen;
          ;
        }
        DisjunctionExpression();
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case ORDER:{
          Order();
          break;
          }
        default:
          jj_la1[5] = jj_gen;
          ;
        }
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case PAGE:
        case SIZE:{
          Page();
          break;
          }
        default:
          jj_la1[6] = jj_gen;
          ;
        }
        jj_consume_token(0);
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case PAGE:
        case SIZE:{
          Page();
          jj_consume_token(0);
          break;
          }
        case ORDER:{
          Order();
          jj_consume_token(0);
          break;
          }
        case NUMERIC:
        case SIGNED_INTEGER:
        case SIGNED_DECIMAL:
        case ALPHANUMERIC:
        case PERIOD_SEPARATED_STRING:{
          Function();
          jj_consume_token(0);
          break;
          }
        default:
          jj_la1[7] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
jjtree.closeNodeScope(jjtn000, true);
     jjtc000 = false;
{if ("" != null) return jjtn000;}
    } catch (Throwable jjte000) {
if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
    throw new Error("Missing return statement in function");
}

  final public ASTStart generateSubAST() throws ParseException {/*@bgen(jjtree) Start */
  ASTStart jjtn000 = new ASTStart(JJTSTART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      DisjunctionExpression();
jjtree.closeNodeScope(jjtn000, true);
     jjtc000 = false;
{if ("" != null) return jjtn000;}
    } catch (Throwable jjte000) {
if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
    throw new Error("Missing return statement in function");
}

  final public void DisjunctionExpression() throws ParseException {
    ConjunctionExpression();
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case DISJUNCTION:{
        ;
        break;
        }
      default:
        jj_la1[8] = jj_gen;
        break label_1;
      }
ASTOr jjtn001 = new ASTOr(JJTOR);
                               boolean jjtc001 = true;
                               jjtree.openNodeScope(jjtn001);
      try {
        jj_consume_token(DISJUNCTION);
        ConjunctionExpression();
      } catch (Throwable jjte001) {
if (jjtc001) {
                                 jjtree.clearNodeScope(jjtn001);
                                 jjtc001 = false;
                               } else {
                                 jjtree.popNode();
                               }
                               if (jjte001 instanceof RuntimeException) {
                                 {if (true) throw (RuntimeException)jjte001;}
                               }
                               if (jjte001 instanceof ParseException) {
                                 {if (true) throw (ParseException)jjte001;}
                               }
                               {if (true) throw (Error)jjte001;}
      } finally {
if (jjtc001) {
                                 jjtree.closeNodeScope(jjtn001,  2);
                               }
      }
    }
}

  final public void ConjunctionExpression() throws ParseException {
    UnaryExpression();
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case CONJUNCTION:{
        ;
        break;
        }
      default:
        jj_la1[9] = jj_gen;
        break label_2;
      }
ASTAnd jjtn001 = new ASTAnd(JJTAND);
                         boolean jjtc001 = true;
                         jjtree.openNodeScope(jjtn001);
      try {
        jj_consume_token(CONJUNCTION);
        UnaryExpression();
      } catch (Throwable jjte001) {
if (jjtc001) {
                           jjtree.clearNodeScope(jjtn001);
                           jjtc001 = false;
                         } else {
                           jjtree.popNode();
                         }
                         if (jjte001 instanceof RuntimeException) {
                           {if (true) throw (RuntimeException)jjte001;}
                         }
                         if (jjte001 instanceof ParseException) {
                           {if (true) throw (ParseException)jjte001;}
                         }
                         {if (true) throw (Error)jjte001;}
      } finally {
if (jjtc001) {
                           jjtree.closeNodeScope(jjtn001,  2);
                         }
      }
    }
}

  final public void UnaryExpression() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case OPEN_PARENTHESES:{
      jj_consume_token(OPEN_PARENTHESES);
      DisjunctionExpression();
      jj_consume_token(CLOSE_PARENTHESES);
      break;
      }
    case RESERVED_IDENTIFIER:
    case NUMERIC:
    case SIGNED_INTEGER:
    case SIGNED_DECIMAL:
    case ALPHANUMERIC:
    case PERIOD_SEPARATED_STRING:{
      RelationalExpression();
      break;
      }
    default:
      jj_la1[10] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  final public void RelationalExpression() throws ParseException {/*@bgen(jjtree) Expression */
    ASTExpression jjtn000 = new ASTExpression(JJTEXPRESSION);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);KeyTokenSymbol key = null;
    OperatorSymbol operator = null;
    ValueTokenSymbol value1 = null;
    ValueTokenSymbol value2 = null;
    TimestampSymbol timestamp = null;
    try {
      key = Key();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case LINKS_TO:{
        operator = LinksToOperator();
        value1 = LinksToValue();
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case TIMESTAMP:{
          timestamp = Timestamp();
          break;
          }
        default:
          jj_la1[11] = jj_gen;
          ;
        }
        break;
        }
      case REGEX:
      case NOT_REGEX:
      case LIKE:
      case NOT_LIKE:{
        operator = RegexBasedOperator();
        value1 = RegexValue();
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case TIMESTAMP:{
          timestamp = Timestamp();
          break;
          }
        default:
          jj_la1[12] = jj_gen;
          ;
        }
        break;
        }
      case UNARY_OPERATOR:
      case OPEN_ANGLE_BRACKET:
      case CLOSE_ANGLE_BRACKET:{
        operator = UnaryOperator();
        value1 = UnaryValue();
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case TIMESTAMP:{
          timestamp = Timestamp();
          break;
          }
        default:
          jj_la1[13] = jj_gen;
          ;
        }
        break;
        }
      case BINARY_OPERATOR:{
        operator = BinaryOperator();
        value1 = BinaryValue();
        value2 = BinaryValue();
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case TIMESTAMP:{
          timestamp = Timestamp();
          break;
          }
        default:
          jj_la1[14] = jj_gen;
          ;
        }
        break;
        }
      default:
        jj_la1[15] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
jjtn000.key(key);
          jjtn000.operator(operator);
          jjtn000.addValue(value1);
          if(value2 != null) jjtn000.addValue(value2);
          if(timestamp != null) jjtn000.timestamp(timestamp);
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
}

  final public KeyTokenSymbol Key() throws ParseException {FunctionKeySymbol function;
  Token key;
    if (jj_2_3(2)) {
      function = KeyFunction();
{if ("" != null) return function;}
    } else {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case RESERVED_IDENTIFIER:
      case NUMERIC:
      case SIGNED_INTEGER:
      case SIGNED_DECIMAL:
      case ALPHANUMERIC:{
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case RESERVED_IDENTIFIER:{
          key = jj_consume_token(RESERVED_IDENTIFIER);
          break;
          }
        case SIGNED_INTEGER:{
          key = jj_consume_token(SIGNED_INTEGER);
          break;
          }
        case SIGNED_DECIMAL:{
          key = jj_consume_token(SIGNED_DECIMAL);
          break;
          }
        case NUMERIC:{
          key = jj_consume_token(NUMERIC);
          break;
          }
        case ALPHANUMERIC:{
          key = jj_consume_token(ALPHANUMERIC);
          break;
          }
        default:
          jj_la1[16] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
{if ("" != null) return new KeySymbol(key.image);}
        break;
        }
      case PERIOD_SEPARATED_STRING:{
        key = jj_consume_token(PERIOD_SEPARATED_STRING);
{if ("" != null) return new NavigationKeySymbol(key.image);}
        break;
        }
      default:
        jj_la1[17] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
}

  final public ValueTokenSymbol UnaryValue() throws ParseException {FunctionValueSymbol function;
  Token key;
  Token word;
  String value = "";
  List<String> records = Lists.newArrayList();
  ASTStart ccl;
    if (jj_2_5(2)) {
      function = ValueFunction();
{if ("" != null) return function;}
    } else {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case NUMERIC:
      case SIGNED_INTEGER:
      case SIGNED_DECIMAL:
      case ALPHANUMERIC:
      case PERIOD_SEPARATED_STRING:
      case NON_ALPHANUMERIC_AND_ALPHANUMERIC:{
        label_3:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case SIGNED_INTEGER:{
            word = jj_consume_token(SIGNED_INTEGER);
            break;
            }
          case SIGNED_DECIMAL:{
            word = jj_consume_token(SIGNED_DECIMAL);
            break;
            }
          case NUMERIC:{
            word = jj_consume_token(NUMERIC);
            break;
            }
          case ALPHANUMERIC:{
            word = jj_consume_token(ALPHANUMERIC);
            break;
            }
          case NON_ALPHANUMERIC_AND_ALPHANUMERIC:{
            word = jj_consume_token(NON_ALPHANUMERIC_AND_ALPHANUMERIC);
            break;
            }
          case PERIOD_SEPARATED_STRING:{
            word = jj_consume_token(PERIOD_SEPARATED_STRING);
            break;
            }
          default:
            jj_la1[18] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
value += (value.equals("")) ? word.image : " " + word.image;
          if (jj_2_4(2)) {
            ;
          } else {
            break label_3;
          }
        }
if(value.charAt(0) == '$') {
        String var = value.substring(1);
        try {
            value = Iterables.getOnlyElement(data.get(var)).toString();
        }
        catch (IllegalArgumentException e) {
            String err = "Unable to resolve variable {} because multiple values exist locally: {}";
            {if (true) throw new SyntaxException(AnyStrings.format(err, value, data.get(var)));}
        }
        catch (NoSuchElementException e) {
            String err = "Unable to resolve variable {} because no values exist locally";
            {if (true) throw new SyntaxException(AnyStrings.format(err, value));}
        }
    }
    else if(value.length() > 2 && value.charAt(0) == '\\'
            && value.charAt(1) == '$') {
        value = value.substring(1);
    }
    else {
        value = value.replace("\\@", "@");
    }
    {if ("" != null) return new ValueSymbol(transformValue(value));}
        break;
        }
      case QUOTED_STRING:{
        word = jj_consume_token(QUOTED_STRING);
{if ("" != null) return new ValueSymbol(transformValue(word.image.replace("\\\"", "\"")));}
        break;
        }
      default:
        jj_la1[19] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
}

  final public ValueTokenSymbol LinksToValue() throws ParseException {Token word;
    word = jj_consume_token(NUMERIC);
{if ("" != null) return new ValueSymbol(transformValue(word.image));}
    throw new Error("Missing return statement in function");
}

  final public ValueTokenSymbol RegexValue() throws ParseException {Token word;
  String value = "";
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case OPEN_PARENTHESES:
    case CLOSE_PARENTHESES:
    case NUMERIC:
    case SIGNED_INTEGER:
    case SIGNED_DECIMAL:
    case ALPHANUMERIC:
    case PERIOD_SEPARATED_STRING:
    case NON_ALPHANUMERIC_AND_ALPHANUMERIC:
    case 49:
    case 50:{
      label_4:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case SIGNED_INTEGER:{
          word = jj_consume_token(SIGNED_INTEGER);
          break;
          }
        case SIGNED_DECIMAL:{
          word = jj_consume_token(SIGNED_DECIMAL);
          break;
          }
        case NUMERIC:{
          word = jj_consume_token(NUMERIC);
          break;
          }
        case ALPHANUMERIC:{
          word = jj_consume_token(ALPHANUMERIC);
          break;
          }
        case NON_ALPHANUMERIC_AND_ALPHANUMERIC:{
          word = jj_consume_token(NON_ALPHANUMERIC_AND_ALPHANUMERIC);
          break;
          }
        case PERIOD_SEPARATED_STRING:{
          word = jj_consume_token(PERIOD_SEPARATED_STRING);
          break;
          }
        case OPEN_PARENTHESES:{
          word = jj_consume_token(OPEN_PARENTHESES);
          break;
          }
        case CLOSE_PARENTHESES:{
          word = jj_consume_token(CLOSE_PARENTHESES);
          break;
          }
        case 49:{
          word = jj_consume_token(49);
          break;
          }
        case 50:{
          word = jj_consume_token(50);
          break;
          }
        default:
          jj_la1[20] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
value += word.image;
        if (jj_2_6(3)) {
          ;
        } else {
          break label_4;
        }
      }
{if ("" != null) return new ValueSymbol(transformValue(value));}
      break;
      }
    case QUOTED_STRING:{
      word = jj_consume_token(QUOTED_STRING);
{if ("" != null) return new ValueSymbol(transformValue(word.image.replace("\\\"", "\"")));}
      break;
      }
    default:
      jj_la1[21] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
}

  final public ValueTokenSymbol BinaryValue() throws ParseException {FunctionValueSymbol function;
  Token key;
  Token word;
  String value = "";
  List<String> records = Lists.newArrayList();
  ASTStart ccl;
    if (jj_2_7(2)) {
      function = ValueFunction();
{if ("" != null) return function;}
    } else {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case NUMERIC:
      case SIGNED_INTEGER:
      case SIGNED_DECIMAL:
      case ALPHANUMERIC:
      case PERIOD_SEPARATED_STRING:
      case NON_ALPHANUMERIC_AND_ALPHANUMERIC:{
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case SIGNED_INTEGER:{
          word = jj_consume_token(SIGNED_INTEGER);
          break;
          }
        case SIGNED_DECIMAL:{
          word = jj_consume_token(SIGNED_DECIMAL);
          break;
          }
        case NUMERIC:{
          word = jj_consume_token(NUMERIC);
          break;
          }
        case ALPHANUMERIC:{
          word = jj_consume_token(ALPHANUMERIC);
          break;
          }
        case NON_ALPHANUMERIC_AND_ALPHANUMERIC:{
          word = jj_consume_token(NON_ALPHANUMERIC_AND_ALPHANUMERIC);
          break;
          }
        case PERIOD_SEPARATED_STRING:{
          word = jj_consume_token(PERIOD_SEPARATED_STRING);
          break;
          }
        default:
          jj_la1[22] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
value = word.image;
    if(value.charAt(0) == '$') {
        String var = value.substring(1);
        try {
            value = Iterables.getOnlyElement(data.get(var)).toString();
        }
        catch (IllegalArgumentException e) {
            String err = "Unable to resolve variable {} because multiple values exist locally: {}";
            {if (true) throw new SyntaxException(AnyStrings.format(err, value, data.get(var)));}
        }
        catch (NoSuchElementException e) {
            String err = "Unable to resolve variable {} because no values exist locally";
            {if (true) throw new SyntaxException(AnyStrings.format(err, value));}
        }
    }
    else if(value.length() > 2 && value.charAt(0) == '\\'
            && value.charAt(1) == '$') {
        value = value.substring(1);
    }
    else {
        value = value.replace("\\@", "@");
    }
    {if ("" != null) return new ValueSymbol(transformValue(value));}
        break;
        }
      case QUOTED_STRING:{
        word = jj_consume_token(QUOTED_STRING);
{if ("" != null) return new ValueSymbol(transformValue(word.image.replace("\\\"", "\"")));}
        break;
        }
      default:
        jj_la1[23] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
}

  final public OperatorSymbol LinksToOperator() throws ParseException {Token operator;
    operator = jj_consume_token(LINKS_TO);
{if ("" != null) return new OperatorSymbol(transformOperator(operator.image));}
    throw new Error("Missing return statement in function");
}

  final public OperatorSymbol RegexBasedOperator() throws ParseException {Token operator;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case REGEX:{
      operator = jj_consume_token(REGEX);
      break;
      }
    case NOT_REGEX:{
      operator = jj_consume_token(NOT_REGEX);
      break;
      }
    case LIKE:{
      operator = jj_consume_token(LIKE);
      break;
      }
    case NOT_LIKE:{
      operator = jj_consume_token(NOT_LIKE);
      break;
      }
    default:
      jj_la1[24] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return new OperatorSymbol(transformOperator(operator.image));}
    throw new Error("Missing return statement in function");
}

  final public OperatorSymbol UnaryOperator() throws ParseException {Token operator;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case UNARY_OPERATOR:{
      operator = jj_consume_token(UNARY_OPERATOR);
      break;
      }
    case OPEN_ANGLE_BRACKET:{
      operator = jj_consume_token(OPEN_ANGLE_BRACKET);
      break;
      }
    case CLOSE_ANGLE_BRACKET:{
      operator = jj_consume_token(CLOSE_ANGLE_BRACKET);
      break;
      }
    default:
      jj_la1[25] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return new OperatorSymbol(transformOperator(operator.image));}
    throw new Error("Missing return statement in function");
}

  final public OperatorSymbol BinaryOperator() throws ParseException {Token operator;
    operator = jj_consume_token(BINARY_OPERATOR);
{if ("" != null) return new OperatorSymbol(transformOperator(operator.image));}
    throw new Error("Missing return statement in function");
}

  final public TimestampSymbol Timestamp() throws ParseException {Token word;
  String timestamp = "";
    jj_consume_token(TIMESTAMP);
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case QUOTED_STRING:{
        word = jj_consume_token(QUOTED_STRING);
        break;
        }
      case SIGNED_INTEGER:{
        word = jj_consume_token(SIGNED_INTEGER);
        break;
        }
      case SIGNED_DECIMAL:{
        word = jj_consume_token(SIGNED_DECIMAL);
        break;
        }
      case NUMERIC:{
        word = jj_consume_token(NUMERIC);
        break;
        }
      case ALPHANUMERIC:{
        word = jj_consume_token(ALPHANUMERIC);
        break;
        }
      case NON_ALPHANUMERIC_AND_ALPHANUMERIC:{
        word = jj_consume_token(NON_ALPHANUMERIC_AND_ALPHANUMERIC);
        break;
        }
      default:
        jj_la1[26] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
timestamp += (timestamp.equals("")) ? word.image : " " + word.image;
      if (jj_2_8(2)) {
        ;
      } else {
        break label_5;
      }
    }
{if ("" != null) return new TimestampSymbol(NaturalLanguage.parseMicros(timestamp));}
    throw new Error("Missing return statement in function");
}

  final public void Page() throws ParseException {/*@bgen(jjtree) Page */
  ASTPage jjtn000 = new ASTPage(JJTPAGE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);String number = null;
  String size = null;
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case PAGE:{
        number = Number();
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case SIZE:{
          size = Size();
          break;
          }
        default:
          jj_la1[27] = jj_gen;
          ;
        }
        break;
        }
      case SIZE:{
        size = Size();
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case PAGE:{
          number = Number();
          break;
          }
        default:
          jj_la1[28] = jj_gen;
          ;
        }
        break;
        }
      default:
        jj_la1[29] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
jjtn000.page(new PageSymbol(number != null ? Integer.parseInt(number) : null, size != null ? Integer.parseInt(size) : null));
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
}

  final public String Number() throws ParseException {Token number;
    jj_consume_token(PAGE);
    number = jj_consume_token(NUMERIC);
{if ("" != null) return number.image;}
    throw new Error("Missing return statement in function");
}

  final public String Size() throws ParseException {Token size;
    jj_consume_token(SIZE);
    size = jj_consume_token(NUMERIC);
{if ("" != null) return size.image;}
    throw new Error("Missing return statement in function");
}

  final public void Order() throws ParseException {/*@bgen(jjtree) Order */
    ASTOrder jjtn000 = new ASTOrder(JJTORDER);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);OrderSymbol order = new OrderSymbol();
    OrderComponentSymbol orderComponent;
    try {
      jj_consume_token(ORDER);
      orderComponent = OrderClause();
order.add(orderComponent);
      label_6:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case COMMA:{
          ;
          break;
          }
        default:
          jj_la1[30] = jj_gen;
          break label_6;
        }
        jj_consume_token(COMMA);
        orderComponent = OrderClause();
order.add(orderComponent);
      }
jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
jjtn000.order(order);
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
}

  final public OrderComponentSymbol OrderClause() throws ParseException {KeyTokenSymbol key;
    TimestampSymbol timestamp = null;
    DirectionSymbol direction = null;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case OPEN_ANGLE_BRACKET:
    case CLOSE_ANGLE_BRACKET:{
      direction = SymbolicDirection();
      key = Key();
      break;
      }
    case RESERVED_IDENTIFIER:
    case NUMERIC:
    case SIGNED_INTEGER:
    case SIGNED_DECIMAL:
    case ALPHANUMERIC:
    case PERIOD_SEPARATED_STRING:{
      key = Key();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ASC:
      case DESC:{
        direction = WordDirection();
        break;
        }
      default:
        jj_la1[31] = jj_gen;
        ;
      }
      break;
      }
    default:
      jj_la1[32] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case TIMESTAMP:{
      timestamp = Timestamp();
      break;
      }
    default:
      jj_la1[33] = jj_gen;
      ;
    }
if(direction != null) {
          if(timestamp != null) {
              {if ("" != null) return new OrderComponentSymbol(key, timestamp, direction);}
          }
          else {
              {if ("" != null) return new OrderComponentSymbol(key, direction);}
          }
      }
      else {
          if(timestamp != null) {
              {if ("" != null) return new OrderComponentSymbol(key, timestamp,
                  DirectionSymbol.ASCENDING);}
          }
          else {
              {if ("" != null) return new OrderComponentSymbol(key,
                  DirectionSymbol.ASCENDING);}
          }
      }
    throw new Error("Missing return statement in function");
}

  final public DirectionSymbol SymbolicDirection() throws ParseException {Token direction;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case OPEN_ANGLE_BRACKET:{
      direction = jj_consume_token(OPEN_ANGLE_BRACKET);
{if ("" != null) return DirectionSymbol.ASCENDING;}
      break;
      }
    case CLOSE_ANGLE_BRACKET:{
      direction = jj_consume_token(CLOSE_ANGLE_BRACKET);
{if ("" != null) return DirectionSymbol.DESCENDING;}
      break;
      }
    default:
      jj_la1[34] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
}

  final public DirectionSymbol WordDirection() throws ParseException {Token direction;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ASC:{
      direction = jj_consume_token(ASC);
{if ("" != null) return DirectionSymbol.ASCENDING;}
      break;
      }
    case DESC:{
      direction = jj_consume_token(DESC);
{if ("" != null) return DirectionSymbol.DESCENDING;}
      break;
      }
    default:
      jj_la1[35] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
}

  final public void Function() throws ParseException {/*@bgen(jjtree) Function */
    ASTFunction jjtn000 = new ASTFunction(JJTFUNCTION);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);FunctionTokenSymbol function;
    try {
      if (jj_2_9(2)) {
        function = KeyFunction();
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case ALPHANUMERIC:{
          function = ValueFunction();
          break;
          }
        default:
          jj_la1[36] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
jjtn000.function(function);
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
}

  final public FunctionKeySymbol KeyFunction() throws ParseException {Token key;
  Token function;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case SIGNED_INTEGER:{
      key = jj_consume_token(SIGNED_INTEGER);
      break;
      }
    case SIGNED_DECIMAL:{
      key = jj_consume_token(SIGNED_DECIMAL);
      break;
      }
    case NUMERIC:{
      key = jj_consume_token(NUMERIC);
      break;
      }
    case ALPHANUMERIC:{
      key = jj_consume_token(ALPHANUMERIC);
      break;
      }
    case PERIOD_SEPARATED_STRING:{
      key = jj_consume_token(PERIOD_SEPARATED_STRING);
      break;
      }
    default:
      jj_la1[37] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(PIPE);
    function = jj_consume_token(ALPHANUMERIC);
{if ("" != null) return new FunctionKeySymbol(new ImplicitKeyRecordFunction(function.image, key.image.substring(0, key.image.length())));}
    throw new Error("Missing return statement in function");
}

  final public FunctionValueSymbol ValueFunction() throws ParseException {Token function;
  Token key;
  Token word;
  List<String> records = Lists.newArrayList();
  ASTStart ccl;
  TimestampSymbol timestamp = null;
    function = jj_consume_token(ALPHANUMERIC);
    jj_consume_token(OPEN_PARENTHESES);
    if (jj_2_10(3)) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case SIGNED_INTEGER:{
        key = jj_consume_token(SIGNED_INTEGER);
        break;
        }
      case SIGNED_DECIMAL:{
        key = jj_consume_token(SIGNED_DECIMAL);
        break;
        }
      case ALPHANUMERIC:{
        key = jj_consume_token(ALPHANUMERIC);
        break;
        }
      case PERIOD_SEPARATED_STRING:{
        key = jj_consume_token(PERIOD_SEPARATED_STRING);
        break;
        }
      default:
        jj_la1[38] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(CLOSE_PARENTHESES);
{if ("" != null) return new FunctionValueSymbol(new IndexFunction(function.image, key.image));}
    } else if (jj_2_11(3)) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case SIGNED_INTEGER:{
        key = jj_consume_token(SIGNED_INTEGER);
        break;
        }
      case SIGNED_DECIMAL:{
        key = jj_consume_token(SIGNED_DECIMAL);
        break;
        }
      case ALPHANUMERIC:{
        key = jj_consume_token(ALPHANUMERIC);
        break;
        }
      case PERIOD_SEPARATED_STRING:{
        key = jj_consume_token(PERIOD_SEPARATED_STRING);
        break;
        }
      default:
        jj_la1[39] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(COMMA);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case NUMERIC:
      case SIGNED_INTEGER:{
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case SIGNED_INTEGER:{
          word = jj_consume_token(SIGNED_INTEGER);
          break;
          }
        case NUMERIC:{
          word = jj_consume_token(NUMERIC);
          break;
          }
        default:
          jj_la1[40] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
records.add(word.image);
        label_7:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case COMMA:{
            ;
            break;
            }
          default:
            jj_la1[41] = jj_gen;
            break label_7;
          }
          jj_consume_token(COMMA);
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case SIGNED_INTEGER:{
            word = jj_consume_token(SIGNED_INTEGER);
            break;
            }
          case NUMERIC:{
            word = jj_consume_token(NUMERIC);
            break;
            }
          default:
            jj_la1[42] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
records.add(word.image);
        }
        jj_consume_token(CLOSE_PARENTHESES);
{if ("" != null) return new FunctionValueSymbol(new KeyRecordsFunction(function.image, key.image, records));}
        break;
        }
      case OPEN_BRACKET:{
        jj_consume_token(OPEN_BRACKET);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case SIGNED_INTEGER:{
          word = jj_consume_token(SIGNED_INTEGER);
          break;
          }
        case NUMERIC:{
          word = jj_consume_token(NUMERIC);
          break;
          }
        default:
          jj_la1[43] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
records.add(word.image);
        label_8:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case COMMA:{
            ;
            break;
            }
          default:
            jj_la1[44] = jj_gen;
            break label_8;
          }
          jj_consume_token(COMMA);
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case SIGNED_INTEGER:{
            word = jj_consume_token(SIGNED_INTEGER);
            break;
            }
          case NUMERIC:{
            word = jj_consume_token(NUMERIC);
            break;
            }
          default:
            jj_la1[45] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
records.add(word.image);
        }
        jj_consume_token(CLOSE_BRACKET);
        jj_consume_token(COMMA);
        timestamp = Timestamp();
        jj_consume_token(CLOSE_PARENTHESES);
{if ("" != null) return new FunctionValueSymbol(new KeyRecordsFunction(function.image, key.image, records), timestamp);}
        break;
        }
      default:
        jj_la1[46] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } else {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case SIGNED_INTEGER:
      case SIGNED_DECIMAL:
      case ALPHANUMERIC:
      case PERIOD_SEPARATED_STRING:{
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case SIGNED_INTEGER:{
          key = jj_consume_token(SIGNED_INTEGER);
          break;
          }
        case SIGNED_DECIMAL:{
          key = jj_consume_token(SIGNED_DECIMAL);
          break;
          }
        case ALPHANUMERIC:{
          key = jj_consume_token(ALPHANUMERIC);
          break;
          }
        case PERIOD_SEPARATED_STRING:{
          key = jj_consume_token(PERIOD_SEPARATED_STRING);
          break;
          }
        default:
          jj_la1[47] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        jj_consume_token(COMMA);
        ccl = generateSubAST();
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case CLOSE_PARENTHESES:{
          jj_consume_token(CLOSE_PARENTHESES);
ConditionTree tree = (ConditionTree) ccl.jjtAccept(visitor, null);
          {if ("" != null) return new FunctionValueSymbol(new KeyConditionFunction(function.image, key.image, tree));}
          break;
          }
        case COMMA:{
          jj_consume_token(COMMA);
          timestamp = Timestamp();
          jj_consume_token(CLOSE_PARENTHESES);
ConditionTree tree = (ConditionTree) ccl.jjtAccept(visitor, null);
          {if ("" != null) return new FunctionValueSymbol(new KeyConditionFunction(function.image, key.image, tree), timestamp);}
          break;
          }
        default:
          jj_la1[48] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
        }
      default:
        jj_la1[49] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
}

  private boolean jj_2_1(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_1()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_2()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_3()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_4()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_2_5(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_5()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  private boolean jj_2_6(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_6()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  private boolean jj_2_7(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_7()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  private boolean jj_2_8(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_8()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  private boolean jj_2_9(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_9()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  private boolean jj_2_10(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_10()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  private boolean jj_2_11(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_11()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  private boolean jj_3R_35()
 {
    if (jj_3R_47()) return true;
    if (jj_3R_48()) return true;
    if (jj_3R_48()) return true;
    return false;
  }

  private boolean jj_3R_25()
 {
    if (jj_3R_29()) return true;
    return false;
  }

  private boolean jj_3R_34()
 {
    if (jj_3R_44()) return true;
    if (jj_3R_45()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_46()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_8()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(34)) {
    jj_scanpos = xsp;
    if (jj_scan_token(39)) {
    jj_scanpos = xsp;
    if (jj_scan_token(40)) {
    jj_scanpos = xsp;
    if (jj_scan_token(37)) {
    jj_scanpos = xsp;
    if (jj_scan_token(41)) {
    jj_scanpos = xsp;
    if (jj_scan_token(43)) return true;
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_24()
 {
    if (jj_3R_28()) return true;
    return false;
  }

  private boolean jj_3R_33()
 {
    if (jj_3R_41()) return true;
    if (jj_3R_42()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_43()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_32()
 {
    if (jj_3R_38()) return true;
    if (jj_3R_39()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_40()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_21()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_24()) {
    jj_scanpos = xsp;
    if (jj_3R_25()) return true;
    }
    return false;
  }

  private boolean jj_3R_51()
 {
    if (jj_scan_token(QUOTED_STRING)) return true;
    return false;
  }

  private boolean jj_3R_13()
 {
    if (jj_3R_21()) return true;
    return false;
  }

  private boolean jj_3_6()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(39)) {
    jj_scanpos = xsp;
    if (jj_scan_token(40)) {
    jj_scanpos = xsp;
    if (jj_scan_token(37)) {
    jj_scanpos = xsp;
    if (jj_scan_token(41)) {
    jj_scanpos = xsp;
    if (jj_scan_token(43)) {
    jj_scanpos = xsp;
    if (jj_scan_token(42)) {
    jj_scanpos = xsp;
    if (jj_scan_token(3)) {
    jj_scanpos = xsp;
    if (jj_scan_token(4)) {
    jj_scanpos = xsp;
    if (jj_scan_token(49)) {
    jj_scanpos = xsp;
    if (jj_scan_token(50)) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_50()
 {
    Token xsp;
    if (jj_3_6()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_6()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_42()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_50()) {
    jj_scanpos = xsp;
    if (jj_3R_51()) return true;
    }
    return false;
  }

  private boolean jj_3R_23()
 {
    if (jj_scan_token(CONJUNCTION)) return true;
    return false;
  }

  private boolean jj_3R_19()
 {
    if (jj_scan_token(DISJUNCTION)) return true;
    return false;
  }

  private boolean jj_3R_30()
 {
    if (jj_3R_31()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_32()) {
    jj_scanpos = xsp;
    if (jj_3R_33()) {
    jj_scanpos = xsp;
    if (jj_3R_34()) {
    jj_scanpos = xsp;
    if (jj_3R_35()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_49()
 {
    if (jj_scan_token(TIMESTAMP)) return true;
    return false;
  }

  private boolean jj_3R_12()
 {
    if (jj_3R_20()) return true;
    return false;
  }

  private boolean jj_3R_39()
 {
    if (jj_scan_token(NUMERIC)) return true;
    return false;
  }

  private boolean jj_3R_11()
 {
    if (jj_3R_21()) return true;
    return false;
  }

  private boolean jj_3R_47()
 {
    if (jj_scan_token(BINARY_OPERATOR)) return true;
    return false;
  }

  private boolean jj_3R_22()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_26()) {
    jj_scanpos = xsp;
    if (jj_3R_27()) return true;
    }
    return false;
  }

  private boolean jj_3R_26()
 {
    if (jj_scan_token(OPEN_PARENTHESES)) return true;
    if (jj_3R_9()) return true;
    return false;
  }

  private boolean jj_3R_53()
 {
    if (jj_scan_token(QUOTED_STRING)) return true;
    return false;
  }

  private boolean jj_3R_44()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(12)) {
    jj_scanpos = xsp;
    if (jj_scan_token(14)) {
    jj_scanpos = xsp;
    if (jj_scan_token(15)) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_18()
 {
    if (jj_3R_22()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_23()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_10()
 {
    if (jj_3R_20()) return true;
    return false;
  }

  private boolean jj_3R_17()
 {
    if (jj_scan_token(OPEN_BRACKET)) return true;
    return false;
  }

  private boolean jj_3R_16()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(39)) {
    jj_scanpos = xsp;
    if (jj_scan_token(37)) return true;
    }
    return false;
  }

  private boolean jj_3R_9()
 {
    if (jj_3R_18()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_19()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_41()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(23)) {
    jj_scanpos = xsp;
    if (jj_scan_token(24)) {
    jj_scanpos = xsp;
    if (jj_scan_token(25)) {
    jj_scanpos = xsp;
    if (jj_scan_token(26)) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3_11()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(39)) {
    jj_scanpos = xsp;
    if (jj_scan_token(40)) {
    jj_scanpos = xsp;
    if (jj_scan_token(41)) {
    jj_scanpos = xsp;
    if (jj_scan_token(42)) return true;
    }
    }
    }
    if (jj_scan_token(COMMA)) return true;
    xsp = jj_scanpos;
    if (jj_3R_16()) {
    jj_scanpos = xsp;
    if (jj_3R_17()) return true;
    }
    return false;
  }

  private boolean jj_3R_43()
 {
    if (jj_3R_49()) return true;
    return false;
  }

  private boolean jj_3R_38()
 {
    if (jj_scan_token(LINKS_TO)) return true;
    return false;
  }

  private boolean jj_3R_46()
 {
    if (jj_3R_49()) return true;
    return false;
  }

  private boolean jj_3R_40()
 {
    if (jj_3R_49()) return true;
    return false;
  }

  private boolean jj_3_10()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(39)) {
    jj_scanpos = xsp;
    if (jj_scan_token(40)) {
    jj_scanpos = xsp;
    if (jj_scan_token(41)) {
    jj_scanpos = xsp;
    if (jj_scan_token(42)) return true;
    }
    }
    }
    if (jj_scan_token(CLOSE_PARENTHESES)) return true;
    return false;
  }

  private boolean jj_3R_27()
 {
    if (jj_3R_30()) return true;
    return false;
  }

  private boolean jj_3_4()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(39)) {
    jj_scanpos = xsp;
    if (jj_scan_token(40)) {
    jj_scanpos = xsp;
    if (jj_scan_token(37)) {
    jj_scanpos = xsp;
    if (jj_scan_token(41)) {
    jj_scanpos = xsp;
    if (jj_scan_token(43)) {
    jj_scanpos = xsp;
    if (jj_scan_token(42)) return true;
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_15()
 {
    if (jj_scan_token(ALPHANUMERIC)) return true;
    if (jj_scan_token(OPEN_PARENTHESES)) return true;
    return false;
  }

  private boolean jj_3R_52()
 {
    Token xsp;
    if (jj_3_4()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_4()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_2()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(8)) jj_scanpos = xsp;
    if (jj_3R_9()) return true;
    xsp = jj_scanpos;
    if (jj_3R_12()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_13()) jj_scanpos = xsp;
    if (jj_scan_token(0)) return true;
    return false;
  }

  private boolean jj_3R_55()
 {
    if (jj_scan_token(QUOTED_STRING)) return true;
    return false;
  }

  private boolean jj_3R_45()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_5()) {
    jj_scanpos = xsp;
    if (jj_3R_52()) {
    jj_scanpos = xsp;
    if (jj_3R_53()) return true;
    }
    }
    return false;
  }

  private boolean jj_3_5()
 {
    if (jj_3R_15()) return true;
    return false;
  }

  private boolean jj_3R_20()
 {
    if (jj_scan_token(ORDER)) return true;
    return false;
  }

  private boolean jj_3R_14()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(39)) {
    jj_scanpos = xsp;
    if (jj_scan_token(40)) {
    jj_scanpos = xsp;
    if (jj_scan_token(37)) {
    jj_scanpos = xsp;
    if (jj_scan_token(41)) {
    jj_scanpos = xsp;
    if (jj_scan_token(42)) return true;
    }
    }
    }
    }
    if (jj_scan_token(PIPE)) return true;
    if (jj_scan_token(ALPHANUMERIC)) return true;
    return false;
  }

  private boolean jj_3_1()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(8)) jj_scanpos = xsp;
    if (jj_3R_9()) return true;
    xsp = jj_scanpos;
    if (jj_3R_10()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_11()) jj_scanpos = xsp;
    if (jj_scan_token(48)) return true;
    return false;
  }

  private boolean jj_3R_37()
 {
    if (jj_scan_token(PERIOD_SEPARATED_STRING)) return true;
    return false;
  }

  private boolean jj_3R_29()
 {
    if (jj_scan_token(SIZE)) return true;
    return false;
  }

  private boolean jj_3R_36()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(9)) {
    jj_scanpos = xsp;
    if (jj_scan_token(39)) {
    jj_scanpos = xsp;
    if (jj_scan_token(40)) {
    jj_scanpos = xsp;
    if (jj_scan_token(37)) {
    jj_scanpos = xsp;
    if (jj_scan_token(41)) return true;
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3_9()
 {
    if (jj_3R_14()) return true;
    return false;
  }

  private boolean jj_3_3()
 {
    if (jj_3R_14()) return true;
    return false;
  }

  private boolean jj_3R_54()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(39)) {
    jj_scanpos = xsp;
    if (jj_scan_token(40)) {
    jj_scanpos = xsp;
    if (jj_scan_token(37)) {
    jj_scanpos = xsp;
    if (jj_scan_token(41)) {
    jj_scanpos = xsp;
    if (jj_scan_token(43)) {
    jj_scanpos = xsp;
    if (jj_scan_token(42)) return true;
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_31()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_3()) {
    jj_scanpos = xsp;
    if (jj_3R_36()) {
    jj_scanpos = xsp;
    if (jj_3R_37()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_28()
 {
    if (jj_scan_token(PAGE)) return true;
    return false;
  }

  private boolean jj_3R_48()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_7()) {
    jj_scanpos = xsp;
    if (jj_3R_54()) {
    jj_scanpos = xsp;
    if (jj_3R_55()) return true;
    }
    }
    return false;
  }

  private boolean jj_3_7()
 {
    if (jj_3R_15()) return true;
    return false;
  }

  /** Generated Token Manager. */
  public GrammarTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[50];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
	   jj_la1_init_0();
	   jj_la1_init_1();
	}
	private static void jj_la1_init_0() {
	   jj_la1_0 = new int[] {0x100,0x40000000,0x30000000,0x70000000,0x100,0x40000000,0x30000000,0x70000000,0x800,0x400,0x208,0x80,0x80,0x80,0x80,0x7c0f000,0x200,0x200,0x0,0x0,0x18,0x18,0x0,0x0,0x7800000,0xd000,0x0,0x20000000,0x10000000,0x30000000,0x0,0x80000000,0xc200,0x80,0xc000,0x80000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x20,0x0,0x10,0x0,};
	}
	private static void jj_la1_init_1() {
	   jj_la1_1 = new int[] {0x0,0x0,0x0,0x7a0,0x0,0x0,0x0,0x7a0,0x0,0x0,0x7a0,0x0,0x0,0x0,0x0,0x0,0x3a0,0x7a0,0xfa0,0xfa4,0x60fa0,0x60fa4,0xfa0,0xfa4,0x0,0x0,0xba4,0x0,0x0,0x0,0x40,0x1,0x7a0,0x0,0x0,0x1,0x200,0x7a0,0x780,0x780,0xa0,0x40,0xa0,0xa0,0x40,0xa0,0xa0,0x780,0x40,0x780,};
	}
  final private JJCalls[] jj_2_rtns = new JJCalls[11];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public Grammar(java.io.InputStream stream) {
	  this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Grammar(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source = new GrammarTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 50; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
	  ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jjtree.reset();
	 jj_gen = 0;
	 for (int i = 0; i < 50; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public Grammar(java.io.Reader stream) {
	 jj_input_stream = new SimpleCharStream(stream, 1, 1);
	 token_source = new GrammarTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 50; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
	if (jj_input_stream == null) {
	   jj_input_stream = new SimpleCharStream(stream, 1, 1);
	} else {
	   jj_input_stream.ReInit(stream, 1, 1);
	}
	if (token_source == null) {
 token_source = new GrammarTokenManager(jj_input_stream);
	}

	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jjtree.reset();
	 jj_gen = 0;
	 for (int i = 0; i < 50; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public Grammar(GrammarTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 50; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(GrammarTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jjtree.reset();
	 jj_gen = 0;
	 for (int i = 0; i < 50; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
	 Token oldToken;
	 if ((oldToken = token).next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 if (token.kind == kind) {
	   jj_gen++;
	   if (++jj_gc > 100) {
		 jj_gc = 0;
		 for (int i = 0; i < jj_2_rtns.length; i++) {
		   JJCalls c = jj_2_rtns[i];
		   while (c != null) {
			 if (c.gen < jj_gen) c.first = null;
			 c = c.next;
		   }
		 }
	   }
	   return token;
	 }
	 token = oldToken;
	 jj_kind = kind;
	 throw generateParseException();
  }

  @SuppressWarnings("serial")
  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
	 if (jj_scanpos == jj_lastpos) {
	   jj_la--;
	   if (jj_scanpos.next == null) {
		 jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
	   } else {
		 jj_lastpos = jj_scanpos = jj_scanpos.next;
	   }
	 } else {
	   jj_scanpos = jj_scanpos.next;
	 }
	 if (jj_rescan) {
	   int i = 0; Token tok = token;
	   while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
	   if (tok != null) jj_add_error_token(kind, i);
	 }
	 if (jj_scanpos.kind != kind) return true;
	 if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
	 return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
	 if (token.next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 jj_gen++;
	 return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
	 Token t = token;
	 for (int i = 0; i < index; i++) {
	   if (t.next != null) t = t.next;
	   else t = t.next = token_source.getNextToken();
	 }
	 return t;
  }

  private int jj_ntk_f() {
	 if ((jj_nt=token.next) == null)
	   return (jj_ntk = (token.next=token_source.getNextToken()).kind);
	 else
	   return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
	 if (pos >= 100) {
		return;
	 }

	 if (pos == jj_endpos + 1) {
	   jj_lasttokens[jj_endpos++] = kind;
	 } else if (jj_endpos != 0) {
	   jj_expentry = new int[jj_endpos];

	   for (int i = 0; i < jj_endpos; i++) {
		 jj_expentry[i] = jj_lasttokens[i];
	   }

	   for (int[] oldentry : jj_expentries) {
		 if (oldentry.length == jj_expentry.length) {
		   boolean isMatched = true;

		   for (int i = 0; i < jj_expentry.length; i++) {
			 if (oldentry[i] != jj_expentry[i]) {
			   isMatched = false;
			   break;
			 }

		   }
		   if (isMatched) {
			 jj_expentries.add(jj_expentry);
			 break;
		   }
		 }
	   }

	   if (pos != 0) {
		 jj_lasttokens[(jj_endpos = pos) - 1] = kind;
	   }
	 }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
	 jj_expentries.clear();
	 boolean[] la1tokens = new boolean[51];
	 if (jj_kind >= 0) {
	   la1tokens[jj_kind] = true;
	   jj_kind = -1;
	 }
	 for (int i = 0; i < 50; i++) {
	   if (jj_la1[i] == jj_gen) {
		 for (int j = 0; j < 32; j++) {
		   if ((jj_la1_0[i] & (1<<j)) != 0) {
			 la1tokens[j] = true;
		   }
		   if ((jj_la1_1[i] & (1<<j)) != 0) {
			 la1tokens[32+j] = true;
		   }
		 }
	   }
	 }
	 for (int i = 0; i < 51; i++) {
	   if (la1tokens[i]) {
		 jj_expentry = new int[1];
		 jj_expentry[0] = i;
		 jj_expentries.add(jj_expentry);
	   }
	 }
	 jj_endpos = 0;
	 jj_rescan_token();
	 jj_add_error_token(0, 0);
	 int[][] exptokseq = new int[jj_expentries.size()][];
	 for (int i = 0; i < jj_expentries.size(); i++) {
	   exptokseq[i] = jj_expentries.get(i);
	 }
	 return new ParseException(token, exptokseq, tokenImage);
  }

  private int trace_indent = 0;
  private boolean trace_enabled;

/** Trace enabled. */
  final public boolean trace_enabled() {
	 return trace_enabled;
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
	 jj_rescan = true;
	 for (int i = 0; i < 11; i++) {
	   try {
		 JJCalls p = jj_2_rtns[i];

		 do {
		   if (p.gen > jj_gen) {
			 jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
			 switch (i) {
			   case 0: jj_3_1(); break;
			   case 1: jj_3_2(); break;
			   case 2: jj_3_3(); break;
			   case 3: jj_3_4(); break;
			   case 4: jj_3_5(); break;
			   case 5: jj_3_6(); break;
			   case 6: jj_3_7(); break;
			   case 7: jj_3_8(); break;
			   case 8: jj_3_9(); break;
			   case 9: jj_3_10(); break;
			   case 10: jj_3_11(); break;
			 }
		   }
		   p = p.next;
		 } while (p != null);

		 } catch(LookaheadSuccess ls) { }
	 }
	 jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
	 JJCalls p = jj_2_rtns[index];
	 while (p.gen > jj_gen) {
	   if (p.next == null) { p = p.next = new JJCalls(); break; }
	   p = p.next;
	 }

	 p.gen = jj_gen + xla - jj_la; 
	 p.first = token;
	 p.arg = xla;
  }

  static final class JJCalls {
	 int gen;
	 Token first;
	 int arg;
	 JJCalls next;
  }

}
