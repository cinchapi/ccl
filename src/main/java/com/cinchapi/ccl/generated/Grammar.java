/* Grammar.java */
/* Generated By:JJTree&JavaCC: Do not edit this line. Grammar.java */
package com.cinchapi.ccl.generated;

import com.cinchapi.ccl.SyntaxException;
import com.cinchapi.ccl.grammar.DirectionSymbol;
import com.cinchapi.ccl.grammar.FunctionTokenSymbol;
import com.cinchapi.ccl.grammar.KeySymbol;
import com.cinchapi.ccl.grammar.ValueTokenSymbol;
import com.cinchapi.ccl.grammar.command.*;
import com.cinchapi.ccl.type.function.KeyConditionFunction;
import com.cinchapi.ccl.type.function.KeyRecordsFunction;
import com.cinchapi.ccl.grammar.FunctionKeySymbol;
import com.cinchapi.ccl.grammar.FunctionValueSymbol;
import com.cinchapi.ccl.type.function.ImplicitKeyRecordFunction;
import com.cinchapi.ccl.type.function.IndexFunction;
import com.cinchapi.ccl.grammar.NavigationKeySymbol;
import com.cinchapi.ccl.grammar.KeyTokenSymbol;
import com.cinchapi.ccl.grammar.OperatorSymbol;
import com.cinchapi.ccl.grammar.OrderComponentSymbol;
import com.cinchapi.ccl.grammar.TimestampSymbol;
import com.cinchapi.ccl.grammar.ValueSymbol;
import com.cinchapi.ccl.grammar.PageSymbol;
import com.cinchapi.ccl.grammar.OrderSymbol;
import com.cinchapi.ccl.grammar.ExpressionSymbol;
import com.cinchapi.ccl.syntax.AbstractSyntaxTree;
import com.cinchapi.ccl.syntax.ConditionTree;
import com.cinchapi.ccl.type.Operator;
import com.cinchapi.ccl.util.NaturalLanguage;
import com.cinchapi.common.base.AnyStrings;
import com.google.common.collect.Iterables;
import com.google.common.collect.Lists;
import com.google.common.collect.Multimap;

import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import java.util.NoSuchElementException;
import java.util.function.Function;

/**
 * The Grammar generated by JavaCC
 */
@SuppressWarnings({"unused", "rawtypes"})
public class Grammar/*@bgen(jjtree)*/implements GrammarTreeConstants, GrammarConstants {/*@bgen(jjtree)*/
  protected JJTGrammarState jjtree = new JJTGrammarState();private Multimap<String, Object> data;
    private Function<String, Object> valueTransformFunction;
    private Function<String, Operator> operatorTransformFunction;
    private GrammarVisitor visitor;

    public Grammar(java.io.InputStream stream,
                Function<String, Object> valueTransformFunction,
                Function<String, Operator> operatorTransformFunction,
                GrammarVisitor visitor) {
        this(stream, null);
        this.data = null;
        this.valueTransformFunction = valueTransformFunction;
        this.operatorTransformFunction = operatorTransformFunction;
        this.visitor = visitor;
    }

    public Grammar(java.io.InputStream stream,
                Function<String, Object> valueTransformFunction,
                Function<String, Operator> operatorTransformFunction,
                Multimap<String, Object> data,
                GrammarVisitor visitor) {
        this(stream, null);
        this.data = data;
        this.valueTransformFunction = valueTransformFunction;
        this.operatorTransformFunction = operatorTransformFunction;
        this.visitor = visitor;
    }

    public Operator transformOperator(String token) {
        return operatorTransformFunction.apply(token);
    }

    public Object transformValue(String token) {
        return valueTransformFunction.apply(token);
    }

    private boolean isValidJson(String json) {
        // Basic JSON validation
        int braceCount = 0;
        for(char c : json.toCharArray()) {
            if(c == '{') braceCount++;
            if(c == '}') braceCount--;
            if(braceCount < 0) return false;
        }
        return braceCount == 0;
    }

  final public ASTStart StartCommandLine() throws ParseException {/*@bgen(jjtree) Start */
  ASTStart jjtn000 = new ASTStart(JJTSTART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ADD:
      case SET:
      case REMOVE:
      case CLEAR:
      case VERIFY_AND_SWAP:
      case VERIFY_OR_SET:
      case INSERT:
      case LINK:
      case UNLINK:
      case SELECT:
      case GET:
      case FIND:
      case DESCRIBE:
      case VERIFY:
      case SEARCH:
      case BROWSE:
      case CHRONOLOGIZE:
      case DIFF:
      case INVENTORY:
      case JSONIFY:
      case NAVIGATE:
      case RECONCILE:
      case REVIEW:
      case TRACE:
      case STAGE:
      case COMMIT:
      case ABORT:
      case REVERT:{
        Command();
        jj_consume_token(88);
        break;
        }
      default:
        jj_la1[3] = jj_gen;
        if (jj_2_1(4)) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case WHERE:{
            jj_consume_token(WHERE);
            break;
            }
          default:
            jj_la1[0] = jj_gen;
            ;
          }
          DisjunctionExpression();
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case ORDER:{
            Order();
            break;
            }
          default:
            jj_la1[1] = jj_gen;
            ;
          }
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case PAGE:
          case SIZE:{
            Page();
            break;
            }
          default:
            jj_la1[2] = jj_gen;
            ;
          }
          jj_consume_token(88);
        } else {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case PAGE:
          case SIZE:{
            Page();
            jj_consume_token(88);
            break;
            }
          case ORDER:{
            Order();
            jj_consume_token(88);
            break;
            }
          case NUMERIC:
          case SIGNED_INTEGER:
          case SIGNED_DECIMAL:
          case ALPHANUMERIC:
          case PERIOD_SEPARATED_STRING:{
            Function();
            jj_consume_token(88);
            break;
            }
          default:
            jj_la1[4] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      }
jjtree.closeNodeScope(jjtn000, true);
     jjtc000 = false;
{if ("" != null) return jjtn000;}
    } catch (Throwable jjte000) {
if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
    throw new Error("Missing return statement in function");
}

  final public ASTStart generateAST() throws ParseException {/*@bgen(jjtree) Start */
  ASTStart jjtn000 = new ASTStart(JJTSTART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ADD:
      case SET:
      case REMOVE:
      case CLEAR:
      case VERIFY_AND_SWAP:
      case VERIFY_OR_SET:
      case INSERT:
      case LINK:
      case UNLINK:
      case SELECT:
      case GET:
      case FIND:
      case DESCRIBE:
      case VERIFY:
      case SEARCH:
      case BROWSE:
      case CHRONOLOGIZE:
      case DIFF:
      case INVENTORY:
      case JSONIFY:
      case NAVIGATE:
      case RECONCILE:
      case REVIEW:
      case TRACE:
      case STAGE:
      case COMMIT:
      case ABORT:
      case REVERT:{
        Command();
        jj_consume_token(0);
        break;
        }
      default:
        jj_la1[8] = jj_gen;
        if (jj_2_2(4)) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case WHERE:{
            jj_consume_token(WHERE);
            break;
            }
          default:
            jj_la1[5] = jj_gen;
            ;
          }
          DisjunctionExpression();
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case ORDER:{
            Order();
            break;
            }
          default:
            jj_la1[6] = jj_gen;
            ;
          }
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case PAGE:
          case SIZE:{
            Page();
            break;
            }
          default:
            jj_la1[7] = jj_gen;
            ;
          }
          jj_consume_token(0);
        } else {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case PAGE:
          case SIZE:{
            Page();
            jj_consume_token(0);
            break;
            }
          case ORDER:{
            Order();
            jj_consume_token(0);
            break;
            }
          case NUMERIC:
          case SIGNED_INTEGER:
          case SIGNED_DECIMAL:
          case ALPHANUMERIC:
          case PERIOD_SEPARATED_STRING:{
            Function();
            jj_consume_token(0);
            break;
            }
          default:
            jj_la1[9] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      }
jjtree.closeNodeScope(jjtn000, true);
     jjtc000 = false;
{if ("" != null) return jjtn000;}
    } catch (Throwable jjte000) {
if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
    throw new Error("Missing return statement in function");
}

  final public ASTStart generateSubAST() throws ParseException {/*@bgen(jjtree) Start */
  ASTStart jjtn000 = new ASTStart(JJTSTART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      DisjunctionExpression();
jjtree.closeNodeScope(jjtn000, true);
     jjtc000 = false;
{if ("" != null) return jjtn000;}
    } catch (Throwable jjte000) {
if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
    throw new Error("Missing return statement in function");
}

  final public void DisjunctionExpression() throws ParseException {
    ConjunctionExpression();
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case DISJUNCTION:{
        ;
        break;
        }
      default:
        jj_la1[10] = jj_gen;
        break label_1;
      }
ASTOr jjtn001 = new ASTOr(JJTOR);
                               boolean jjtc001 = true;
                               jjtree.openNodeScope(jjtn001);
      try {
        jj_consume_token(DISJUNCTION);
        ConjunctionExpression();
      } catch (Throwable jjte001) {
if (jjtc001) {
                                 jjtree.clearNodeScope(jjtn001);
                                 jjtc001 = false;
                               } else {
                                 jjtree.popNode();
                               }
                               if (jjte001 instanceof RuntimeException) {
                                 {if (true) throw (RuntimeException)jjte001;}
                               }
                               if (jjte001 instanceof ParseException) {
                                 {if (true) throw (ParseException)jjte001;}
                               }
                               {if (true) throw (Error)jjte001;}
      } finally {
if (jjtc001) {
                                 jjtree.closeNodeScope(jjtn001,  2);
                               }
      }
    }
}

  final public void ConjunctionExpression() throws ParseException {
    UnaryExpression();
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case CONJUNCTION:{
        ;
        break;
        }
      default:
        jj_la1[11] = jj_gen;
        break label_2;
      }
ASTAnd jjtn001 = new ASTAnd(JJTAND);
                         boolean jjtc001 = true;
                         jjtree.openNodeScope(jjtn001);
      try {
        jj_consume_token(CONJUNCTION);
        UnaryExpression();
      } catch (Throwable jjte001) {
if (jjtc001) {
                           jjtree.clearNodeScope(jjtn001);
                           jjtc001 = false;
                         } else {
                           jjtree.popNode();
                         }
                         if (jjte001 instanceof RuntimeException) {
                           {if (true) throw (RuntimeException)jjte001;}
                         }
                         if (jjte001 instanceof ParseException) {
                           {if (true) throw (ParseException)jjte001;}
                         }
                         {if (true) throw (Error)jjte001;}
      } finally {
if (jjtc001) {
                           jjtree.closeNodeScope(jjtn001,  2);
                         }
      }
    }
}

  final public void UnaryExpression() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case OPEN_PARENTHESES:{
      jj_consume_token(OPEN_PARENTHESES);
      DisjunctionExpression();
      jj_consume_token(CLOSE_PARENTHESES);
      break;
      }
    case RESERVED_IDENTIFIER:
    case NUMERIC:
    case SIGNED_INTEGER:
    case SIGNED_DECIMAL:
    case ALPHANUMERIC:
    case PERIOD_SEPARATED_STRING:{
      RelationalExpression();
      break;
      }
    default:
      jj_la1[12] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  final public void RelationalExpression() throws ParseException {/*@bgen(jjtree) Expression */
    ASTExpression jjtn000 = new ASTExpression(JJTEXPRESSION);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);KeyTokenSymbol key = null;
    OperatorSymbol operator = null;
    ValueTokenSymbol value1 = null;
    ValueTokenSymbol value2 = null;
    TimestampSymbol timestamp = null;
    try {
      key = Key();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case LINKS_TO:{
        operator = LinksToOperator();
        value1 = LinksToValue();
        if (jj_2_3(2)) {
          timestamp = Timestamp();
        } else {
          ;
        }
        break;
        }
      case REGEX:
      case NOT_REGEX:
      case LIKE:
      case NOT_LIKE:{
        operator = RegexBasedOperator();
        value1 = RegexValue();
        if (jj_2_4(2)) {
          timestamp = Timestamp();
        } else {
          ;
        }
        break;
        }
      case UNARY_OPERATOR:
      case OPEN_ANGLE_BRACKET:
      case CLOSE_ANGLE_BRACKET:{
        operator = UnaryOperator();
        value1 = UnaryValue();
        if (jj_2_5(2)) {
          timestamp = Timestamp();
        } else {
          ;
        }
        break;
        }
      case BINARY_OPERATOR:{
        operator = BinaryOperator();
        value1 = BinaryValue();
        value2 = BinaryValue();
        if (jj_2_6(2)) {
          timestamp = Timestamp();
        } else {
          ;
        }
        break;
        }
      default:
        jj_la1[13] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
jjtn000.key(key);
          jjtn000.operator(operator);
          jjtn000.addValue(value1);
          if(value2 != null) jjtn000.addValue(value2);
          if(timestamp != null) jjtn000.timestamp(timestamp);
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
}

  final public KeyTokenSymbol Key() throws ParseException {FunctionKeySymbol function;
  Token key;
    if (jj_2_7(2)) {
      function = KeyFunction();
{if ("" != null) return function;}
    } else {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case RESERVED_IDENTIFIER:
      case NUMERIC:
      case SIGNED_INTEGER:
      case SIGNED_DECIMAL:
      case ALPHANUMERIC:{
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case RESERVED_IDENTIFIER:{
          key = jj_consume_token(RESERVED_IDENTIFIER);
          break;
          }
        case SIGNED_INTEGER:{
          key = jj_consume_token(SIGNED_INTEGER);
          break;
          }
        case SIGNED_DECIMAL:{
          key = jj_consume_token(SIGNED_DECIMAL);
          break;
          }
        case NUMERIC:{
          key = jj_consume_token(NUMERIC);
          break;
          }
        case ALPHANUMERIC:{
          key = jj_consume_token(ALPHANUMERIC);
          break;
          }
        default:
          jj_la1[14] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
{if ("" != null) return new KeySymbol(key.image);}
        break;
        }
      case PERIOD_SEPARATED_STRING:{
        key = jj_consume_token(PERIOD_SEPARATED_STRING);
{if ("" != null) return new NavigationKeySymbol(key.image);}
        break;
        }
      default:
        jj_la1[15] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
}

  final public ValueTokenSymbol UnaryValue() throws ParseException {FunctionValueSymbol function;
  Token key;
  Token word;
  String value = "";
  List<String> records = Lists.newArrayList();
  ASTStart ccl;
    if (jj_2_9(2)) {
      function = ValueFunction();
{if ("" != null) return function;}
    } else {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case NUMERIC:
      case SIGNED_INTEGER:
      case SIGNED_DECIMAL:
      case ALPHANUMERIC:
      case PERIOD_SEPARATED_STRING:
      case NON_ALPHANUMERIC_AND_ALPHANUMERIC:{
        label_3:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case SIGNED_INTEGER:{
            word = jj_consume_token(SIGNED_INTEGER);
            break;
            }
          case SIGNED_DECIMAL:{
            word = jj_consume_token(SIGNED_DECIMAL);
            break;
            }
          case NUMERIC:{
            word = jj_consume_token(NUMERIC);
            break;
            }
          case ALPHANUMERIC:{
            word = jj_consume_token(ALPHANUMERIC);
            break;
            }
          case NON_ALPHANUMERIC_AND_ALPHANUMERIC:{
            word = jj_consume_token(NON_ALPHANUMERIC_AND_ALPHANUMERIC);
            break;
            }
          case PERIOD_SEPARATED_STRING:{
            word = jj_consume_token(PERIOD_SEPARATED_STRING);
            break;
            }
          default:
            jj_la1[16] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
value += (value.equals("")) ? word.image : " " + word.image;
          if (jj_2_8(2)) {
            ;
          } else {
            break label_3;
          }
        }
if(value.charAt(0) == '$') {
        String var = value.substring(1);
        try {
            value = Iterables.getOnlyElement(data.get(var)).toString();
        }
        catch (IllegalArgumentException e) {
            String err = "Unable to resolve variable {} because multiple values exist locally: {}";
            {if (true) throw new SyntaxException(AnyStrings.format(err, value, data.get(var)));}
        }
        catch (NoSuchElementException e) {
            String err = "Unable to resolve variable {} because no values exist locally";
            {if (true) throw new SyntaxException(AnyStrings.format(err, value));}
        }
    }
    else if(value.length() > 2 && value.charAt(0) == '\\'
            && value.charAt(1) == '$') {
        value = value.substring(1);
    }
    else {
        value = value.replace("\\@", "@");
    }
    {if ("" != null) return new ValueSymbol(transformValue(value));}
        break;
        }
      case QUOTED_STRING:{
        word = jj_consume_token(QUOTED_STRING);
{if ("" != null) return new ValueSymbol(transformValue(word.image.replace("\\\"", "\"")));}
        break;
        }
      default:
        jj_la1[17] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
}

  final public ValueTokenSymbol LinksToValue() throws ParseException {Token word;
    word = jj_consume_token(NUMERIC);
{if ("" != null) return new ValueSymbol(transformValue(word.image));}
    throw new Error("Missing return statement in function");
}

  final public ValueTokenSymbol RegexValue() throws ParseException {Token word;
  String value = "";
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case OPEN_PARENTHESES:{
      jj_consume_token(OPEN_PARENTHESES);
      label_4:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case SIGNED_INTEGER:{
          word = jj_consume_token(SIGNED_INTEGER);
          break;
          }
        case SIGNED_DECIMAL:{
          word = jj_consume_token(SIGNED_DECIMAL);
          break;
          }
        case NUMERIC:{
          word = jj_consume_token(NUMERIC);
          break;
          }
        case ALPHANUMERIC:{
          word = jj_consume_token(ALPHANUMERIC);
          break;
          }
        case NON_ALPHANUMERIC_AND_ALPHANUMERIC:{
          word = jj_consume_token(NON_ALPHANUMERIC_AND_ALPHANUMERIC);
          break;
          }
        case PERIOD_SEPARATED_STRING:{
          word = jj_consume_token(PERIOD_SEPARATED_STRING);
          break;
          }
        case 89:{
          word = jj_consume_token(89);
          break;
          }
        case 90:{
          word = jj_consume_token(90);
          break;
          }
        default:
          jj_la1[18] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
if (value.equals("") |
            value.endsWith("(") | word.image.equals(")") |
            value.endsWith("=") | word.image.equals("=") |
            value.endsWith("_") | word.image.equals("_")) {
            value += word.image;
        }
        else {
            value += " " + word.image;
        }
        if (jj_2_10(4)) {
          ;
        } else {
          break label_4;
        }
      }
      jj_consume_token(CLOSE_PARENTHESES);
{if ("" != null) return new ValueSymbol(transformValue("(" + value + ")"));}
      break;
      }
    case NUMERIC:
    case SIGNED_INTEGER:
    case SIGNED_DECIMAL:
    case ALPHANUMERIC:
    case PERIOD_SEPARATED_STRING:
    case NON_ALPHANUMERIC_AND_ALPHANUMERIC:
    case 89:
    case 90:{
      label_5:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case SIGNED_INTEGER:{
          word = jj_consume_token(SIGNED_INTEGER);
          break;
          }
        case SIGNED_DECIMAL:{
          word = jj_consume_token(SIGNED_DECIMAL);
          break;
          }
        case NUMERIC:{
          word = jj_consume_token(NUMERIC);
          break;
          }
        case ALPHANUMERIC:{
          word = jj_consume_token(ALPHANUMERIC);
          break;
          }
        case NON_ALPHANUMERIC_AND_ALPHANUMERIC:{
          word = jj_consume_token(NON_ALPHANUMERIC_AND_ALPHANUMERIC);
          break;
          }
        case PERIOD_SEPARATED_STRING:{
          word = jj_consume_token(PERIOD_SEPARATED_STRING);
          break;
          }
        case 89:{
          word = jj_consume_token(89);
          break;
          }
        case 90:{
          word = jj_consume_token(90);
          break;
          }
        default:
          jj_la1[19] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
if (value.equals("") |
            value.endsWith("(") | word.image.equals(")") |
            value.endsWith("=") | word.image.equals("=") |
            value.endsWith("_") | word.image.equals("_")) {
            value += word.image;
        }
        else {
            value += " " + word.image;
        }
        if (jj_2_11(3)) {
          ;
        } else {
          break label_5;
        }
      }
{if ("" != null) return new ValueSymbol(transformValue(value));}
      break;
      }
    case QUOTED_STRING:{
      word = jj_consume_token(QUOTED_STRING);
{if ("" != null) return new ValueSymbol(transformValue(word.image.replace("\\\"", "\"")));}
      break;
      }
    default:
      jj_la1[20] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
}

  final public ValueTokenSymbol BinaryValue() throws ParseException {FunctionValueSymbol function;
  Token key;
  Token word;
  String value = "";
  List<String> records = Lists.newArrayList();
  ASTStart ccl;
    if (jj_2_12(2)) {
      function = ValueFunction();
{if ("" != null) return function;}
    } else {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case NUMERIC:
      case SIGNED_INTEGER:
      case SIGNED_DECIMAL:
      case ALPHANUMERIC:
      case PERIOD_SEPARATED_STRING:
      case NON_ALPHANUMERIC_AND_ALPHANUMERIC:{
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case SIGNED_INTEGER:{
          word = jj_consume_token(SIGNED_INTEGER);
          break;
          }
        case SIGNED_DECIMAL:{
          word = jj_consume_token(SIGNED_DECIMAL);
          break;
          }
        case NUMERIC:{
          word = jj_consume_token(NUMERIC);
          break;
          }
        case ALPHANUMERIC:{
          word = jj_consume_token(ALPHANUMERIC);
          break;
          }
        case NON_ALPHANUMERIC_AND_ALPHANUMERIC:{
          word = jj_consume_token(NON_ALPHANUMERIC_AND_ALPHANUMERIC);
          break;
          }
        case PERIOD_SEPARATED_STRING:{
          word = jj_consume_token(PERIOD_SEPARATED_STRING);
          break;
          }
        default:
          jj_la1[21] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
value = word.image;
    if(value.charAt(0) == '$') {
        String var = value.substring(1);
        try {
            value = Iterables.getOnlyElement(data.get(var)).toString();
        }
        catch (IllegalArgumentException e) {
            String err = "Unable to resolve variable {} because multiple values exist locally: {}";
            {if (true) throw new SyntaxException(AnyStrings.format(err, value, data.get(var)));}
        }
        catch (NoSuchElementException e) {
            String err = "Unable to resolve variable {} because no values exist locally";
            {if (true) throw new SyntaxException(AnyStrings.format(err, value));}
        }
    }
    else if(value.length() > 2 && value.charAt(0) == '\\'
            && value.charAt(1) == '$') {
        value = value.substring(1);
    }
    else {
        value = value.replace("\\@", "@");
    }
    {if ("" != null) return new ValueSymbol(transformValue(value));}
        break;
        }
      case QUOTED_STRING:{
        word = jj_consume_token(QUOTED_STRING);
{if ("" != null) return new ValueSymbol(transformValue(word.image.replace("\\\"", "\"")));}
        break;
        }
      default:
        jj_la1[22] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
}

  final public OperatorSymbol LinksToOperator() throws ParseException {Token operator;
    operator = jj_consume_token(LINKS_TO);
{if ("" != null) return new OperatorSymbol(transformOperator(operator.image));}
    throw new Error("Missing return statement in function");
}

  final public OperatorSymbol RegexBasedOperator() throws ParseException {Token operator;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case REGEX:{
      operator = jj_consume_token(REGEX);
      break;
      }
    case NOT_REGEX:{
      operator = jj_consume_token(NOT_REGEX);
      break;
      }
    case LIKE:{
      operator = jj_consume_token(LIKE);
      break;
      }
    case NOT_LIKE:{
      operator = jj_consume_token(NOT_LIKE);
      break;
      }
    default:
      jj_la1[23] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return new OperatorSymbol(transformOperator(operator.image));}
    throw new Error("Missing return statement in function");
}

  final public OperatorSymbol UnaryOperator() throws ParseException {Token operator;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case UNARY_OPERATOR:{
      operator = jj_consume_token(UNARY_OPERATOR);
      break;
      }
    case OPEN_ANGLE_BRACKET:{
      operator = jj_consume_token(OPEN_ANGLE_BRACKET);
      break;
      }
    case CLOSE_ANGLE_BRACKET:{
      operator = jj_consume_token(CLOSE_ANGLE_BRACKET);
      break;
      }
    default:
      jj_la1[24] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return new OperatorSymbol(transformOperator(operator.image));}
    throw new Error("Missing return statement in function");
}

  final public OperatorSymbol BinaryOperator() throws ParseException {Token operator;
    operator = jj_consume_token(BINARY_OPERATOR);
{if ("" != null) return new OperatorSymbol(transformOperator(operator.image));}
    throw new Error("Missing return statement in function");
}

  final public TimestampSymbol Timestamp() throws ParseException {Token word;
  String timestamp = "";
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case TIMESTAMP:{
      jj_consume_token(TIMESTAMP);
      break;
      }
    case IN:{
      jj_consume_token(IN);
      break;
      }
    default:
      jj_la1[25] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case QUOTED_STRING:{
        word = jj_consume_token(QUOTED_STRING);
        break;
        }
      case SIGNED_INTEGER:{
        word = jj_consume_token(SIGNED_INTEGER);
        break;
        }
      case SIGNED_DECIMAL:{
        word = jj_consume_token(SIGNED_DECIMAL);
        break;
        }
      case NUMERIC:{
        word = jj_consume_token(NUMERIC);
        break;
        }
      case ALPHANUMERIC:{
        word = jj_consume_token(ALPHANUMERIC);
        break;
        }
      case NON_ALPHANUMERIC_AND_ALPHANUMERIC:{
        word = jj_consume_token(NON_ALPHANUMERIC_AND_ALPHANUMERIC);
        break;
        }
      default:
        jj_la1[26] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
timestamp += (timestamp.equals("")) ? word.image : " " + word.image;
      if (jj_2_13(2)) {
        ;
      } else {
        break label_6;
      }
    }
{if ("" != null) return new TimestampSymbol(NaturalLanguage.parseMicros(timestamp));}
    throw new Error("Missing return statement in function");
}

  final public TimestampSymbol TimestampReadCommand() throws ParseException {Token word;
  String timestamp = "";
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case TIMESTAMP:{
      jj_consume_token(TIMESTAMP);
      break;
      }
    case IN:{
      jj_consume_token(IN);
      break;
      }
    case AS_OF:{
      jj_consume_token(AS_OF);
      break;
      }
    default:
      jj_la1[27] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case QUOTED_STRING:{
        word = jj_consume_token(QUOTED_STRING);
        break;
        }
      case SIGNED_INTEGER:{
        word = jj_consume_token(SIGNED_INTEGER);
        break;
        }
      case SIGNED_DECIMAL:{
        word = jj_consume_token(SIGNED_DECIMAL);
        break;
        }
      case NUMERIC:{
        word = jj_consume_token(NUMERIC);
        break;
        }
      case ALPHANUMERIC:{
        word = jj_consume_token(ALPHANUMERIC);
        break;
        }
      case NON_ALPHANUMERIC_AND_ALPHANUMERIC:{
        word = jj_consume_token(NON_ALPHANUMERIC_AND_ALPHANUMERIC);
        break;
        }
      default:
        jj_la1[28] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
timestamp += (timestamp.equals("")) ? word.image : " " + word.image;
      if (jj_2_14(2)) {
        ;
      } else {
        break label_7;
      }
    }
{if ("" != null) return new TimestampSymbol(NaturalLanguage.parseMicros(timestamp));}
    throw new Error("Missing return statement in function");
}

  final public void Page() throws ParseException {/*@bgen(jjtree) Page */
  ASTPage jjtn000 = new ASTPage(JJTPAGE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);String number = null;
  String size = null;
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case PAGE:{
        number = Number();
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case SIZE:{
          size = Size();
          break;
          }
        default:
          jj_la1[29] = jj_gen;
          ;
        }
        break;
        }
      case SIZE:{
        size = Size();
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case PAGE:{
          number = Number();
          break;
          }
        default:
          jj_la1[30] = jj_gen;
          ;
        }
        break;
        }
      default:
        jj_la1[31] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
jjtn000.page(new PageSymbol(number != null ? Integer.parseInt(number) : null, size != null ? Integer.parseInt(size) : null));
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
}

  final public String Number() throws ParseException {Token number;
    jj_consume_token(PAGE);
    number = jj_consume_token(NUMERIC);
{if ("" != null) return number.image;}
    throw new Error("Missing return statement in function");
}

  final public String Size() throws ParseException {Token size;
    jj_consume_token(SIZE);
    size = jj_consume_token(NUMERIC);
{if ("" != null) return size.image;}
    throw new Error("Missing return statement in function");
}

  final public void Order() throws ParseException {/*@bgen(jjtree) Order */
    ASTOrder jjtn000 = new ASTOrder(JJTORDER);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);OrderSymbol order = new OrderSymbol();
    OrderComponentSymbol orderComponent;
    try {
      jj_consume_token(ORDER);
      orderComponent = OrderClause();
order.add(orderComponent);
      label_8:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case COMMA:{
          ;
          break;
          }
        default:
          jj_la1[32] = jj_gen;
          break label_8;
        }
        jj_consume_token(COMMA);
        orderComponent = OrderClause();
order.add(orderComponent);
      }
jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
jjtn000.order(order);
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
}

  final public OrderComponentSymbol OrderClause() throws ParseException {KeyTokenSymbol key;
    TimestampSymbol timestamp = null;
    DirectionSymbol direction = null;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case OPEN_ANGLE_BRACKET:
    case CLOSE_ANGLE_BRACKET:{
      direction = SymbolicDirection();
      key = Key();
      break;
      }
    case RESERVED_IDENTIFIER:
    case NUMERIC:
    case SIGNED_INTEGER:
    case SIGNED_DECIMAL:
    case ALPHANUMERIC:
    case PERIOD_SEPARATED_STRING:{
      key = Key();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ASC:
      case DESC:{
        direction = WordDirection();
        break;
        }
      default:
        jj_la1[33] = jj_gen;
        ;
      }
      break;
      }
    default:
      jj_la1[34] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case IN:
    case TIMESTAMP:{
      timestamp = Timestamp();
      break;
      }
    default:
      jj_la1[35] = jj_gen;
      ;
    }
if(direction != null) {
          if(timestamp != null) {
              {if ("" != null) return new OrderComponentSymbol(key, timestamp, direction);}
          }
          else {
              {if ("" != null) return new OrderComponentSymbol(key, direction);}
          }
      }
      else {
          if(timestamp != null) {
              {if ("" != null) return new OrderComponentSymbol(key, timestamp,
                  DirectionSymbol.ASCENDING);}
          }
          else {
              {if ("" != null) return new OrderComponentSymbol(key,
                  DirectionSymbol.ASCENDING);}
          }
      }
    throw new Error("Missing return statement in function");
}

  final public DirectionSymbol SymbolicDirection() throws ParseException {Token direction;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case OPEN_ANGLE_BRACKET:{
      direction = jj_consume_token(OPEN_ANGLE_BRACKET);
{if ("" != null) return DirectionSymbol.ASCENDING;}
      break;
      }
    case CLOSE_ANGLE_BRACKET:{
      direction = jj_consume_token(CLOSE_ANGLE_BRACKET);
{if ("" != null) return DirectionSymbol.DESCENDING;}
      break;
      }
    default:
      jj_la1[36] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
}

  final public DirectionSymbol WordDirection() throws ParseException {Token direction;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ASC:{
      direction = jj_consume_token(ASC);
{if ("" != null) return DirectionSymbol.ASCENDING;}
      break;
      }
    case DESC:{
      direction = jj_consume_token(DESC);
{if ("" != null) return DirectionSymbol.DESCENDING;}
      break;
      }
    default:
      jj_la1[37] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
}

  final public void Function() throws ParseException {/*@bgen(jjtree) Function */
    ASTFunction jjtn000 = new ASTFunction(JJTFUNCTION);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);FunctionTokenSymbol function;
    try {
      if (jj_2_15(2)) {
        function = KeyFunction();
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case ALPHANUMERIC:{
          function = ValueFunction();
          break;
          }
        default:
          jj_la1[38] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
jjtn000.function(function);
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
}

  final public FunctionKeySymbol KeyFunction() throws ParseException {Token key;
  Token function;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case SIGNED_INTEGER:{
      key = jj_consume_token(SIGNED_INTEGER);
      break;
      }
    case SIGNED_DECIMAL:{
      key = jj_consume_token(SIGNED_DECIMAL);
      break;
      }
    case NUMERIC:{
      key = jj_consume_token(NUMERIC);
      break;
      }
    case ALPHANUMERIC:{
      key = jj_consume_token(ALPHANUMERIC);
      break;
      }
    case PERIOD_SEPARATED_STRING:{
      key = jj_consume_token(PERIOD_SEPARATED_STRING);
      break;
      }
    default:
      jj_la1[39] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(PIPE);
    function = jj_consume_token(ALPHANUMERIC);
{if ("" != null) return new FunctionKeySymbol(new ImplicitKeyRecordFunction(function.image, key.image.substring(0, key.image.length())));}
    throw new Error("Missing return statement in function");
}

  final public FunctionValueSymbol ValueFunction() throws ParseException {Token function;
  Token key;
  Token word;
  List<String> records = Lists.newArrayList();
  ASTStart ccl;
  TimestampSymbol timestamp = null;
    function = jj_consume_token(ALPHANUMERIC);
    jj_consume_token(OPEN_PARENTHESES);
    if (jj_2_16(3)) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case SIGNED_INTEGER:{
        key = jj_consume_token(SIGNED_INTEGER);
        break;
        }
      case SIGNED_DECIMAL:{
        key = jj_consume_token(SIGNED_DECIMAL);
        break;
        }
      case ALPHANUMERIC:{
        key = jj_consume_token(ALPHANUMERIC);
        break;
        }
      case PERIOD_SEPARATED_STRING:{
        key = jj_consume_token(PERIOD_SEPARATED_STRING);
        break;
        }
      default:
        jj_la1[40] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case CLOSE_PARENTHESES:{
        jj_consume_token(CLOSE_PARENTHESES);
{if ("" != null) return new FunctionValueSymbol(new IndexFunction(function.image, key.image));}
        break;
        }
      case COMMA:{
        jj_consume_token(COMMA);
        timestamp = Timestamp();
        jj_consume_token(CLOSE_PARENTHESES);
{if ("" != null) return new FunctionValueSymbol(new IndexFunction(function.image, key.image, timestamp.timestamp()));}
        break;
        }
      default:
        jj_la1[41] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } else if (jj_2_17(3)) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case SIGNED_INTEGER:{
        key = jj_consume_token(SIGNED_INTEGER);
        break;
        }
      case SIGNED_DECIMAL:{
        key = jj_consume_token(SIGNED_DECIMAL);
        break;
        }
      case ALPHANUMERIC:{
        key = jj_consume_token(ALPHANUMERIC);
        break;
        }
      case PERIOD_SEPARATED_STRING:{
        key = jj_consume_token(PERIOD_SEPARATED_STRING);
        break;
        }
      default:
        jj_la1[42] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(COMMA);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case NUMERIC:
      case SIGNED_INTEGER:{
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case SIGNED_INTEGER:{
          word = jj_consume_token(SIGNED_INTEGER);
          break;
          }
        case NUMERIC:{
          word = jj_consume_token(NUMERIC);
          break;
          }
        default:
          jj_la1[43] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
records.add(word.image);
        label_9:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case COMMA:{
            ;
            break;
            }
          default:
            jj_la1[44] = jj_gen;
            break label_9;
          }
          jj_consume_token(COMMA);
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case SIGNED_INTEGER:{
            word = jj_consume_token(SIGNED_INTEGER);
            break;
            }
          case NUMERIC:{
            word = jj_consume_token(NUMERIC);
            break;
            }
          default:
            jj_la1[45] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
records.add(word.image);
        }
        jj_consume_token(CLOSE_PARENTHESES);
{if ("" != null) return new FunctionValueSymbol(new KeyRecordsFunction(function.image, key.image, records));}
        break;
        }
      case OPEN_BRACKET:{
        jj_consume_token(OPEN_BRACKET);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case SIGNED_INTEGER:{
          word = jj_consume_token(SIGNED_INTEGER);
          break;
          }
        case NUMERIC:{
          word = jj_consume_token(NUMERIC);
          break;
          }
        default:
          jj_la1[46] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
records.add(word.image);
        label_10:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case COMMA:{
            ;
            break;
            }
          default:
            jj_la1[47] = jj_gen;
            break label_10;
          }
          jj_consume_token(COMMA);
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case SIGNED_INTEGER:{
            word = jj_consume_token(SIGNED_INTEGER);
            break;
            }
          case NUMERIC:{
            word = jj_consume_token(NUMERIC);
            break;
            }
          default:
            jj_la1[48] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
records.add(word.image);
        }
        jj_consume_token(CLOSE_BRACKET);
        jj_consume_token(COMMA);
        timestamp = Timestamp();
        jj_consume_token(CLOSE_PARENTHESES);
{if ("" != null) return new FunctionValueSymbol(new KeyRecordsFunction(function.image, key.image, records, timestamp.timestamp()));}
        break;
        }
      default:
        jj_la1[49] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } else {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case SIGNED_INTEGER:
      case SIGNED_DECIMAL:
      case ALPHANUMERIC:
      case PERIOD_SEPARATED_STRING:{
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case SIGNED_INTEGER:{
          key = jj_consume_token(SIGNED_INTEGER);
          break;
          }
        case SIGNED_DECIMAL:{
          key = jj_consume_token(SIGNED_DECIMAL);
          break;
          }
        case ALPHANUMERIC:{
          key = jj_consume_token(ALPHANUMERIC);
          break;
          }
        case PERIOD_SEPARATED_STRING:{
          key = jj_consume_token(PERIOD_SEPARATED_STRING);
          break;
          }
        default:
          jj_la1[50] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        jj_consume_token(COMMA);
        ccl = generateSubAST();
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case CLOSE_PARENTHESES:{
          jj_consume_token(CLOSE_PARENTHESES);
ConditionTree tree = (ConditionTree) ccl.jjtAccept(visitor, null);
          {if ("" != null) return new FunctionValueSymbol(new KeyConditionFunction(function.image, key.image, tree));}
          break;
          }
        case COMMA:{
          jj_consume_token(COMMA);
          timestamp = Timestamp();
          jj_consume_token(CLOSE_PARENTHESES);
ConditionTree tree = (ConditionTree) ccl.jjtAccept(visitor, null);
          {if ("" != null) return new FunctionValueSymbol(new KeyConditionFunction(function.image, key.image, tree, timestamp.timestamp()));}
          break;
          }
        default:
          jj_la1[51] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
        }
      default:
        jj_la1[52] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
}

  final public void Command() throws ParseException {/*@bgen(jjtree) Command */
    ASTCommand jjtn000 = new ASTCommand(JJTCOMMAND);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);CommandSymbol cmd;
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ADD:
      case SET:
      case REMOVE:
      case CLEAR:
      case VERIFY_AND_SWAP:
      case VERIFY_OR_SET:{
        cmd = DataModificationOperations();
        break;
        }
      case INSERT:{
        cmd = RecordOperations();
        break;
        }
      case LINK:
      case UNLINK:{
        cmd = LinkOperations();
        break;
        }
      case SELECT:
      case GET:
      case FIND:
      case DESCRIBE:
      case VERIFY:
      case SEARCH:
      case BROWSE:
      case CHRONOLOGIZE:
      case DIFF:
      case INVENTORY:
      case JSONIFY:
      case NAVIGATE:
      case RECONCILE:
      case REVIEW:
      case TRACE:{
        cmd = QueryOperations();
        break;
        }
      case STAGE:
      case COMMIT:
      case ABORT:{
        cmd = TransactionOperations();
        break;
        }
      case REVERT:{
        cmd = RevertCommand();
        break;
        }
      default:
        jj_la1[53] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
jjtn000.command(cmd);
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
}

  final public CommandSymbol DataModificationOperations() throws ParseException {CommandSymbol cmd;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ADD:{
      cmd = AddCommand();
      break;
      }
    case SET:{
      cmd = SetCommand();
      break;
      }
    case REMOVE:{
      cmd = RemoveCommand();
      break;
      }
    case CLEAR:{
      cmd = ClearCommand();
      break;
      }
    case VERIFY_AND_SWAP:{
      cmd = VerifyAndSwapCommand();
      break;
      }
    case VERIFY_OR_SET:{
      cmd = VerifyOrSetCommand();
      break;
      }
    default:
      jj_la1[54] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return cmd;}
    throw new Error("Missing return statement in function");
}

  final public CommandSymbol AddCommand() throws ParseException {KeyTokenSymbol<?> key;
    ValueTokenSymbol<?> value;
    Token record = null;
    Collection records = null;
    jj_consume_token(ADD);
    key = Key();
    jj_consume_token(AS);
    value = UnaryValue();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case IN:{
      jj_consume_token(IN);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case NUMERIC:{
        record = jj_consume_token(NUMERIC);
{if ("" != null) return new AddSymbol(key, value, Long.parseLong(record.image));}
        break;
        }
      case OPEN_BRACKET:{
        records = RecordCollection();
{if ("" != null) return new AddSymbol(key, value, records);}
        break;
        }
      default:
        jj_la1[55] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
      }
    default:
      jj_la1[56] = jj_gen;
      ;
    }
{if ("" != null) return new AddSymbol(key, value);}
    throw new Error("Missing return statement in function");
}

  final public CommandSymbol SetCommand() throws ParseException {KeyTokenSymbol<?> key;
    ValueTokenSymbol<?> value;
    Token record;
    jj_consume_token(SET);
    key = Key();
    jj_consume_token(AS);
    value = UnaryValue();
    jj_consume_token(IN);
    record = jj_consume_token(NUMERIC);
{if ("" != null) return new SetSymbol(key, value, Long.parseLong(record.image));}
    throw new Error("Missing return statement in function");
}

  final public CommandSymbol RemoveCommand() throws ParseException {KeyTokenSymbol<?> key;
    ValueTokenSymbol<?> value = null;
    Token record;
    Collection records = null;
    jj_consume_token(REMOVE);
    key = Key();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case AS:{
      jj_consume_token(AS);
      value = UnaryValue();
      break;
      }
    default:
      jj_la1[57] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case FROM:{
      jj_consume_token(FROM);
      break;
      }
    case IN:{
      jj_consume_token(IN);
      break;
      }
    default:
      jj_la1[58] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case NUMERIC:{
      record = jj_consume_token(NUMERIC);
{if ("" != null) return new RemoveSymbol(key, value, Long.parseLong(record.image));}
      break;
      }
    case OPEN_BRACKET:{
      records = RecordCollection();
{if ("" != null) return new RemoveSymbol(key, value, records);}
      break;
      }
    default:
      jj_la1[59] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
}

  final public CommandSymbol ClearCommand() throws ParseException {KeyTokenSymbol<?> key = null;
    Collection<KeyTokenSymbol<?>> keys = null;
    Token record = null;
    Collection records = null;
    jj_consume_token(CLEAR);
    if (jj_2_18(2)) {
      record = jj_consume_token(NUMERIC);
{if ("" != null) return new ClearSymbol((KeyTokenSymbol<?>)null, Long.parseLong(record.image));}
    } else if (jj_2_19(3)) {
      records = RecordCollection();
{if ("" != null) return new ClearSymbol((KeyTokenSymbol<?>)null, records);}
    } else if (jj_2_20(3)) {
      key = Key();
      jj_consume_token(FROM);
      record = jj_consume_token(NUMERIC);
{if ("" != null) return new ClearSymbol(key, Long.parseLong(record.image));}
    } else if (jj_2_21(3)) {
      key = Key();
      jj_consume_token(FROM);
      records = RecordCollection();
{if ("" != null) return new ClearSymbol(key, records);}
    } else if (jj_2_22(7)) {
      keys = KeyCollection();
      jj_consume_token(FROM);
      record = jj_consume_token(NUMERIC);
{if ("" != null) return new ClearSymbol(keys, Long.parseLong(record.image));}
    } else if (jj_2_23(7)) {
      keys = KeyCollection();
      jj_consume_token(FROM);
      records = RecordCollection();
{if ("" != null) return new ClearSymbol(keys, records);}
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
}

  final public CommandSymbol VerifyAndSwapCommand() throws ParseException {KeyTokenSymbol<?> key;
    ValueTokenSymbol<?> expected;
    ValueTokenSymbol<?> replacement;
    Token record;
    jj_consume_token(VERIFY_AND_SWAP);
    key = Key();
    jj_consume_token(AS);
    expected = UnaryValue();
    jj_consume_token(IN);
    record = jj_consume_token(NUMERIC);
    jj_consume_token(WITH);
    replacement = UnaryValue();
{if ("" != null) return new VerifyAndSwapSymbol(key, expected, replacement, Long.parseLong(record.image));}
    throw new Error("Missing return statement in function");
}

  final public CommandSymbol VerifyOrSetCommand() throws ParseException {KeyTokenSymbol<?> key;
    ValueTokenSymbol<?> value;
    Token record;
    jj_consume_token(VERIFY_OR_SET);
    key = Key();
    jj_consume_token(AS);
    value = UnaryValue();
    jj_consume_token(IN);
    record = jj_consume_token(NUMERIC);
{if ("" != null) return new VerifyOrSetSymbol(key, value, Long.parseLong(record.image));}
    throw new Error("Missing return statement in function");
}

  final public CommandSymbol RecordOperations() throws ParseException {CommandSymbol cmd;
    cmd = InsertCommand();
{if ("" != null) return cmd;}
    throw new Error("Missing return statement in function");
}

  final public CommandSymbol InsertCommand() throws ParseException {String json;
    Token record = null;
    Collection records = null;
    jj_consume_token(INSERT);
    json = JsonObject();
// Basic JSON validation
        if(!isValidJson(json)) {
            {if (true) throw new ParseException("Malformed JSON");}
        }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case IN:
    case INTO:{
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case IN:{
        jj_consume_token(IN);
        break;
        }
      case INTO:{
        jj_consume_token(INTO);
        break;
        }
      default:
        jj_la1[60] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case NUMERIC:{
        record = jj_consume_token(NUMERIC);
{if ("" != null) return new InsertSymbol(json, Long.parseLong(record.image));}
        break;
        }
      case OPEN_BRACKET:{
        records = RecordCollection();
{if ("" != null) return new InsertSymbol(json, records);}
        break;
        }
      default:
        jj_la1[61] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
      }
    default:
      jj_la1[62] = jj_gen;
      ;
    }
{if ("" != null) return new InsertSymbol(json);}
    throw new Error("Missing return statement in function");
}

  final public CommandSymbol LinkOperations() throws ParseException {CommandSymbol cmd;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case LINK:{
      cmd = LinkCommand();
      break;
      }
    case UNLINK:{
      cmd = UnlinkCommand();
      break;
      }
    default:
      jj_la1[63] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return cmd;}
    throw new Error("Missing return statement in function");
}

  final public CommandSymbol LinkCommand() throws ParseException {KeyTokenSymbol<?> key;
    Token source;
    Token destination;
    Collection destinations = null;
    jj_consume_token(LINK);
    key = Key();
    jj_consume_token(FROM);
    source = jj_consume_token(NUMERIC);
    jj_consume_token(TO);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case NUMERIC:{
      destination = jj_consume_token(NUMERIC);
Collection dest = new ArrayList();
            dest.add(Long.parseLong(destination.image));
            {if ("" != null) return new LinkSymbol(key, Long.parseLong(source.image), dest);}
      break;
      }
    case OPEN_BRACKET:{
      destinations = RecordCollection();
{if ("" != null) return new LinkSymbol(key, Long.parseLong(source.image), destinations);}
      break;
      }
    default:
      jj_la1[64] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
}

  final public CommandSymbol UnlinkCommand() throws ParseException {KeyTokenSymbol<?> key;
    Token source;
    Token destination;
    Collection destinations = null;
    jj_consume_token(UNLINK);
    key = Key();
    jj_consume_token(FROM);
    source = jj_consume_token(NUMERIC);
    jj_consume_token(TO);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case NUMERIC:{
      destination = jj_consume_token(NUMERIC);
Collection dest = new ArrayList();
            dest.add(Long.parseLong(destination.image));
            {if ("" != null) return new UnlinkSymbol(key, Long.parseLong(source.image), dest);}
      break;
      }
    case OPEN_BRACKET:{
      destinations = RecordCollection();
{if ("" != null) return new UnlinkSymbol(key, Long.parseLong(source.image), destinations);}
      break;
      }
    default:
      jj_la1[65] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
}

  final public CommandSymbol QueryOperations() throws ParseException {CommandSymbol cmd;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case SELECT:{
      cmd = SelectCommand();
      break;
      }
    case GET:{
      cmd = GetCommand();
      break;
      }
    case FIND:{
      cmd = FindCommand();
      break;
      }
    case DESCRIBE:{
      cmd = DescribeCommand();
      break;
      }
    case VERIFY:{
      cmd = VerifyCommand();
      break;
      }
    case SEARCH:{
      cmd = SearchCommand();
      break;
      }
    case BROWSE:{
      cmd = BrowseCommand();
      break;
      }
    case CHRONOLOGIZE:{
      cmd = ChronologizeCommand();
      break;
      }
    case DIFF:{
      cmd = DiffCommand();
      break;
      }
    case INVENTORY:{
      cmd = InventoryCommand();
      break;
      }
    case JSONIFY:{
      cmd = JsonifyCommand();
      break;
      }
    case NAVIGATE:{
      cmd = NavigateCommand();
      break;
      }
    case RECONCILE:{
      cmd = ReconcileCommand();
      break;
      }
    case REVIEW:{
      cmd = ReviewCommand();
      break;
      }
    case TRACE:{
      cmd = TraceCommand();
      break;
      }
    default:
      jj_la1[66] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return cmd;}
    throw new Error("Missing return statement in function");
}

  final public CommandSymbol SelectCommand() throws ParseException {Collection<KeyTokenSymbol<?>> keys = null;
    KeyTokenSymbol<?> key = null;
    Token record = null;
    Collection<Long> records = null;
    TimestampSymbol timestamp = null;
    jj_consume_token(SELECT);
    if (jj_2_24(2)) {
      keys = KeyCollection();
    } else {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case RESERVED_IDENTIFIER:
      case NUMERIC:
      case SIGNED_INTEGER:
      case SIGNED_DECIMAL:
      case ALPHANUMERIC:
      case PERIOD_SEPARATED_STRING:{
        key = Key();
keys = new ArrayList<KeyTokenSymbol<?>>();
            keys.add(key);
        break;
        }
      default:
        jj_la1[67] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    if (jj_2_25(2)) {
      jj_consume_token(FROM);
      record = jj_consume_token(NUMERIC);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case IN:
      case AS_OF:
      case TIMESTAMP:{
        timestamp = TimestampReadCommand();
        break;
        }
      default:
        jj_la1[68] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ORDER:{
        Order();
        break;
        }
      default:
        jj_la1[69] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case PAGE:
      case SIZE:{
        Page();
        break;
        }
      default:
        jj_la1[70] = jj_gen;
        ;
      }
{if ("" != null) return new SelectSymbol(keys, Long.parseLong(record.image), timestamp);}
    } else if (jj_2_26(2)) {
      jj_consume_token(FROM);
      records = RecordCollection();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case IN:
      case AS_OF:
      case TIMESTAMP:{
        timestamp = TimestampReadCommand();
        break;
        }
      default:
        jj_la1[71] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ORDER:{
        Order();
        break;
        }
      default:
        jj_la1[72] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case PAGE:
      case SIZE:{
        Page();
        break;
        }
      default:
        jj_la1[73] = jj_gen;
        ;
      }
{if ("" != null) return new SelectSymbol(keys, records, timestamp);}
    } else {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case WHERE:{
        jj_consume_token(WHERE);
        DisjunctionExpression();
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case IN:
        case AS_OF:
        case TIMESTAMP:{
          timestamp = TimestampReadCommand();
          break;
          }
        default:
          jj_la1[74] = jj_gen;
          ;
        }
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case ORDER:{
          Order();
          break;
          }
        default:
          jj_la1[75] = jj_gen;
          ;
        }
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case PAGE:
        case SIZE:{
          Page();
          break;
          }
        default:
          jj_la1[76] = jj_gen;
          ;
        }
{if ("" != null) return new SelectSymbol(keys, timestamp);}
        break;
        }
      default:
        jj_la1[77] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
}

  final public CommandSymbol GetCommand() throws ParseException {KeyTokenSymbol<?> key = null;
    Collection<KeyTokenSymbol<?>> keys = null;
    Token record = null;
    Collection records = null;
    TimestampSymbol timestamp = null;
    jj_consume_token(GET);
    if (jj_2_27(7)) {
      keys = KeyCollection();
      jj_consume_token(WHERE);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case OPEN_PARENTHESES:
      case RESERVED_IDENTIFIER:
      case NUMERIC:
      case SIGNED_INTEGER:
      case SIGNED_DECIMAL:
      case ALPHANUMERIC:
      case PERIOD_SEPARATED_STRING:{
        DisjunctionExpression();
        break;
        }
      default:
        jj_la1[78] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case IN:
      case AS_OF:
      case TIMESTAMP:{
        timestamp = TimestampReadCommand();
        break;
        }
      default:
        jj_la1[79] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ORDER:{
        Order();
        break;
        }
      default:
        jj_la1[80] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case PAGE:
      case SIZE:{
        Page();
        break;
        }
      default:
        jj_la1[81] = jj_gen;
        ;
      }
{if ("" != null) return new GetSymbol(keys, timestamp);}
    } else if (jj_2_28(3)) {
      key = Key();
      jj_consume_token(FROM);
      record = jj_consume_token(NUMERIC);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case IN:
      case AS_OF:
      case TIMESTAMP:{
        timestamp = TimestampReadCommand();
        break;
        }
      default:
        jj_la1[82] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ORDER:{
        Order();
        break;
        }
      default:
        jj_la1[83] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case PAGE:
      case SIZE:{
        Page();
        break;
        }
      default:
        jj_la1[84] = jj_gen;
        ;
      }
{if ("" != null) return new GetSymbol(key, Long.parseLong(record.image), timestamp);}
    } else if (jj_2_29(3)) {
      key = Key();
      jj_consume_token(FROM);
      records = RecordCollection();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case IN:
      case AS_OF:
      case TIMESTAMP:{
        timestamp = TimestampReadCommand();
        break;
        }
      default:
        jj_la1[85] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ORDER:{
        Order();
        break;
        }
      default:
        jj_la1[86] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case PAGE:
      case SIZE:{
        Page();
        break;
        }
      default:
        jj_la1[87] = jj_gen;
        ;
      }
{if ("" != null) return new GetSymbol(key, records, timestamp);}
    } else if (jj_2_30(7)) {
      keys = KeyCollection();
      jj_consume_token(FROM);
      record = jj_consume_token(NUMERIC);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case IN:
      case AS_OF:
      case TIMESTAMP:{
        timestamp = TimestampReadCommand();
        break;
        }
      default:
        jj_la1[88] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ORDER:{
        Order();
        break;
        }
      default:
        jj_la1[89] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case PAGE:
      case SIZE:{
        Page();
        break;
        }
      default:
        jj_la1[90] = jj_gen;
        ;
      }
{if ("" != null) return new GetSymbol(keys, Long.parseLong(record.image), timestamp);}
    } else if (jj_2_31(3)) {
      keys = KeyCollection();
      jj_consume_token(FROM);
      records = RecordCollection();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case IN:
      case AS_OF:
      case TIMESTAMP:{
        timestamp = TimestampReadCommand();
        break;
        }
      default:
        jj_la1[91] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ORDER:{
        Order();
        break;
        }
      default:
        jj_la1[92] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case PAGE:
      case SIZE:{
        Page();
        break;
        }
      default:
        jj_la1[93] = jj_gen;
        ;
      }
{if ("" != null) return new GetSymbol(keys, records, timestamp);}
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
}

  final public CommandSymbol FindCommand() throws ParseException {TimestampSymbol timestamp = null;
    jj_consume_token(FIND);
    DisjunctionExpression();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case IN:
    case AS_OF:
    case TIMESTAMP:{
      timestamp = TimestampReadCommand();
      break;
      }
    default:
      jj_la1[94] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ORDER:{
      Order();
      break;
      }
    default:
      jj_la1[95] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case PAGE:
    case SIZE:{
      Page();
      break;
      }
    default:
      jj_la1[96] = jj_gen;
      ;
    }
{if ("" != null) return new FindSymbol(timestamp);}
    throw new Error("Missing return statement in function");
}

  final public CommandSymbol DescribeCommand() throws ParseException {Token record = null;
    Collection records = null;
    TimestampSymbol timestamp = null;
    jj_consume_token(DESCRIBE);
    if (jj_2_32(2)) {
      record = jj_consume_token(NUMERIC);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case IN:
      case AS_OF:
      case TIMESTAMP:{
        timestamp = TimestampReadCommand();
        break;
        }
      default:
        jj_la1[97] = jj_gen;
        ;
      }
{if ("" != null) return new DescribeSymbol(Long.parseLong(record.image), timestamp);}
    } else {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case OPEN_BRACKET:{
        records = RecordCollection();
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case IN:
        case AS_OF:
        case TIMESTAMP:{
          timestamp = TimestampReadCommand();
          break;
          }
        default:
          jj_la1[98] = jj_gen;
          ;
        }
{if ("" != null) return new DescribeSymbol(records, timestamp);}
        break;
        }
      default:
        jj_la1[99] = jj_gen;
{if ("" != null) return new DescribeSymbol(-1, null);}
      }
    }
    throw new Error("Missing return statement in function");
}

  final public CommandSymbol VerifyCommand() throws ParseException {KeyTokenSymbol<?> key;
    ValueTokenSymbol<?> value;
    Token record;
    TimestampSymbol timestamp = null;
    jj_consume_token(VERIFY);
    key = Key();
    jj_consume_token(AS);
    value = UnaryValue();
    jj_consume_token(IN);
    record = jj_consume_token(NUMERIC);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case IN:
    case AS_OF:
    case TIMESTAMP:{
      timestamp = TimestampReadCommand();
      break;
      }
    default:
      jj_la1[100] = jj_gen;
      ;
    }
{if ("" != null) return new VerifySymbol(key, value, Long.parseLong(record.image), timestamp);}
    throw new Error("Missing return statement in function");
}

  final public CommandSymbol SearchCommand() throws ParseException {KeyTokenSymbol<?> key;
    Token query;
    jj_consume_token(SEARCH);
    key = Key();
    jj_consume_token(FOR);
    query = jj_consume_token(QUOTED_STRING);
{if ("" != null) return new SearchSymbol(key, query.image);}
    throw new Error("Missing return statement in function");
}

  final public CommandSymbol BrowseCommand() throws ParseException {Collection<KeyTokenSymbol<?>> keys;
    TimestampSymbol timestamp = null;
    jj_consume_token(BROWSE);
    keys = KeyCollection();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case IN:
    case AS_OF:
    case TIMESTAMP:{
      timestamp = TimestampReadCommand();
      break;
      }
    default:
      jj_la1[101] = jj_gen;
      ;
    }
{if ("" != null) return new BrowseSymbol(keys, timestamp);}
    throw new Error("Missing return statement in function");
}

  final public CommandSymbol ChronologizeCommand() throws ParseException {KeyTokenSymbol<?> key;
    Token record;
    TimestampSymbol start = null;
    TimestampSymbol end = null;
    jj_consume_token(CHRONOLOGIZE);
    key = Key();
    jj_consume_token(IN);
    record = jj_consume_token(NUMERIC);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case IN:
    case AS_OF:
    case TIMESTAMP:{
      start = TimestampReadCommand();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case IN:
      case AS_OF:
      case TIMESTAMP:{
        end = TimestampReadCommand();
        break;
        }
      default:
        jj_la1[102] = jj_gen;
        ;
      }
      break;
      }
    default:
      jj_la1[103] = jj_gen;
      ;
    }
{if ("" != null) return new ChronologizeSymbol(key, Long.parseLong(record.image), start, end);}
    throw new Error("Missing return statement in function");
}

  final public CommandSymbol DiffCommand() throws ParseException {KeyTokenSymbol<?> key = null;
    Token record = null;
    TimestampSymbol start;
    TimestampSymbol end = null;
    jj_consume_token(DIFF);
    if (jj_2_33(2)) {
      key = Key();
      jj_consume_token(IN);
    } else {
      ;
    }
    if (jj_2_35(3)) {
      record = jj_consume_token(NUMERIC);
      start = TimestampReadCommand();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case IN:
      case AS_OF:
      case TIMESTAMP:{
        end = TimestampReadCommand();
        break;
        }
      default:
        jj_la1[104] = jj_gen;
        ;
      }
{if ("" != null) return new DiffSymbol(key, Long.parseLong(record.image), start, end);}
    } else {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case RESERVED_IDENTIFIER:
      case NUMERIC:
      case SIGNED_INTEGER:
      case SIGNED_DECIMAL:
      case ALPHANUMERIC:
      case PERIOD_SEPARATED_STRING:{
        key = Key();
        if (jj_2_34(3)) {
          start = TimestampReadCommand();
          end = TimestampReadCommand();
{if ("" != null) return new DiffSymbol(key, -1, start, end);}
        } else {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case IN:
          case AS_OF:
          case TIMESTAMP:{
            start = TimestampReadCommand();
{if ("" != null) return new DiffSymbol(key, -1, start, null);}
            break;
            }
          default:
            jj_la1[105] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
        break;
        }
      default:
        jj_la1[106] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
}

  final public CommandSymbol InventoryCommand() throws ParseException {
    jj_consume_token(INVENTORY);
{if ("" != null) return InventorySymbol.INSTANCE;}
    throw new Error("Missing return statement in function");
}

  final public CommandSymbol JsonifyCommand() throws ParseException {Token record = null;
    Collection<Long> records = null;
    TimestampSymbol timestamp = null;
    boolean identifier = false;
    jj_consume_token(JSONIFY);
    if (jj_2_36(2)) {
      record = jj_consume_token(NUMERIC);
{if ("" != null) return new JsonifySymbol(Long.parseLong(record.image), identifier);}
    } else {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case OPEN_BRACKET:{
        records = RecordCollection();
{if ("" != null) return new JsonifySymbol(records, identifier);}
        break;
        }
      default:
        jj_la1[107] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case WITH:{
      jj_consume_token(WITH);
      jj_consume_token(RESERVED_IDENTIFIER);
identifier = true;
      break;
      }
    default:
      jj_la1[108] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case IN:
    case AS_OF:
    case TIMESTAMP:{
      timestamp = TimestampReadCommand();
      break;
      }
    default:
      jj_la1[109] = jj_gen;
      ;
    }
    throw new Error("Missing return statement in function");
}

  final public CommandSymbol NavigateCommand() throws ParseException {Collection<KeyTokenSymbol<?>> keys;
    Token record = null;
    Collection<Long> records = null;
    TimestampSymbol timestamp = null;
    jj_consume_token(NAVIGATE);
    keys = KeyCollection();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case FROM:
    case WHERE:{
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case WHERE:{
        jj_consume_token(WHERE);
        DisjunctionExpression();
{if ("" != null) return new NavigateSymbol(keys, (String)null, timestamp);}
        break;
        }
      case FROM:{
        jj_consume_token(FROM);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case NUMERIC:{
          record = jj_consume_token(NUMERIC);
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case IN:
          case AS_OF:
          case TIMESTAMP:{
            timestamp = TimestampReadCommand();
            break;
            }
          default:
            jj_la1[110] = jj_gen;
            ;
          }
{if ("" != null) return new NavigateSymbol(keys, Long.parseLong(record.image), timestamp);}
          break;
          }
        case OPEN_BRACKET:{
          records = RecordCollection();
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case IN:
          case AS_OF:
          case TIMESTAMP:{
            timestamp = TimestampReadCommand();
            break;
            }
          default:
            jj_la1[111] = jj_gen;
            ;
          }
{if ("" != null) return new NavigateSymbol(keys, records, timestamp);}
          break;
          }
        default:
          jj_la1[112] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
        }
      default:
        jj_la1[113] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
      }
    default:
      jj_la1[114] = jj_gen;
      ;
    }
    throw new Error("Missing return statement in function");
}

  final public CommandSymbol ReconcileCommand() throws ParseException {KeyTokenSymbol<?> key;
    Token record;
    Collection<ValueTokenSymbol<?>> values;
    jj_consume_token(RECONCILE);
    key = Key();
    jj_consume_token(IN);
    record = jj_consume_token(NUMERIC);
    jj_consume_token(WITH);
    values = ValueCollection();
{if ("" != null) return new ReconcileSymbol(key, Long.parseLong(record.image), values);}
    throw new Error("Missing return statement in function");
}

  final public CommandSymbol ReviewCommand() throws ParseException {KeyTokenSymbol<?> key = null;
    Token record;
    TimestampSymbol start = null;
    TimestampSymbol end = null;
    jj_consume_token(REVIEW);
    if (jj_2_37(2)) {
      key = Key();
      jj_consume_token(IN);
    } else {
      ;
    }
    record = jj_consume_token(NUMERIC);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case IN:
    case AS_OF:
    case TIMESTAMP:{
      start = TimestampReadCommand();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case IN:
      case AS_OF:
      case TIMESTAMP:{
        end = TimestampReadCommand();
        break;
        }
      default:
        jj_la1[115] = jj_gen;
        ;
      }
      break;
      }
    default:
      jj_la1[116] = jj_gen;
      ;
    }
{if ("" != null) return new ReviewSymbol(key, Long.parseLong(record.image), start, end);}
    throw new Error("Missing return statement in function");
}

  final public CommandSymbol TraceCommand() throws ParseException {Token record = null;
    Collection<Long> records = null;
    TimestampSymbol timestamp = null;
    jj_consume_token(TRACE);
    if (jj_2_38(2)) {
      record = jj_consume_token(NUMERIC);
{if ("" != null) return new TraceSymbol(Long.parseLong(record.image), timestamp);}
    } else {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case OPEN_BRACKET:{
        records = RecordCollection();
{if ("" != null) return new TraceSymbol(records, timestamp);}
        break;
        }
      default:
        jj_la1[117] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case IN:
    case AS_OF:
    case TIMESTAMP:{
      timestamp = TimestampReadCommand();
      break;
      }
    default:
      jj_la1[118] = jj_gen;
      ;
    }
    throw new Error("Missing return statement in function");
}

// Transaction Operations
  final public CommandSymbol TransactionOperations() throws ParseException {CommandSymbol cmd;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case STAGE:{
      cmd = StageCommand();
      break;
      }
    case COMMIT:{
      cmd = CommitCommand();
      break;
      }
    case ABORT:{
      cmd = AbortCommand();
      break;
      }
    default:
      jj_la1[119] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return cmd;}
    throw new Error("Missing return statement in function");
}

  final public CommandSymbol StageCommand() throws ParseException {
    jj_consume_token(STAGE);
{if ("" != null) return StageSymbol.INSTANCE;}
    throw new Error("Missing return statement in function");
}

  final public CommandSymbol CommitCommand() throws ParseException {
    jj_consume_token(COMMIT);
{if ("" != null) return CommitSymbol.INSTANCE;}
    throw new Error("Missing return statement in function");
}

  final public CommandSymbol AbortCommand() throws ParseException {
    jj_consume_token(ABORT);
{if ("" != null) return AbortSymbol.INSTANCE;}
    throw new Error("Missing return statement in function");
}

  final public CommandSymbol RevertCommand() throws ParseException {KeyTokenSymbol<?> key = null;
    Token record = null;
    Collection<KeyTokenSymbol<?>> keys = null;
    Collection<Long> records = null;
    TimestampSymbol timestamp;
    jj_consume_token(REVERT);
    if (jj_2_39(3)) {
      key = Key();
      jj_consume_token(IN);
      record = jj_consume_token(NUMERIC);
      timestamp = TimestampReadCommand();
{if ("" != null) return new RevertSymbol(key, Long.parseLong(record.image), timestamp);}
    } else if (jj_2_40(3)) {
      key = Key();
      jj_consume_token(IN);
      records = RecordCollection();
      timestamp = TimestampReadCommand();
{if ("" != null) return new RevertSymbol(key, records, timestamp);}
    } else if (jj_2_41(7)) {
      keys = KeyCollection();
      jj_consume_token(IN);
      record = jj_consume_token(NUMERIC);
      timestamp = TimestampReadCommand();
{if ("" != null) return new RevertSymbol(keys, Long.parseLong(record.image), timestamp);}
    } else {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case OPEN_BRACKET:{
        keys = KeyCollection();
        jj_consume_token(IN);
        records = RecordCollection();
        timestamp = TimestampReadCommand();
{if ("" != null) return new RevertSymbol(keys, records, timestamp);}
        break;
        }
      default:
        jj_la1[120] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
}

// Utility parsing rules
  final public Collection<ValueTokenSymbol<?>> ValueCollection() throws ParseException {ValueTokenSymbol<?> value;
    Collection<ValueTokenSymbol<?>> values = Lists.newArrayList();
    jj_consume_token(OPEN_BRACKET);
    value = UnaryValue();
values.add(value);
    label_11:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case COMMA:{
        ;
        break;
        }
      default:
        jj_la1[121] = jj_gen;
        break label_11;
      }
      jj_consume_token(COMMA);
      value = UnaryValue();
values.add(value);
    }
    jj_consume_token(CLOSE_BRACKET);
{if ("" != null) return values;}
    throw new Error("Missing return statement in function");
}

  final public Collection RecordCollection() throws ParseException {Token record;
    Collection records = new ArrayList();
    jj_consume_token(OPEN_BRACKET);
    record = jj_consume_token(NUMERIC);
records.add(Long.parseLong(record.image));
    label_12:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case COMMA:{
        ;
        break;
        }
      default:
        jj_la1[122] = jj_gen;
        break label_12;
      }
      jj_consume_token(COMMA);
      record = jj_consume_token(NUMERIC);
records.add(Long.parseLong(record.image));
    }
    jj_consume_token(CLOSE_BRACKET);
{if ("" != null) return records;}
    throw new Error("Missing return statement in function");
}

  final public Collection KeyCollection() throws ParseException {KeyTokenSymbol key;
    Collection keys = new ArrayList();
    jj_consume_token(OPEN_BRACKET);
    key = Key();
keys.add(key.toString());
    label_13:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case COMMA:{
        ;
        break;
        }
      default:
        jj_la1[123] = jj_gen;
        break label_13;
      }
      jj_consume_token(COMMA);
      key = Key();
keys.add(key.toString());
    }
    jj_consume_token(CLOSE_BRACKET);
{if ("" != null) return keys;}
    throw new Error("Missing return statement in function");
}

  final public String JsonObject() throws ParseException {Token content;
    content = jj_consume_token(QUOTED_STRING);
{if ("" != null) return content.image;}
    throw new Error("Missing return statement in function");
}

  private boolean jj_2_1(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_1()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_2()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_3()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_4()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_2_5(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_5()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  private boolean jj_2_6(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_6()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  private boolean jj_2_7(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_7()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  private boolean jj_2_8(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_8()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  private boolean jj_2_9(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_9()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  private boolean jj_2_10(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_10()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  private boolean jj_2_11(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_11()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  private boolean jj_2_12(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_12()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  private boolean jj_2_13(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_13()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  private boolean jj_2_14(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_14()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(13, xla); }
  }

  private boolean jj_2_15(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_15()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(14, xla); }
  }

  private boolean jj_2_16(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_16()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(15, xla); }
  }

  private boolean jj_2_17(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_17()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(16, xla); }
  }

  private boolean jj_2_18(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_18()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(17, xla); }
  }

  private boolean jj_2_19(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_19()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(18, xla); }
  }

  private boolean jj_2_20(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_20()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(19, xla); }
  }

  private boolean jj_2_21(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_21()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(20, xla); }
  }

  private boolean jj_2_22(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_22()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(21, xla); }
  }

  private boolean jj_2_23(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_23()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(22, xla); }
  }

  private boolean jj_2_24(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_24()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(23, xla); }
  }

  private boolean jj_2_25(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_25()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(24, xla); }
  }

  private boolean jj_2_26(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_26()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(25, xla); }
  }

  private boolean jj_2_27(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_27()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(26, xla); }
  }

  private boolean jj_2_28(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_28()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(27, xla); }
  }

  private boolean jj_2_29(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_29()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(28, xla); }
  }

  private boolean jj_2_30(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_30()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(29, xla); }
  }

  private boolean jj_2_31(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_31()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(30, xla); }
  }

  private boolean jj_2_32(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_32()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(31, xla); }
  }

  private boolean jj_2_33(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_33()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(32, xla); }
  }

  private boolean jj_2_34(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_34()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(33, xla); }
  }

  private boolean jj_2_35(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_35()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(34, xla); }
  }

  private boolean jj_2_36(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_36()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(35, xla); }
  }

  private boolean jj_2_37(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_37()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(36, xla); }
  }

  private boolean jj_2_38(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_38()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(37, xla); }
  }

  private boolean jj_2_39(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_39()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(38, xla); }
  }

  private boolean jj_2_40(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_40()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(39, xla); }
  }

  private boolean jj_2_41(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_41()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(40, xla); }
  }

  private boolean jj_3R_43()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(49)) {
    jj_scanpos = xsp;
    if (jj_scan_token(79)) {
    jj_scanpos = xsp;
    if (jj_scan_token(80)) {
    jj_scanpos = xsp;
    if (jj_scan_token(77)) {
    jj_scanpos = xsp;
    if (jj_scan_token(81)) return true;
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3_7()
 {
    if (jj_3R_20()) return true;
    return false;
  }

  private boolean jj_3R_27()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_7()) {
    jj_scanpos = xsp;
    if (jj_3R_43()) {
    jj_scanpos = xsp;
    if (jj_3R_44()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_19()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(47)) {
    jj_scanpos = xsp;
    if (jj_scan_token(32)) return true;
    }
    if (jj_3_13()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_13()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_32()
 {
    if (jj_scan_token(NUMERIC)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_36()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_25()
 {
    if (jj_scan_token(OPEN_BRACKET)) return true;
    return false;
  }

  private boolean jj_3R_24()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(79)) {
    jj_scanpos = xsp;
    if (jj_scan_token(77)) return true;
    }
    return false;
  }

  private boolean jj_3R_77()
 {
    if (jj_scan_token(BINARY_OPERATOR)) return true;
    return false;
  }

  private boolean jj_3R_67()
 {
    if (jj_3R_77()) return true;
    if (jj_3R_78()) return true;
    if (jj_3R_78()) return true;
    return false;
  }

  private boolean jj_3R_66()
 {
    if (jj_3R_75()) return true;
    if (jj_3R_76()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_5()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_65()
 {
    if (jj_3R_73()) return true;
    if (jj_3R_74()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_4()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_29()
 {
    if (jj_3R_14()) return true;
    return false;
  }

  private boolean jj_3_17()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(79)) {
    jj_scanpos = xsp;
    if (jj_scan_token(80)) {
    jj_scanpos = xsp;
    if (jj_scan_token(81)) {
    jj_scanpos = xsp;
    if (jj_scan_token(82)) return true;
    }
    }
    }
    if (jj_scan_token(COMMA)) return true;
    xsp = jj_scanpos;
    if (jj_3R_24()) {
    jj_scanpos = xsp;
    if (jj_3R_25()) return true;
    }
    return false;
  }

  private boolean jj_3R_23()
 {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_19()) return true;
    return false;
  }

  private boolean jj_3R_64()
 {
    if (jj_3R_71()) return true;
    if (jj_3R_72()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_3()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_75()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(52)) {
    jj_scanpos = xsp;
    if (jj_scan_token(54)) {
    jj_scanpos = xsp;
    if (jj_scan_token(55)) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_22()
 {
    if (jj_scan_token(CLOSE_PARENTHESES)) return true;
    return false;
  }

  private boolean jj_3R_18()
 {
    if (jj_3R_41()) return true;
    return false;
  }

  private boolean jj_3R_47()
 {
    if (jj_scan_token(CONJUNCTION)) return true;
    return false;
  }

  private boolean jj_3_38()
 {
    if (jj_scan_token(NUMERIC)) return true;
    return false;
  }

  private boolean jj_3R_39()
 {
    if (jj_scan_token(DISJUNCTION)) return true;
    return false;
  }

  private boolean jj_3R_61()
 {
    if (jj_3R_27()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_64()) {
    jj_scanpos = xsp;
    if (jj_3R_65()) {
    jj_scanpos = xsp;
    if (jj_3R_66()) {
    jj_scanpos = xsp;
    if (jj_3R_67()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_73()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(63)) {
    jj_scanpos = xsp;
    if (jj_scan_token(64)) {
    jj_scanpos = xsp;
    if (jj_scan_token(65)) {
    jj_scanpos = xsp;
    if (jj_scan_token(66)) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3_16()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(79)) {
    jj_scanpos = xsp;
    if (jj_scan_token(80)) {
    jj_scanpos = xsp;
    if (jj_scan_token(81)) {
    jj_scanpos = xsp;
    if (jj_scan_token(82)) return true;
    }
    }
    }
    xsp = jj_scanpos;
    if (jj_3R_22()) {
    jj_scanpos = xsp;
    if (jj_3R_23()) return true;
    }
    return false;
  }

  private boolean jj_3_31()
 {
    if (jj_3R_28()) return true;
    return false;
  }

  private boolean jj_3R_17()
 {
    if (jj_3R_40()) return true;
    return false;
  }

  private boolean jj_3R_21()
 {
    if (jj_scan_token(ALPHANUMERIC)) return true;
    if (jj_scan_token(OPEN_PARENTHESES)) return true;
    return false;
  }

  private boolean jj_3_30()
 {
    if (jj_3R_28()) return true;
    if (jj_scan_token(FROM)) return true;
    if (jj_scan_token(NUMERIC)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_33()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_34()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_35()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_71()
 {
    if (jj_scan_token(LINKS_TO)) return true;
    return false;
  }

  private boolean jj_3R_52()
 {
    if (jj_scan_token(OPEN_PARENTHESES)) return true;
    if (jj_3R_14()) return true;
    return false;
  }

  private boolean jj_3R_46()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_52()) {
    jj_scanpos = xsp;
    if (jj_3R_53()) return true;
    }
    return false;
  }

  private boolean jj_3R_16()
 {
    if (jj_3R_41()) return true;
    return false;
  }

  private boolean jj_3_29()
 {
    if (jj_3R_27()) return true;
    if (jj_scan_token(FROM)) return true;
    if (jj_3R_26()) return true;
    return false;
  }

  private boolean jj_3_37()
 {
    if (jj_3R_27()) return true;
    if (jj_scan_token(IN)) return true;
    return false;
  }

  private boolean jj_3_28()
 {
    if (jj_3R_27()) return true;
    if (jj_scan_token(FROM)) return true;
    if (jj_scan_token(NUMERIC)) return true;
    return false;
  }

  private boolean jj_3R_87()
 {
    if (jj_scan_token(QUOTED_STRING)) return true;
    return false;
  }

  private boolean jj_3R_38()
 {
    if (jj_3R_46()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_47()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_20()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(79)) {
    jj_scanpos = xsp;
    if (jj_scan_token(80)) {
    jj_scanpos = xsp;
    if (jj_scan_token(77)) {
    jj_scanpos = xsp;
    if (jj_scan_token(81)) {
    jj_scanpos = xsp;
    if (jj_scan_token(82)) return true;
    }
    }
    }
    }
    if (jj_scan_token(PIPE)) return true;
    if (jj_scan_token(ALPHANUMERIC)) return true;
    return false;
  }

  private boolean jj_3_27()
 {
    if (jj_3R_28()) return true;
    if (jj_scan_token(WHERE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_29()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_30()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_31()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_32()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_15()
 {
    if (jj_3R_40()) return true;
    return false;
  }

  private boolean jj_3R_14()
 {
    if (jj_3R_38()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_39()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_23()
 {
    if (jj_3R_28()) return true;
    if (jj_scan_token(FROM)) return true;
    if (jj_3R_26()) return true;
    return false;
  }

  private boolean jj_3_15()
 {
    if (jj_3R_20()) return true;
    return false;
  }

  private boolean jj_3_22()
 {
    if (jj_3R_28()) return true;
    if (jj_scan_token(FROM)) return true;
    if (jj_scan_token(NUMERIC)) return true;
    return false;
  }

  private boolean jj_3_21()
 {
    if (jj_3R_27()) return true;
    if (jj_scan_token(FROM)) return true;
    if (jj_3R_26()) return true;
    return false;
  }

  private boolean jj_3R_80()
 {
    if (jj_scan_token(DESC)) return true;
    return false;
  }

  private boolean jj_3_2()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(48)) jj_scanpos = xsp;
    if (jj_3R_14()) return true;
    xsp = jj_scanpos;
    if (jj_3R_17()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_18()) jj_scanpos = xsp;
    if (jj_scan_token(0)) return true;
    return false;
  }

  private boolean jj_3R_79()
 {
    if (jj_scan_token(ASC)) return true;
    return false;
  }

  private boolean jj_3_20()
 {
    if (jj_3R_27()) return true;
    if (jj_scan_token(FROM)) return true;
    if (jj_scan_token(NUMERIC)) return true;
    return false;
  }

  private boolean jj_3_26()
 {
    if (jj_scan_token(FROM)) return true;
    if (jj_3R_26()) return true;
    return false;
  }

  private boolean jj_3R_86()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(79)) {
    jj_scanpos = xsp;
    if (jj_scan_token(80)) {
    jj_scanpos = xsp;
    if (jj_scan_token(77)) {
    jj_scanpos = xsp;
    if (jj_scan_token(81)) {
    jj_scanpos = xsp;
    if (jj_scan_token(83)) {
    jj_scanpos = xsp;
    if (jj_scan_token(82)) return true;
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3_19()
 {
    if (jj_3R_26()) return true;
    return false;
  }

  private boolean jj_3R_70()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_79()) {
    jj_scanpos = xsp;
    if (jj_3R_80()) return true;
    }
    return false;
  }

  private boolean jj_3_25()
 {
    if (jj_scan_token(FROM)) return true;
    if (jj_scan_token(NUMERIC)) return true;
    return false;
  }

  private boolean jj_3R_78()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_12()) {
    jj_scanpos = xsp;
    if (jj_3R_86()) {
    jj_scanpos = xsp;
    if (jj_3R_87()) return true;
    }
    }
    return false;
  }

  private boolean jj_3_12()
 {
    if (jj_3R_21()) return true;
    return false;
  }

  private boolean jj_3_18()
 {
    if (jj_scan_token(NUMERIC)) return true;
    return false;
  }

  private boolean jj_3R_69()
 {
    if (jj_scan_token(CLOSE_ANGLE_BRACKET)) return true;
    return false;
  }

  private boolean jj_3R_68()
 {
    if (jj_scan_token(OPEN_ANGLE_BRACKET)) return true;
    return false;
  }

  private boolean jj_3_24()
 {
    if (jj_3R_28()) return true;
    return false;
  }

  private boolean jj_3_1()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(48)) jj_scanpos = xsp;
    if (jj_3R_14()) return true;
    xsp = jj_scanpos;
    if (jj_3R_15()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_16()) jj_scanpos = xsp;
    if (jj_scan_token(88)) return true;
    return false;
  }

  private boolean jj_3R_83()
 {
    if (jj_scan_token(QUOTED_STRING)) return true;
    return false;
  }

  private boolean jj_3R_62()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_68()) {
    jj_scanpos = xsp;
    if (jj_3R_69()) return true;
    }
    return false;
  }

  private boolean jj_3_36()
 {
    if (jj_scan_token(NUMERIC)) return true;
    return false;
  }

  private boolean jj_3_10()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(79)) {
    jj_scanpos = xsp;
    if (jj_scan_token(80)) {
    jj_scanpos = xsp;
    if (jj_scan_token(77)) {
    jj_scanpos = xsp;
    if (jj_scan_token(81)) {
    jj_scanpos = xsp;
    if (jj_scan_token(83)) {
    jj_scanpos = xsp;
    if (jj_scan_token(82)) {
    jj_scanpos = xsp;
    if (jj_scan_token(89)) {
    jj_scanpos = xsp;
    if (jj_scan_token(90)) return true;
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3_11()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(79)) {
    jj_scanpos = xsp;
    if (jj_scan_token(80)) {
    jj_scanpos = xsp;
    if (jj_scan_token(77)) {
    jj_scanpos = xsp;
    if (jj_scan_token(81)) {
    jj_scanpos = xsp;
    if (jj_scan_token(83)) {
    jj_scanpos = xsp;
    if (jj_scan_token(82)) {
    jj_scanpos = xsp;
    if (jj_scan_token(89)) {
    jj_scanpos = xsp;
    if (jj_scan_token(90)) return true;
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_82()
 {
    Token xsp;
    if (jj_3_11()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_11()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_45()
 {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_27()) return true;
    return false;
  }

  private boolean jj_3R_63()
 {
    if (jj_3R_70()) return true;
    return false;
  }

  private boolean jj_3R_28()
 {
    if (jj_scan_token(OPEN_BRACKET)) return true;
    if (jj_3R_27()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_45()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(CLOSE_BRACKET)) return true;
    return false;
  }

  private boolean jj_3_34()
 {
    if (jj_3R_37()) return true;
    if (jj_3R_37()) return true;
    return false;
  }

  private boolean jj_3R_58()
 {
    if (jj_3R_19()) return true;
    return false;
  }

  private boolean jj_3R_81()
 {
    if (jj_scan_token(OPEN_PARENTHESES)) return true;
    Token xsp;
    if (jj_3_10()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_10()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_74()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_81()) {
    jj_scanpos = xsp;
    if (jj_3R_82()) {
    jj_scanpos = xsp;
    if (jj_3R_83()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_57()
 {
    if (jj_3R_27()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_63()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_42()
 {
    if (jj_scan_token(COMMA)) return true;
    return false;
  }

  private boolean jj_3R_56()
 {
    if (jj_3R_62()) return true;
    if (jj_3R_27()) return true;
    return false;
  }

  private boolean jj_3R_50()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_56()) {
    jj_scanpos = xsp;
    if (jj_3R_57()) return true;
    }
    xsp = jj_scanpos;
    if (jj_3R_58()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_26()
 {
    if (jj_scan_token(OPEN_BRACKET)) return true;
    if (jj_scan_token(NUMERIC)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_42()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(CLOSE_BRACKET)) return true;
    return false;
  }

  private boolean jj_3_35()
 {
    if (jj_scan_token(NUMERIC)) return true;
    if (jj_3R_37()) return true;
    return false;
  }

  private boolean jj_3_33()
 {
    if (jj_3R_27()) return true;
    if (jj_scan_token(IN)) return true;
    return false;
  }

  private boolean jj_3R_72()
 {
    if (jj_scan_token(NUMERIC)) return true;
    return false;
  }

  private boolean jj_3R_51()
 {
    if (jj_scan_token(COMMA)) return true;
    return false;
  }

  private boolean jj_3R_35()
 {
    if (jj_3R_41()) return true;
    return false;
  }

  private boolean jj_3R_32()
 {
    if (jj_3R_41()) return true;
    return false;
  }

  private boolean jj_3_6()
 {
    if (jj_3R_19()) return true;
    return false;
  }

  private boolean jj_3R_40()
 {
    if (jj_scan_token(ORDER)) return true;
    if (jj_3R_50()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_51()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_85()
 {
    if (jj_scan_token(QUOTED_STRING)) return true;
    return false;
  }

  private boolean jj_3R_34()
 {
    if (jj_3R_40()) return true;
    return false;
  }

  private boolean jj_3R_31()
 {
    if (jj_3R_40()) return true;
    return false;
  }

  private boolean jj_3R_55()
 {
    if (jj_scan_token(SIZE)) return true;
    if (jj_scan_token(NUMERIC)) return true;
    return false;
  }

  private boolean jj_3_41()
 {
    if (jj_3R_28()) return true;
    if (jj_scan_token(IN)) return true;
    if (jj_scan_token(NUMERIC)) return true;
    if (jj_3R_37()) return true;
    return false;
  }

  private boolean jj_3_14()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(74)) {
    jj_scanpos = xsp;
    if (jj_scan_token(79)) {
    jj_scanpos = xsp;
    if (jj_scan_token(80)) {
    jj_scanpos = xsp;
    if (jj_scan_token(77)) {
    jj_scanpos = xsp;
    if (jj_scan_token(81)) {
    jj_scanpos = xsp;
    if (jj_scan_token(83)) return true;
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_59()
 {
    if (jj_3R_55()) return true;
    return false;
  }

  private boolean jj_3_40()
 {
    if (jj_3R_27()) return true;
    if (jj_scan_token(IN)) return true;
    if (jj_3R_26()) return true;
    return false;
  }

  private boolean jj_3R_60()
 {
    if (jj_3R_54()) return true;
    return false;
  }

  private boolean jj_3_4()
 {
    if (jj_3R_19()) return true;
    return false;
  }

  private boolean jj_3R_53()
 {
    if (jj_3R_61()) return true;
    return false;
  }

  private boolean jj_3_5()
 {
    if (jj_3R_19()) return true;
    return false;
  }

  private boolean jj_3_3()
 {
    if (jj_3R_19()) return true;
    return false;
  }

  private boolean jj_3_39()
 {
    if (jj_3R_27()) return true;
    if (jj_scan_token(IN)) return true;
    if (jj_scan_token(NUMERIC)) return true;
    return false;
  }

  private boolean jj_3R_54()
 {
    if (jj_scan_token(PAGE)) return true;
    if (jj_scan_token(NUMERIC)) return true;
    return false;
  }

  private boolean jj_3_8()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(79)) {
    jj_scanpos = xsp;
    if (jj_scan_token(80)) {
    jj_scanpos = xsp;
    if (jj_scan_token(77)) {
    jj_scanpos = xsp;
    if (jj_scan_token(81)) {
    jj_scanpos = xsp;
    if (jj_scan_token(83)) {
    jj_scanpos = xsp;
    if (jj_scan_token(82)) return true;
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_84()
 {
    Token xsp;
    if (jj_3_8()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_8()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_49()
 {
    if (jj_3R_55()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_60()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_76()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_9()) {
    jj_scanpos = xsp;
    if (jj_3R_84()) {
    jj_scanpos = xsp;
    if (jj_3R_85()) return true;
    }
    }
    return false;
  }

  private boolean jj_3_9()
 {
    if (jj_3R_21()) return true;
    return false;
  }

  private boolean jj_3R_48()
 {
    if (jj_3R_54()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_59()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_13()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(74)) {
    jj_scanpos = xsp;
    if (jj_scan_token(79)) {
    jj_scanpos = xsp;
    if (jj_scan_token(80)) {
    jj_scanpos = xsp;
    if (jj_scan_token(77)) {
    jj_scanpos = xsp;
    if (jj_scan_token(81)) {
    jj_scanpos = xsp;
    if (jj_scan_token(83)) return true;
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_41()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_48()) {
    jj_scanpos = xsp;
    if (jj_3R_49()) return true;
    }
    return false;
  }

  private boolean jj_3R_36()
 {
    if (jj_3R_37()) return true;
    return false;
  }

  private boolean jj_3R_33()
 {
    if (jj_3R_37()) return true;
    return false;
  }

  private boolean jj_3R_30()
 {
    if (jj_3R_37()) return true;
    return false;
  }

  private boolean jj_3R_44()
 {
    if (jj_scan_token(PERIOD_SEPARATED_STRING)) return true;
    return false;
  }

  private boolean jj_3R_37()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(47)) {
    jj_scanpos = xsp;
    if (jj_scan_token(32)) {
    jj_scanpos = xsp;
    if (jj_scan_token(36)) return true;
    }
    }
    if (jj_3_14()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_14()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  /** Generated Token Manager. */
  public GrammarTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[124];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static {
	   jj_la1_init_0();
	   jj_la1_init_1();
	   jj_la1_init_2();
	}
	private static void jj_la1_init_0() {
	   jj_la1_0 = new int[] {0x0,0x0,0x0,0xf7fffff8,0x0,0x0,0x0,0x0,0xf7fffff8,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xf7fffff8,0x1f8,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xc00,0x0,0x0,0x7fff000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x70000000,0x0,0x0,0x0,0x0,};
	}
	private static void jj_la1_init_1() {
	   jj_la1_1 = new int[] {0x10000,0x0,0x0,0x0,0x0,0x10000,0x0,0x0,0x0,0x0,0x80000,0x40000,0x20800,0xc0f00000,0x20000,0x20000,0x0,0x0,0x0,0x0,0x800,0x0,0x0,0x80000000,0xd00000,0x8001,0x0,0x8011,0x0,0x0,0x0,0x0,0x0,0x0,0xc20000,0x8001,0xc00000,0x0,0x0,0x0,0x0,0x1000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2000,0x0,0x1000,0x0,0x0,0x0,0x2000,0x1,0x20,0x5,0x2000,0x3,0x2000,0x3,0x0,0x2000,0x2000,0x0,0x20000,0x8011,0x0,0x0,0x8011,0x0,0x0,0x8011,0x0,0x0,0x10000,0x20800,0x8011,0x0,0x0,0x8011,0x0,0x0,0x8011,0x0,0x0,0x8011,0x0,0x0,0x8011,0x0,0x0,0x8011,0x0,0x0,0x8011,0x8011,0x2000,0x8011,0x8011,0x8011,0x8011,0x8011,0x8011,0x20000,0x2000,0x80,0x8011,0x8011,0x8011,0x2000,0x10004,0x10004,0x8011,0x8011,0x2000,0x8011,0x0,0x2000,0x0,0x0,0x0,};
	}
	private static void jj_la1_init_2() {
	   jj_la1_2 = new int[] {0x0,0x40,0x30,0x0,0x7a070,0x0,0x40,0x30,0x0,0x7a070,0x0,0x0,0x7a000,0x7,0x3a000,0x7a000,0xfa000,0xfa400,0x60fa000,0x60fa000,0x60fa400,0xfa000,0xfa400,0x7,0x0,0x0,0xba400,0x0,0xba400,0x20,0x10,0x30,0x4000,0x180,0x7a000,0x0,0x0,0x180,0x20000,0x7a000,0x78000,0x4000,0x78000,0xa000,0x4000,0xa000,0xa000,0x4000,0xa000,0xa000,0x78000,0x4000,0x78000,0x0,0x0,0x2000,0x0,0x0,0x0,0x2000,0x0,0x2000,0x0,0x0,0x2000,0x2000,0x0,0x7a000,0x0,0x40,0x30,0x0,0x40,0x30,0x0,0x40,0x30,0x0,0x7a000,0x0,0x40,0x30,0x0,0x40,0x30,0x0,0x40,0x30,0x0,0x40,0x30,0x0,0x40,0x30,0x0,0x40,0x30,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x7a000,0x0,0x0,0x0,0x0,0x0,0x2000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x4000,0x4000,0x4000,};
	}
  final private JJCalls[] jj_2_rtns = new JJCalls[41];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public Grammar(java.io.InputStream stream) {
	  this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Grammar(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source = new GrammarTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 124; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
	  ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jjtree.reset();
	 jj_gen = 0;
	 for (int i = 0; i < 124; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public Grammar(java.io.Reader stream) {
	 jj_input_stream = new SimpleCharStream(stream, 1, 1);
	 token_source = new GrammarTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 124; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
	if (jj_input_stream == null) {
	   jj_input_stream = new SimpleCharStream(stream, 1, 1);
	} else {
	   jj_input_stream.ReInit(stream, 1, 1);
	}
	if (token_source == null) {
 token_source = new GrammarTokenManager(jj_input_stream);
	}

	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jjtree.reset();
	 jj_gen = 0;
	 for (int i = 0; i < 124; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public Grammar(GrammarTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 124; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(GrammarTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jjtree.reset();
	 jj_gen = 0;
	 for (int i = 0; i < 124; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
	 Token oldToken;
	 if ((oldToken = token).next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 if (token.kind == kind) {
	   jj_gen++;
	   if (++jj_gc > 100) {
		 jj_gc = 0;
		 for (int i = 0; i < jj_2_rtns.length; i++) {
		   JJCalls c = jj_2_rtns[i];
		   while (c != null) {
			 if (c.gen < jj_gen) c.first = null;
			 c = c.next;
		   }
		 }
	   }
	   return token;
	 }
	 token = oldToken;
	 jj_kind = kind;
	 throw generateParseException();
  }

  @SuppressWarnings("serial")
  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
	 if (jj_scanpos == jj_lastpos) {
	   jj_la--;
	   if (jj_scanpos.next == null) {
		 jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
	   } else {
		 jj_lastpos = jj_scanpos = jj_scanpos.next;
	   }
	 } else {
	   jj_scanpos = jj_scanpos.next;
	 }
	 if (jj_rescan) {
	   int i = 0; Token tok = token;
	   while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
	   if (tok != null) jj_add_error_token(kind, i);
	 }
	 if (jj_scanpos.kind != kind) return true;
	 if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
	 return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
	 if (token.next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 jj_gen++;
	 return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
	 Token t = token;
	 for (int i = 0; i < index; i++) {
	   if (t.next != null) t = t.next;
	   else t = t.next = token_source.getNextToken();
	 }
	 return t;
  }

  private int jj_ntk_f() {
	 if ((jj_nt=token.next) == null)
	   return (jj_ntk = (token.next=token_source.getNextToken()).kind);
	 else
	   return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
	 if (pos >= 100) {
		return;
	 }

	 if (pos == jj_endpos + 1) {
	   jj_lasttokens[jj_endpos++] = kind;
	 } else if (jj_endpos != 0) {
	   jj_expentry = new int[jj_endpos];

	   for (int i = 0; i < jj_endpos; i++) {
		 jj_expentry[i] = jj_lasttokens[i];
	   }

	   for (int[] oldentry : jj_expentries) {
		 if (oldentry.length == jj_expentry.length) {
		   boolean isMatched = true;

		   for (int i = 0; i < jj_expentry.length; i++) {
			 if (oldentry[i] != jj_expentry[i]) {
			   isMatched = false;
			   break;
			 }

		   }
		   if (isMatched) {
			 jj_expentries.add(jj_expentry);
			 break;
		   }
		 }
	   }

	   if (pos != 0) {
		 jj_lasttokens[(jj_endpos = pos) - 1] = kind;
	   }
	 }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
	 jj_expentries.clear();
	 boolean[] la1tokens = new boolean[91];
	 if (jj_kind >= 0) {
	   la1tokens[jj_kind] = true;
	   jj_kind = -1;
	 }
	 for (int i = 0; i < 124; i++) {
	   if (jj_la1[i] == jj_gen) {
		 for (int j = 0; j < 32; j++) {
		   if ((jj_la1_0[i] & (1<<j)) != 0) {
			 la1tokens[j] = true;
		   }
		   if ((jj_la1_1[i] & (1<<j)) != 0) {
			 la1tokens[32+j] = true;
		   }
		   if ((jj_la1_2[i] & (1<<j)) != 0) {
			 la1tokens[64+j] = true;
		   }
		 }
	   }
	 }
	 for (int i = 0; i < 91; i++) {
	   if (la1tokens[i]) {
		 jj_expentry = new int[1];
		 jj_expentry[0] = i;
		 jj_expentries.add(jj_expentry);
	   }
	 }
	 jj_endpos = 0;
	 jj_rescan_token();
	 jj_add_error_token(0, 0);
	 int[][] exptokseq = new int[jj_expentries.size()][];
	 for (int i = 0; i < jj_expentries.size(); i++) {
	   exptokseq[i] = jj_expentries.get(i);
	 }
	 return new ParseException(token, exptokseq, tokenImage);
  }

  private int trace_indent = 0;
  private boolean trace_enabled;

/** Trace enabled. */
  final public boolean trace_enabled() {
	 return trace_enabled;
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
	 jj_rescan = true;
	 for (int i = 0; i < 41; i++) {
	   try {
		 JJCalls p = jj_2_rtns[i];

		 do {
		   if (p.gen > jj_gen) {
			 jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
			 switch (i) {
			   case 0: jj_3_1(); break;
			   case 1: jj_3_2(); break;
			   case 2: jj_3_3(); break;
			   case 3: jj_3_4(); break;
			   case 4: jj_3_5(); break;
			   case 5: jj_3_6(); break;
			   case 6: jj_3_7(); break;
			   case 7: jj_3_8(); break;
			   case 8: jj_3_9(); break;
			   case 9: jj_3_10(); break;
			   case 10: jj_3_11(); break;
			   case 11: jj_3_12(); break;
			   case 12: jj_3_13(); break;
			   case 13: jj_3_14(); break;
			   case 14: jj_3_15(); break;
			   case 15: jj_3_16(); break;
			   case 16: jj_3_17(); break;
			   case 17: jj_3_18(); break;
			   case 18: jj_3_19(); break;
			   case 19: jj_3_20(); break;
			   case 20: jj_3_21(); break;
			   case 21: jj_3_22(); break;
			   case 22: jj_3_23(); break;
			   case 23: jj_3_24(); break;
			   case 24: jj_3_25(); break;
			   case 25: jj_3_26(); break;
			   case 26: jj_3_27(); break;
			   case 27: jj_3_28(); break;
			   case 28: jj_3_29(); break;
			   case 29: jj_3_30(); break;
			   case 30: jj_3_31(); break;
			   case 31: jj_3_32(); break;
			   case 32: jj_3_33(); break;
			   case 33: jj_3_34(); break;
			   case 34: jj_3_35(); break;
			   case 35: jj_3_36(); break;
			   case 36: jj_3_37(); break;
			   case 37: jj_3_38(); break;
			   case 38: jj_3_39(); break;
			   case 39: jj_3_40(); break;
			   case 40: jj_3_41(); break;
			 }
		   }
		   p = p.next;
		 } while (p != null);

		 } catch(LookaheadSuccess ls) { }
	 }
	 jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
	 JJCalls p = jj_2_rtns[index];
	 while (p.gen > jj_gen) {
	   if (p.next == null) { p = p.next = new JJCalls(); break; }
	   p = p.next;
	 }

	 p.gen = jj_gen + xla - jj_la; 
	 p.first = token;
	 p.arg = xla;
  }

  static final class JJCalls {
	 int gen;
	 Token first;
	 int arg;
	 JJCalls next;
  }

}
