/*
 * Copyright (c) 2013-2020 Cinchapi Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.cinchapi.ccl;

import java.io.ByteArrayInputStream;
import java.io.InputStream;
import java.nio.charset.StandardCharsets;
import java.util.function.Function;

import com.cinchapi.ccl.generated.*;
import com.cinchapi.ccl.syntax.*;
import com.cinchapi.ccl.type.Operator;
import com.cinchapi.concourse.lang.sort.Order;
import com.google.common.collect.Multimap;

/**
 * This parser utilizes {@link Grammar} which is grammar generated by JavaCC
 * 
 * @author Jeff Nelson
 */
class CompilerJavaCC extends Compiler {

    /**
     * Construct a new instance.
     * 
     * @param valueParser
     * @param operatorParser
     */
    public CompilerJavaCC(Function<String, Object> valueParser,
            Function<String, Operator> operatorParser) {
        super(valueParser, operatorParser);
    }

    @Override
    public AbstractSyntaxTree parse(String ccl, Multimap<String, Object> data) {
        try {
            InputStream stream = new ByteArrayInputStream(
                    ccl.getBytes(StandardCharsets.UTF_8.name()));

            GrammarVisitor visitor = new GrammarVisitor() {
                @Override
                public Object visit(SimpleNode node, Object data) {
                    System.out.println(
                            node + ": acceptor not unimplemented in subclass?");
                    data = node.childrenAccept(this, data);
                    return data;
                }

                @Override
                public Object visit(ASTStart node, Object data) {
                    ConditionTree conditionTree = null;
                    PageTree pageTree = null;
                    OrderTree orderTree = null;
                    FunctionTree functionTree = null;
                    CommandTree commandTree = null;

                    for (int i = 0; i < node.jjtGetNumChildren(); i++) {
                        Object child = node.jjtGetChild(i).jjtAccept(this,
                                data);
                        if(child instanceof PageTree) {
                            pageTree = (PageTree) child;
                        }
                        else if(child instanceof OrderTree) {
                            orderTree = (OrderTree) child;
                        }
                        else if(child instanceof FunctionTree) {
                            functionTree = (FunctionTree) child;
                        }
                        else if(child instanceof CommandTree) {
                            commandTree = (CommandTree) child;
                        }
                        else {
                            conditionTree = (ConditionTree) child;
                        }
                    }
                    if(conditionTree != null && pageTree == null
                            && orderTree == null && functionTree == null && commandTree == null) {
                        return conditionTree;
                    }
                    else if(pageTree != null && conditionTree == null
                            && orderTree == null && functionTree == null && commandTree == null) {
                        return pageTree;
                    }
                    else if(orderTree != null && conditionTree == null
                            && pageTree == null && functionTree == null && commandTree == null) {
                        return orderTree;
                    }
                    else if(functionTree != null && conditionTree == null
                            && pageTree == null && orderTree == null && commandTree == null) {
                        return functionTree;
                    }
                    else if(functionTree == null && conditionTree == null
                            && pageTree == null && orderTree == null && commandTree != null) {
                        return commandTree;
                    }
                    else {
                        // If the statement has multiple elements, it is
                        // implicitly a command.
                        return new CommandTree(conditionTree, pageTree,
                                orderTree);
                    }

                }

                @Override
                public Object visit(ASTOr node, Object data) {
                    ConditionTree left = (ConditionTree) node.jjtGetChild(0)
                            .jjtAccept(this, data);
                    ConditionTree right = (ConditionTree) node.jjtGetChild(1)
                            .jjtAccept(this, data);
                    return new OrTree(left, right);
                }

                @Override
                public Object visit(ASTAnd node, Object data) {
                    ConditionTree left = (ConditionTree) node.jjtGetChild(0)
                            .jjtAccept(this, data);
                    ConditionTree right = (ConditionTree) node.jjtGetChild(1)
                            .jjtAccept(this, data);
                    return new AndTree(left, right);
                }

                @Override
                public Object visit(ASTExpression node, Object data) {
                    return new ExpressionTree(node);
                }

                @Override
                public Object visit(ASTOrder node, Object data) {
                    return new OrderTree(node.order());
                }

                @Override
                public Object visit(ASTPage node, Object data) {
                    return new PageTree(node.page());
                }

                @Override
                public Object visit(ASTFunction node, Object data) {
                    return new FunctionTree(node.function());
                }

                @Override
                public Object visit(ASTCommand node, Object data) {
                    ConditionTree conditionTree = null;
                    OrderTree orderTree = null;
                    PageTree pageTree = null;

                    for(int i = 0; i < node.jjtGetNumChildren(); i++) {
                        Object child = node.jjtGetChild(i).jjtAccept(this, data);
                        if (child instanceof ConditionTree) {
                            conditionTree = (ConditionTree) child;
                        }
                        else if (child instanceof PageTree) {
                            pageTree = (PageTree) child;
                        }
                        else if (child instanceof OrderTree) {
                            orderTree = (OrderTree) child;
                        }
                    }

                    return new CommandTree(node.command(), conditionTree, pageTree, orderTree);
                }
            };

            Grammar grammar = new Grammar(stream, valueParser, operatorParser,
                    data, visitor);
            ASTStart start = grammar.generateAST();

            return (AbstractSyntaxTree) start.jjtAccept(visitor, null);
        }
        catch (Exception exception) {
            throw new PropagatedSyntaxException(exception, ccl);
        }
    }

}
