package com.cinchapi.ccl;

import com.cinchapi.ccl.grammar.PostfixNotationSymbol;
import com.cinchapi.ccl.grammar.Symbol;
import com.cinchapi.ccl.syntax.AbstractSyntaxTree;
import com.cinchapi.ccl.type.Operator;
import com.cinchapi.ccl.v2.generated.Grammar;
import com.cinchapi.ccl.v2.generated.GrammarPostfixVisitor;
import com.cinchapi.ccl.v2.generated.GrammarTokenizeVisitor;
import com.cinchapi.ccl.v2.generated.GrammarTreeVisitor;
import com.cinchapi.ccl.v2.generated.SimpleNode;
import com.cinchapi.common.function.TriFunction;
import com.google.common.collect.ImmutableMultimap;
import com.cinchapi.common.base.AnyStrings;
import com.google.common.base.Throwables;
import com.google.common.collect.Multimap;

import java.io.ByteArrayInputStream;
import java.io.InputStream;
import java.nio.charset.StandardCharsets;
import java.util.List;
import java.util.Queue;
import java.util.function.Function;

import javax.annotation.Nullable;

/**
 * This parser utilizes {@link Grammar} which is grammar generated by JavaCC
 */
public class JavaCCParser extends Parser {

    private final Function<String, Object> valueTransformFunction;
    private final Function<String, Operator> operatorTransformFunction;

    /**
     * Construct a new instance.
     *
     * @param ccl the ccl query to parse
     * @param valueTransformFunction value function
     * @param operatorTransformFunction operator function
     */
    protected JavaCCParser(String ccl,
            Function<String, Object> valueTransformFunction,
            Function<String, Operator> operatorTransformFunction,
            @Nullable TriFunction<Object, Operator, List<Object>, Boolean> localEvaluationFunction) {
        super(ccl, ImmutableMultimap.of(), localEvaluationFunction);
        this.valueTransformFunction = valueTransformFunction;
        this.operatorTransformFunction = operatorTransformFunction;
    }

    /**
     * Construct a new instance.
     *
     * @param ccl the ccl query to parse
     * @param data the local data
     * @param valueTransformFunction value function
     * @param operatorTransformFunction operator function
     */
    protected JavaCCParser(String ccl, Multimap<String, Object> data,
            Function<String, Object> valueTransformFunction,
            Function<String, Operator> operatorTransformFunction,
            @Nullable TriFunction<Object, Operator, List<Object>, Boolean> localEvaluationFunction) {
        super(ccl, data, localEvaluationFunction);
        this.valueTransformFunction = valueTransformFunction;
        this.operatorTransformFunction = operatorTransformFunction;
    }

    @Override
    public Queue<PostfixNotationSymbol> order() {
        try {
            InputStream stream = new ByteArrayInputStream(
                    ccl.getBytes(StandardCharsets.UTF_8.name()));
            Grammar grammar = new Grammar(stream);

            SimpleNode start = grammar.Start();
            GrammarPostfixVisitor visitor = new GrammarPostfixVisitor(this,
                    data);
            return (Queue<PostfixNotationSymbol>) start.jjtAccept(visitor,
                    null);
        }
        catch (Exception exception) {
            throw new PropagatedSyntaxException(exception, this);
        }
        return Parsing.toPostfixNotation(tokenize());
    }

    @Override
    public AbstractSyntaxTree parse() {
        try {
            InputStream stream = new ByteArrayInputStream(
                    ccl.getBytes(StandardCharsets.UTF_8.name()));
            Grammar grammar = new Grammar(stream);

            SimpleNode start = grammar.Start();
            GrammarTreeVisitor visitor = new GrammarTreeVisitor(this, data);
            return (AbstractSyntaxTree) start.jjtAccept(visitor, null);
        }
        catch (Exception exception) {
            throw new PropagatedSyntaxException(exception, this);
        }
    }

    @Override
    public List<Symbol> tokenize() {
        try {
            InputStream stream = new ByteArrayInputStream(
                    ccl.getBytes(StandardCharsets.UTF_8.name()));
            Grammar grammar = new Grammar(stream, valueTransformFunction,
                    operatorTransformFunction, data);

            return grammar.Start();
        }
        catch (Exception exception) {
            throw new PropagatedSyntaxException(exception, this);
        }
    }

    @Override
    public Operator transformOperator(String token) {
        return operatorTransformFunction.apply(token);
    }

    @Override
    public Object transformValue(String token) {
        return valueTransformFunction.apply(token);
    }
}
