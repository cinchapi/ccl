/*
 * Copyright (c) 2013-2017 Cinchapi Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.cinchapi.ccl;

import com.cinchapi.ccl.grammar.ConjunctionSymbol;
import com.cinchapi.ccl.grammar.Expression;
import com.cinchapi.ccl.grammar.ParenthesisSymbol;
import com.cinchapi.ccl.grammar.PostfixNotationSymbol;
import com.cinchapi.ccl.grammar.Symbol;
import com.cinchapi.ccl.syntax.AbstractSyntaxTree;
import com.cinchapi.ccl.syntax.ConjunctionTree;
import com.cinchapi.ccl.syntax.ExpressionTree;
import com.cinchapi.ccl.syntax.Visitor;
import com.cinchapi.ccl.type.Operator;
import com.cinchapi.ccl.v2.generated.Grammar;
import com.google.common.base.Throwables;
import com.google.common.collect.Multimap;

import java.io.ByteArrayInputStream;
import java.io.InputStream;
import java.nio.charset.StandardCharsets;
import java.util.LinkedList;
import java.util.List;
import java.util.Queue;
import java.util.function.Function;

/**
 * This parser utilizes {@link Grammar} which is grammar generated by JavaCC
 */
public class JavaCCParser extends Parser {

    private final Function<String, Object> valueTransformFunction;
    private final Function<String, Operator> operatorTransformFunction;

    /**
     * Construct a new instance.
     *
     * @param ccl the ccl query to parse
     * @param valueTransformFunction value function
     * @param operatorTransformFunction operator function
     */
    protected JavaCCParser(String ccl,
            Function<String, Object> valueTransformFunction,
            Function<String, Operator> operatorTransformFunction) {
        super(ccl, null);
        this.valueTransformFunction = valueTransformFunction;
        this.operatorTransformFunction = operatorTransformFunction;
    }

    /**
     * Construct a new instance.
     *
     * @param ccl the ccl query to parse
     * @param data the local data
     * @param valueTransformFunction value function
     * @param operatorTransformFunction operator function
     */
    protected JavaCCParser(String ccl, Multimap<String, Object> data,
            Function<String, Object> valueTransformFunction,
            Function<String, Operator> operatorTransformFunction) {
        super(ccl, data);
        this.valueTransformFunction = valueTransformFunction;
        this.operatorTransformFunction = operatorTransformFunction;
    }

    @SuppressWarnings("unchecked")
    @Override
    public Queue<PostfixNotationSymbol> order() {
        try {
            InputStream stream = new ByteArrayInputStream(
                    ccl.getBytes(StandardCharsets.UTF_8.name()));
            Grammar grammar = new Grammar(stream, valueTransformFunction,
                    operatorTransformFunction, data);

            AbstractSyntaxTree tree = grammar.generateAST();

            Visitor visitor = new Visitor<Queue<PostfixNotationSymbol>>() {
                Queue<PostfixNotationSymbol> symbols = new LinkedList<>();

                @Override
                public Queue<PostfixNotationSymbol> visit(AbstractSyntaxTree tree,
                        Object... data) {
                    for(AbstractSyntaxTree child : tree.children()) {
                        child.accept(this, data);
                    }
                    return symbols;
                }

                @Override
                public Queue<PostfixNotationSymbol> visit(ConjunctionTree tree, Object... data) {
                    tree.left().accept(this, data);
                    tree.right().accept(this, data);
                    symbols.add((PostfixNotationSymbol) tree.root());
                    return symbols;
                }

                @Override
                public Queue<PostfixNotationSymbol> visit(ExpressionTree tree, Object... data) {
                    symbols.add((PostfixNotationSymbol) tree.root());
                    return symbols;
                }
            };
            return (Queue<PostfixNotationSymbol>) tree.accept(visitor);
        }
        catch (Exception exception) {
            Throwables.propagate(exception);
        }
        return null;
    }

    @SuppressWarnings("unchecked")
    @Override
    public AbstractSyntaxTree parse() {
        try {
            InputStream stream = new ByteArrayInputStream(
                    ccl.getBytes(StandardCharsets.UTF_8.name()));
            Grammar grammar = new Grammar(stream, valueTransformFunction,
                    operatorTransformFunction, data);

            AbstractSyntaxTree tree = grammar.generateAST();

            Visitor visitor = new Visitor<AbstractSyntaxTree>() {

                @Override
                public AbstractSyntaxTree visit(AbstractSyntaxTree tree,
                        Object... data) {
                    for(AbstractSyntaxTree child : tree.children()) {
                        return child.accept(this, data);
                    }
                    return null;
                }

                @Override
                public AbstractSyntaxTree visit(ConjunctionTree tree,
                        Object... data) {
                    AbstractSyntaxTree left = tree.left().accept(this, data);
                    AbstractSyntaxTree right = tree.right().accept(this, data);
                    return tree;
                }

                @Override
                public AbstractSyntaxTree visit(ExpressionTree tree,
                        Object... data) {
                   return tree;
                }
            };
            return (AbstractSyntaxTree) tree.accept(visitor);
        }
        catch (Exception exception) {
            Throwables.propagate(exception);
        }
        return null;
    }

    @SuppressWarnings("unchecked")
    @Override
    public List<Symbol> tokenize() {
        try {
            InputStream stream = new ByteArrayInputStream(
                    ccl.getBytes(StandardCharsets.UTF_8.name()));
            Grammar grammar = new Grammar(stream, valueTransformFunction,
                    operatorTransformFunction, data);
            AbstractSyntaxTree tree = grammar.generateAST();

            Visitor visitor = new Visitor<List<Symbol>>() {
                List<Symbol> symbols = new LinkedList<>();

                @Override
                public List<Symbol> visit(AbstractSyntaxTree tree,
                        Object... data) {
                    for(AbstractSyntaxTree child : tree.children()) {
                        child.accept(this, data);
                    }
                    return symbols;
                }

                @Override
                public List<Symbol> visit(ConjunctionTree tree, Object... data) {

                    if (tree.root().equals(ConjunctionSymbol.OR)) {
                        tree.left().accept(this, data);
                        symbols.add(tree.root());
                        tree.right().accept(this, data);
                    }
                    else if (tree.root().equals(ConjunctionSymbol.AND)) {
                        boolean parenthesis = false;
                        if (tree.left().root() != null &&
                                tree.left().root().equals(ConjunctionSymbol.OR)) {
                            symbols.add(ParenthesisSymbol.LEFT);
                            parenthesis = true;
                        }

                        tree.left().accept(this, data);

                        if (parenthesis) {
                            symbols.add(ParenthesisSymbol.RIGHT);
                            parenthesis = false;
                        }

                        symbols.add(ConjunctionSymbol.AND);

                        if (tree.right().root() != null &&
                                tree.right().root().equals(ConjunctionSymbol.OR)) {
                            symbols.add(ParenthesisSymbol.LEFT);
                            parenthesis = true;
                        }

                        tree.right().accept(this, data);

                        if (parenthesis) {
                            symbols.add(ParenthesisSymbol.RIGHT);
                        }
                    }

                    return symbols;
                }

                @Override
                public List<Symbol> visit(ExpressionTree tree, Object... data) {
                    Expression expression = (Expression) tree.root();

                    symbols.add(expression.key());
                    symbols.add(expression.operator());
                    symbols.addAll(expression.values());

                    return symbols;
                }
            };
            return (List<Symbol>) tree.accept(visitor);
        }
        catch (Exception exception) {
            Throwables.propagate(exception);
        }
        return null;
    }

    @Override
    public Operator transformOperator(String token) {
        return operatorTransformFunction.apply(token);
    }

    @Override
    public Object transformValue(String token) {
        return valueTransformFunction.apply(token);
    }
}
