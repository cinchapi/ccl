/*
 * Copyright (c) 2013-2017 Cinchapi Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.cinchapi.ccl;

import com.cinchapi.ccl.syntax.AbstractSyntaxTree;
import com.cinchapi.ccl.syntax.AndTree;
import com.cinchapi.ccl.syntax.ExpressionTree;
import com.cinchapi.ccl.syntax.OrTree;
import com.cinchapi.ccl.type.Operator;
import com.cinchapi.ccl.generated.ASTAnd;
import com.cinchapi.ccl.generated.ASTExpression;
import com.cinchapi.ccl.generated.ASTOr;
import com.cinchapi.ccl.generated.ASTStart;
import com.cinchapi.ccl.generated.Grammar;
import com.cinchapi.ccl.generated.GrammarVisitor;
import com.cinchapi.ccl.generated.SimpleNode;
import com.cinchapi.ccl.grammar.ConjunctionSymbol;
import com.cinchapi.ccl.grammar.ParenthesisSymbol;
import com.cinchapi.ccl.grammar.PostfixNotationSymbol;
import com.cinchapi.ccl.grammar.Symbol;
import com.cinchapi.ccl.grammar.AbstractValueSymbol;
import com.cinchapi.common.function.TriFunction;
import com.google.common.collect.ImmutableMultimap;
import com.google.common.collect.Lists;
import com.google.common.collect.Multimap;

import java.io.ByteArrayInputStream;
import java.io.InputStream;
import java.nio.charset.StandardCharsets;
import java.util.LinkedList;
import java.util.List;
import java.util.Queue;
import java.util.function.Function;

import javax.annotation.Nullable;

/**
 * This parser utilizes {@link Grammar} which is grammar generated by JavaCC
 */
public class JavaCCParser extends Parser {

    private final Function<String, Object> valueTransformFunction;
    private final Function<String, Operator> operatorTransformFunction;

    /**
     * Construct a new instance.
     *
     * @param ccl the ccl query to parse
     * @param valueTransformFunction value function
     * @param operatorTransformFunction operator function
     */
    protected JavaCCParser(String ccl,
            Function<String, Object> valueTransformFunction,
            Function<String, Operator> operatorTransformFunction,
            @Nullable TriFunction<Object, Operator, List<Object>, Boolean> localEvaluationFunction) {
        super(ccl, ImmutableMultimap.of(), localEvaluationFunction);
        this.valueTransformFunction = valueTransformFunction;
        this.operatorTransformFunction = operatorTransformFunction;
    }

    /**
     * Construct a new instance.
     *
     * @param ccl the ccl query to parse
     * @param data the local data
     * @param valueTransformFunction value function
     * @param operatorTransformFunction operator function
     */
    protected JavaCCParser(String ccl, Multimap<String, Object> data,
            Function<String, Object> valueTransformFunction,
            Function<String, Operator> operatorTransformFunction,
            @Nullable TriFunction<Object, Operator, List<Object>, Boolean> localEvaluationFunction) {
        super(ccl, data, localEvaluationFunction);
        this.valueTransformFunction = valueTransformFunction;
        this.operatorTransformFunction = operatorTransformFunction;
    }

    @SuppressWarnings("unchecked")
    @Override
    public Queue<PostfixNotationSymbol> order() {
        try {
            InputStream stream = new ByteArrayInputStream(
                    ccl.getBytes(StandardCharsets.UTF_8.name()));

            GrammarVisitor visitor = new GrammarVisitor() {
                @Override
                public Object visit(SimpleNode node, Object data) {
                    System.out.println(node +
                            ": acceptor not unimplemented in subclass?");
                    data = node.childrenAccept(this, data);
                    return data;
                }

                @Override
                public Object visit(ASTStart node, Object data) {
                    Queue<PostfixNotationSymbol> symbols = new LinkedList<>();
                    data = node.childrenAccept(this, symbols);
                    return data;
                }

                @Override
                public Object visit(ASTOr node, Object data) {
                    node.jjtGetChild(0).jjtAccept(this, data);
                    Queue<PostfixNotationSymbol> symbols =
                            (Queue<PostfixNotationSymbol>) node.jjtGetChild(1).jjtAccept(this, data);
                    symbols.add(ConjunctionSymbol.OR);
                    return symbols;
                }

                @Override
                public Object visit(ASTAnd node, Object data) {
                    node.jjtGetChild(0).jjtAccept(this, data);
                    Queue<PostfixNotationSymbol> symbols =
                            (Queue<PostfixNotationSymbol>) node.jjtGetChild(1).jjtAccept(this, data);
                    symbols.add(ConjunctionSymbol.AND);
                    return symbols;
                }

                @Override
                public Object visit(ASTExpression node, Object data) {
                    ((Queue<PostfixNotationSymbol>) data).add(node);
                    return data;
                }
            };


            Grammar grammar = new Grammar(stream, valueTransformFunction,
                    operatorTransformFunction, data, visitor);
            ASTStart start = grammar.generateAST();

            return (Queue<PostfixNotationSymbol>) start.jjtAccept(visitor,
                    null);
        }
        catch (Exception exception) {
            throw new PropagatedSyntaxException(exception, this);
        }
    }

    @Override
    public AbstractSyntaxTree parse() {
        try {
            InputStream stream = new ByteArrayInputStream(
                    ccl.getBytes(StandardCharsets.UTF_8.name()));

            GrammarVisitor visitor = new GrammarVisitor() {
                @Override
                public Object visit(SimpleNode node, Object data) {
                    System.out.println(node + ": acceptor not unimplemented in subclass?");
                    data = node.childrenAccept(this, data);
                    return data;
                }

                @Override
                public Object visit(ASTStart node, Object data) {
                    data = node.jjtGetChild(0).jjtAccept(this, data);
                    return data;
                }

                @Override
                public Object visit(ASTOr node, Object data) {
                    AbstractSyntaxTree left = (AbstractSyntaxTree) node.jjtGetChild(0).jjtAccept(this, data);
                    AbstractSyntaxTree right =(AbstractSyntaxTree) node.jjtGetChild(1).jjtAccept(this, data);
                    return new OrTree(left, right);
                }

                @Override
                public Object visit(ASTAnd node, Object data) {
                    AbstractSyntaxTree left = (AbstractSyntaxTree) node.jjtGetChild(0).jjtAccept(this, data);
                    AbstractSyntaxTree right =(AbstractSyntaxTree) node.jjtGetChild(1).jjtAccept(this, data);
                    return new AndTree(left, right);
                }

                @Override
                public Object visit(ASTExpression node, Object data) {
                    return new ExpressionTree(node);
                }
            };

            Grammar grammar = new Grammar(stream, valueTransformFunction,
                    operatorTransformFunction, data, visitor);
            ASTStart start = grammar.generateAST();

            return (AbstractSyntaxTree) start.jjtAccept(visitor, null);
        }
        catch (Exception exception) {
            throw new PropagatedSyntaxException(exception, this);
        }
    }

    @SuppressWarnings("unchecked")
    @Override
    public List<Symbol> tokenize() {
        try {
            InputStream stream = new ByteArrayInputStream(
                    ccl.getBytes(StandardCharsets.UTF_8.name()));

            GrammarVisitor visitor = new GrammarVisitor() {
                @Override
                public Object visit(SimpleNode node, Object data) {
                    System.out.println(node + ": acceptor not unimplemented in subclass?");
                    data = node.childrenAccept(this, data);
                    return data;
                }

                @Override
                public Object visit(ASTStart node, Object data) {
                    List<Symbol> symbols = Lists.newArrayList();
                    data = node.childrenAccept(this, symbols);
                    return data;
                }

                @Override
                public Object visit(ASTOr node, Object data) {
                    List<Symbol> symbols = (List<Symbol>) node.jjtGetChild(0).jjtAccept(this, data);
                    symbols.add(ConjunctionSymbol.OR);
                    symbols = (List<Symbol>) node.jjtGetChild(1).jjtAccept(this, data);
                    return symbols;
                }

                @Override
                public Object visit(ASTAnd node, Object data) {
                    List<Symbol> symbols = (List<Symbol>) data;
                    boolean parenthesis = false;
                    if (node.jjtGetChild(0) instanceof ASTOr) {
                        symbols.add(ParenthesisSymbol.LEFT);
                        parenthesis = true;
                    }

                    node.jjtGetChild(0).jjtAccept(this, data);

                    if (parenthesis) {
                        symbols.add(ParenthesisSymbol.RIGHT);
                        parenthesis = false;
                    }

                    symbols.add(ConjunctionSymbol.AND);

                    if (node.jjtGetChild(1) instanceof ASTOr) {
                        symbols.add(ParenthesisSymbol.LEFT);
                        parenthesis = true;
                    }

                    node.jjtGetChild(1).jjtAccept(this, data);

                    if (parenthesis) {
                        symbols.add(ParenthesisSymbol.RIGHT);
                    }

                    return symbols;
                }

                @Override
                public Object visit(ASTExpression node, Object data) {
                    ((List<Symbol>) data).add(node.key());
                    ((List<Symbol>) data).add(node.operator());
                    for(AbstractValueSymbol<?> valueSymbol : node.values()) {
                        ((List<Symbol>) data).add(valueSymbol);
                    }
                    if (node.timestamp() != null) {
                        ((List<Symbol>) data).add(node.timestamp());
                    }
                    return data;
                }
            };

            Grammar grammar = new Grammar(stream, valueTransformFunction,
                    operatorTransformFunction, data, visitor);
            ASTStart start = grammar.generateAST();

            return (List<Symbol>) start.jjtAccept(visitor, null);
        }
        catch (Exception exception) {
            throw new PropagatedSyntaxException(exception, this);
        }
    }

    @Override
    public Operator transformOperator(String token) {
        return operatorTransformFunction.apply(token);
    }

    @Override
    public Object transformValue(String token) {
        return valueTransformFunction.apply(token);
    }
}
