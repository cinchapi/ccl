package com.cinchapi.ccl;

import com.cinchapi.ccl.grammar.ConjunctionSymbol;
import com.cinchapi.ccl.grammar.Expression;
import com.cinchapi.ccl.grammar.ParenthesisSymbol;
import com.cinchapi.ccl.grammar.PostfixNotationSymbol;
import com.cinchapi.ccl.grammar.Symbol;
import com.cinchapi.ccl.syntax.AbstractSyntaxTree;
import com.cinchapi.ccl.syntax.AndTree;
import com.cinchapi.ccl.syntax.ExpressionTree;
import com.cinchapi.ccl.syntax.OrTree;
import com.cinchapi.ccl.type.Operator;
import com.cinchapi.ccl.v2.generated.Grammar;
import com.cinchapi.ccl.v2.generated.GrammarPostfixVisitor;
import com.cinchapi.ccl.v2.generated.GrammarTokenizeVisitor;
import com.cinchapi.ccl.v2.generated.GrammarTreeVisitor;
import com.cinchapi.ccl.v2.generated.SimpleNode;
import com.cinchapi.common.base.AnyStrings;
import com.google.common.base.Throwables;
import com.google.common.collect.Multimap;

import java.io.ByteArrayInputStream;
import java.io.InputStream;
import java.nio.charset.StandardCharsets;
import java.util.ArrayDeque;
import java.util.Deque;
import java.util.List;
import java.util.Queue;
import java.util.function.Function;

/**
 * This parser utilizes {@link Grammar} which is grammar generated by JavaCC
 */
public class JavaCCParser extends Parser {
    
    private final Function<String, Object> valueTransformFunction;
    private final Function<String, Operator> operatorTransformFunction;

    /**
     * Construct a new instance.
     *
     * @param ccl the ccl query to parse
     * @param valueTransformFunction value function
     * @param operatorTransformFunction operator function
     */
    protected JavaCCParser(String ccl,
            Function<String, Object> valueTransformFunction,
            Function<String, Operator> operatorTransformFunction) {
        super(ccl, null);
        this.valueTransformFunction = valueTransformFunction;
        this.operatorTransformFunction = operatorTransformFunction;
    }

    /**
     * Construct a new instance.
     *
     * @param ccl the ccl query to parse
     * @param data the local data
     * @param valueTransformFunction value function
     * @param operatorTransformFunction operator function
     */
    protected JavaCCParser(String ccl, Multimap<String, Object> data,
            Function<String, Object> valueTransformFunction,
            Function<String, Operator> operatorTransformFunction) {
        super(ccl, data);
        this.valueTransformFunction = valueTransformFunction;
        this.operatorTransformFunction = operatorTransformFunction;
    }

    @Override
    public Queue<PostfixNotationSymbol> order() {
        return Parsing.toPostfixNotation(tokenize());
    }

    @Override
    public AbstractSyntaxTree parse() {
        List<Symbol> symbols = tokenize();
        Deque<Symbol> operatorStack = new ArrayDeque<Symbol>();
        Deque<AbstractSyntaxTree> operandStack = new ArrayDeque<AbstractSyntaxTree>();
        symbols = Parsing.groupExpressions(symbols);
        main: for (Symbol symbol : symbols) {
            if(symbol == ParenthesisSymbol.LEFT) {
                operatorStack.push(symbol);
            }
            else if(symbol == ParenthesisSymbol.RIGHT) {
                while (!operatorStack.isEmpty()) {
                    Symbol popped = operatorStack.pop();
                    if(popped == ParenthesisSymbol.LEFT) {
                        continue main;
                    }
                    else {
                        addAbstractSyntaxTreeNode(operandStack, popped);
                    }
                }
                throw new SyntaxException(AnyStrings.format(
                        "Syntax error in {}: Mismatched parenthesis", symbols));
            }
            else if(symbol instanceof ConjunctionSymbol) {
                final ConjunctionSymbol con1 = (ConjunctionSymbol) symbol;
                Symbol symbol2;
                while (!operatorStack.isEmpty()
                        && (symbol2 = operatorStack.peek()) != null
                        && symbol2 instanceof ConjunctionSymbol) {
                    ConjunctionSymbol con2 = (ConjunctionSymbol) symbol2;
                    if((!con1.isRightAssociative()
                            && con1.comparePrecedence(con2) == 0)
                            || con1.comparePrecedence(con2) < 0) {
                        operatorStack.pop();
                        addAbstractSyntaxTreeNode(operandStack, con2);
                    }
                    else {
                        break;
                    }
                }
                operatorStack.push(symbol);
            }
            else if(symbol instanceof Expression) {
                operandStack.push(new ExpressionTree((Expression) symbol));
            }
        }
        while (!operatorStack.isEmpty()) {
            addAbstractSyntaxTreeNode(operandStack, operatorStack.pop());
        }
        return operandStack.pop();
    }

    @Override
    public List<Symbol> tokenize() {
        try {
            InputStream stream = new ByteArrayInputStream(
                    ccl.getBytes(StandardCharsets.UTF_8.name()));
            Grammar grammar = new Grammar(stream, valueTransformFunction,
                    operatorTransformFunction, data);

            return grammar.Start();
        }
        catch (Exception exception) {
            Throwables.propagate(exception);
        }
        return null;
    }

    @Override
    public Operator transformOperator(String token) {
        return operatorTransformFunction.apply(token);
    }

    @Override
    public Object transformValue(String token) {
        return valueTransformFunction.apply(token);
    }

    /**
     * An the appropriate {@link AbstractSyntaxTree} node to the {@code stack}
     * based on
     * {@code operator}.
     *
     * @param stack
     * @param operator
     */
    private void addAbstractSyntaxTreeNode(Deque<AbstractSyntaxTree> stack,
            Symbol operator) {
        AbstractSyntaxTree right = stack.pop();
        AbstractSyntaxTree left = stack.pop();
        if(operator == ConjunctionSymbol.AND) {
            stack.push(new AndTree(left, right));
        }
        else {
            stack.push(new OrTree(left, right));
        }
    }
}
