/*
 * Copyright (c) 2013-2017 Cinchapi Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.cinchapi.ccl;

import com.cinchapi.ccl.generated.Grammar;
import com.cinchapi.ccl.syntax.AbstractSyntaxTree;
import com.cinchapi.ccl.syntax.condition.ConditionTree;
import com.cinchapi.ccl.type.Operator;
import com.cinchapi.ccl.grammar.PostfixNotationSymbol;
import com.cinchapi.ccl.grammar.Symbol;
import com.cinchapi.common.function.TriFunction;
import com.google.common.collect.ImmutableMultimap;
import com.google.common.collect.Multimap;

import java.util.List;
import java.util.Queue;
import java.util.function.Function;

import javax.annotation.Nullable;

/**
 * This parser utilizes {@link Grammar} which is grammar generated by JavaCC
 * 
 * @deprecated use {@link Compiler#create(Function, Function)}
 */
@Deprecated
public class JavaCCParser extends Parser {

    private final Function<String, Object> valueTransformFunction;
    private final Function<String, Operator> operatorTransformFunction;

    /**
     * Construct a new instance.
     *
     * @param ccl the ccl query to parse
     * @param valueTransformFunction value function
     * @param operatorTransformFunction operator function
     */
    protected JavaCCParser(String ccl,
            Function<String, Object> valueTransformFunction,
            Function<String, Operator> operatorTransformFunction,
            @Nullable TriFunction<Object, Operator, List<Object>, Boolean> localEvaluationFunction) {
        super(ccl, ImmutableMultimap.of(), localEvaluationFunction);
        this.valueTransformFunction = valueTransformFunction;
        this.operatorTransformFunction = operatorTransformFunction;
    }

    /**
     * Construct a new instance.
     *
     * @param ccl the ccl query to parse
     * @param data the local data
     * @param valueTransformFunction value function
     * @param operatorTransformFunction operator function
     */
    protected JavaCCParser(String ccl, Multimap<String, Object> data,
            Function<String, Object> valueTransformFunction,
            Function<String, Operator> operatorTransformFunction,
            @Nullable TriFunction<Object, Operator, List<Object>, Boolean> localEvaluationFunction) {
        super(ccl, data, localEvaluationFunction);
        this.valueTransformFunction = valueTransformFunction;
        this.operatorTransformFunction = operatorTransformFunction;
    }

    @Override
    public Queue<PostfixNotationSymbol> order() {
        AbstractSyntaxTree ast = compiler.parse(ccl, data);
        if(ast instanceof ConditionTree) {
            return compiler.arrange((ConditionTree) ast);
        }
        else {
            throw new UnsupportedOperationException();
        }
    }

    @Override
    public AbstractSyntaxTree parse() {
        AbstractSyntaxTree ast = compiler.parse(ccl, data);
        return ast;
    }

    @Override
    public List<Symbol> tokenize() {
        AbstractSyntaxTree ast = compiler.parse(ccl, data);
        return compiler.tokenize(ast);
    }

    @Override
    public Operator transformOperator(String token) {
        return operatorTransformFunction.apply(token);
    }

    @Override
    public Object transformValue(String token) {
        return valueTransformFunction.apply(token);
    }

    @Override
    protected Compiler compiler(Function<String, Object> valueParser,
            Function<String, Operator> operatorParser) {
        return Compiler.create(valueParser, operatorParser);
    }
}
