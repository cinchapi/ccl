/*
 * Copyright (c) 2013-2017 Cinchapi Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

options {
    MULTI=true;
    VISITOR=true;
    NODE_DEFAULT_VOID=true;
    STATIC=false;
}

PARSER_BEGIN(Grammar)

package com.cinchapi.ccl.v2.generated;

import com.cinchapi.ccl.SyntaxException;
import com.cinchapi.ccl.grammar.ConjunctionSymbol;
import com.cinchapi.ccl.grammar.KeySymbol;
import com.cinchapi.ccl.grammar.OperatorSymbol;
import com.cinchapi.ccl.grammar.ParenthesisSymbol;
import com.cinchapi.ccl.grammar.Symbol;
import com.cinchapi.ccl.grammar.TimestampSymbol;
import com.cinchapi.ccl.grammar.ValueSymbol;
import com.cinchapi.ccl.type.Operator;
import com.cinchapi.ccl.util.NaturalLanguage;
import com.cinchapi.common.base.AnyStrings;
import com.google.common.collect.Iterables;
import com.google.common.collect.Lists;
import com.google.common.collect.Multimap;

import java.util.List;
import java.util.NoSuchElementException;
import java.util.function.Function;

/**
 * The Grammar generated by JavaCC
 */
public class Grammar {
    private List<Symbol> symbols = Lists.newArrayList();
    private Multimap<String, Object> data;
    private Function<String, Object> valueTransformFunction;
    private Function<String, Operator> operatorTransformFunction;

    public Grammar(java.io.InputStream stream,
                Function<String, Object> valueTransformFunction,
                Function<String, Operator> operatorTransformFunction) {
        this(stream, null);
        this.data = null;
        this.valueTransformFunction = valueTransformFunction;
        this.operatorTransformFunction = operatorTransformFunction;
    }

    public Grammar(java.io.InputStream stream,
                Function<String, Object> valueTransformFunction,
                Function<String, Operator> operatorTransformFunction,
                Multimap<String, Object> data) {
        this(stream, null);
        this.data = data;
        this.valueTransformFunction = valueTransformFunction;
        this.operatorTransformFunction = operatorTransformFunction;
    }

    public Operator transformOperator(String token) {
        return operatorTransformFunction.apply(token);
    }

    public Object transformValue(String token) {
        return valueTransformFunction.apply(token);
    }
}

PARSER_END(Grammar)


SKIP :
{
  " "
|
  "\t"
}

TOKEN : { < OPEN_PARENTHESES : "(" > }
TOKEN : { < CLOSE_PARENTHESES : ")" > }
TOKEN [IGNORE_CASE]: { < TIMESTAMP: "at" | "on" | "during" | "in" > }
TOKEN [IGNORE_CASE]: { < WHERE: "where" > }

TOKEN [IGNORE_CASE]:
{
  < CONJUNCTION: "and" | "&&" | "&" >
|
  < DISJUNCTION: "or" | "||" | "|" >
}

TOKEN [IGNORE_CASE]:
{
  < UNARY_OPERATOR: <EQUALS> | <NOT_EQUALS> | <LESS_THAN> | <LESS_THAN_OR_EQUALS> | <GREATER_THAN> | <GREATER_THAN_OR_EQUALS> | <REGEX> | <NOT_REGEX> >
|
  < BINARY_OPERATOR: <BETWEEN> >
|
  < #EQUALS: "=" | "==" | "eq" >
|
  < #NOT_EQUALS: "!=" | "ne" >
|
  < #GREATER_THAN: ">" | "gt" >
|
  < #GREATER_THAN_OR_EQUALS: ">=" | "gte" >
|
  < #LESS_THAN: "<" | "lt" >
|
  < #LESS_THAN_OR_EQUALS: "<=" | "lte" >
|
  < #LINKS_TO: "->" | "lnks2" | "lnk2" >
|
  < #REGEX: "regex" >
|
  < #NOT_REGEX: "nregex" >
|
  < #LIKE: "like" >
|
  < #NOT_LIKE: "nlike" >
|
  < #BETWEEN: "><" | "bw" >
}

TOKEN :
{
  < QUOTED_STRING : "\"" (~["\""])+ "\"">
|
  < SIGNED_DECIMAL : (("-")? ( (<DIGIT>)+|(<DIGIT>)+<PERIOD>(<DIGIT>)+ ))>
|
  < ALPHANUMERIC: (<LETTER>|<DIGIT>)+ >
|
  < NON_ALPHANUMERIC_AND_ALPHANUMERIC: (<NON_ALPHANUMERIC>|<ALPHANUMERIC>)+ >
|
  < #NON_ALPHANUMERIC: ~["_","a"-"z","A"-"Z", "\n", "\t", "\r", " ", "(", ")", "="] >
|
  < #LETTER: ["_","a"-"z","A"-"Z"] >
|
  < #DIGIT: ["0"-"9"] >
|
  < #PERIOD: "." >
|
  < #ESCAPE: "\\" >
}

List<Symbol> Start() : {}
{
  (<WHERE>)? DisjunctionExpression() <EOF>
  { return symbols; }
}

void DisjunctionExpression() : {}
{
  (
    ConjunctionExpression() (((<DISJUNCTION>) { symbols.add(ConjunctionSymbol.OR); } ConjunctionExpression()) )*
  )
}

void ConjunctionExpression() : {}
{
  (
    UnaryExpression() (((<CONJUNCTION>) { symbols.add(ConjunctionSymbol.AND); } UnaryExpression()) )*
  )
}

void UnaryExpression() : {}
{
   (<OPEN_PARENTHESES>) { symbols.add(ParenthesisSymbol.LEFT); } DisjunctionExpression() (<CLOSE_PARENTHESES>) { symbols.add(ParenthesisSymbol.RIGHT); } | RelationalExpression()
}

void RelationalExpression() :
{
  Token k;
  Token o;
  Token v;
  Token t;
  String value = "";
  String ts = "";
}
{
  LOOKAHEAD(2)

  (k=<SIGNED_DECIMAL> | k=<ALPHANUMERIC>) { symbols.add(new KeySymbol(k.image)); }
  o=<UNARY_OPERATOR> { symbols.add(new OperatorSymbol(transformOperator(o.image))); }
  ((v=<QUOTED_STRING> | v=<SIGNED_DECIMAL> | v=<ALPHANUMERIC> | v=<NON_ALPHANUMERIC_AND_ALPHANUMERIC>) { value += (value.equals("")) ? v.image : " " + v.image; })+
  {
    if(value.charAt(0) == '$') {
        String var = value.substring(1);
        try {
            value = Iterables.getOnlyElement(data.get(var)).toString();
        }
        catch (IllegalArgumentException e) {
            String err = "Unable to resolve variable {} because multiple values exist locally: {}";
            throw new SyntaxException(AnyStrings.format(err, value, data.get(var)));
        }
        catch (NoSuchElementException e) {
            String err = "Unable to resolve variable {} because no values exist locally";
            throw new SyntaxException(AnyStrings.format(err, value));
        }
    }
    else if(value.length() > 2 && value.charAt(0) == '\\'
            && value.charAt(1) == '$') {
        value = value.substring(1);
    }

    symbols.add(new ValueSymbol(transformValue(value)));
  }
  (<TIMESTAMP> ((t=<QUOTED_STRING> | t=<SIGNED_DECIMAL> | t=<ALPHANUMERIC> | t=<NON_ALPHANUMERIC_AND_ALPHANUMERIC>) { ts += (ts.equals("")) ? t.image : " " + t.image; })+ { symbols.add(new TimestampSymbol(NaturalLanguage.parseMicros(ts))); })?
|
  (k=<SIGNED_DECIMAL> | k=<ALPHANUMERIC>) { symbols.add(new KeySymbol(k.image)); }
  o=<BINARY_OPERATOR> { symbols.add(new OperatorSymbol(transformOperator(o.image))); }
  (v=<QUOTED_STRING> | v=<SIGNED_DECIMAL> | v=<ALPHANUMERIC> | v=<NON_ALPHANUMERIC_AND_ALPHANUMERIC>)
  {
    value = v.image;
    if(value.charAt(0) == '$') {
        String var = value.substring(1);
        try {
            value = Iterables.getOnlyElement(data.get(var)).toString();
        }
        catch (IllegalArgumentException e) {
            String err = "Unable to resolve variable {} because multiple values exist locally: {}";
            throw new SyntaxException(AnyStrings.format(err, value, data.get(var)));
        }
        catch (NoSuchElementException e) {
            String err = "Unable to resolve variable {} because no values exist locally";
            throw new SyntaxException(AnyStrings.format(err, value));
        }
    }
    else if(value.length() > 2 && value.charAt(0) == '\\'
            && value.charAt(1) == '$') {
        value = value.substring(1);
    }

    symbols.add(new ValueSymbol(transformValue(value)));
  }
  (v=<QUOTED_STRING> | v=<SIGNED_DECIMAL> | v=<ALPHANUMERIC> | v=<NON_ALPHANUMERIC_AND_ALPHANUMERIC>)
  {
    value = v.image;
    if(value.charAt(0) == '$') {
        String var = value.substring(1);
        try {
            value = Iterables.getOnlyElement(data.get(var)).toString();
        }
        catch (IllegalArgumentException e) {
            String err = "Unable to resolve variable {} because multiple values exist locally: {}";
            throw new SyntaxException(AnyStrings.format(err, value, data.get(var)));
        }
        catch (NoSuchElementException e) {
            String err = "Unable to resolve variable {} because no values exist locally";
            throw new SyntaxException(AnyStrings.format(err, value));
        }
    }
    else if(value.length() > 2 && value.charAt(0) == '\\'
            && value.charAt(1) == '$') {
        value = value.substring(1);
    }

    symbols.add(new ValueSymbol(transformValue(value)));
  }
  (<TIMESTAMP> ((t=<QUOTED_STRING> | t=<SIGNED_DECIMAL> | t=<ALPHANUMERIC> | t=<NON_ALPHANUMERIC_AND_ALPHANUMERIC>) { ts += (ts.equals("")) ? t.image : " " + t.image; })+
  { symbols.add(new TimestampSymbol(NaturalLanguage.parseMicros(ts))); })?
}
