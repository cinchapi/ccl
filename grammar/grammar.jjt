/*
 * Copyright (c) 2013-2017 Cinchapi Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

options {
    MULTI=true;
    VISITOR=true;
    NODE_DEFAULT_VOID=true;
    STATIC=false;
}

PARSER_BEGIN(Grammar)

package com.cinchapi.ccl.v2.generated;

/**
 * The Grammar generated by JavaCC
 */
public class Grammar {

}

PARSER_END(Grammar)


SKIP :
{
  " "
|
  "\t"
}

TOKEN : { < OPEN_PARENTHESES : "(" > }
TOKEN : { < CLOSE_PARENTHESES : ")" > }
TOKEN [IGNORE_CASE]: { < TIMESTAMP: "at" | "on" | "during" | "in" > }
TOKEN [IGNORE_CASE]: { < WHERE: "where" > }
TOKEN [IGNORE_CASE]: { < RESERVED_IDENTIFIER: "$id$" > }

TOKEN [IGNORE_CASE]:
{
  < CONJUNCTION: "and" | "&&" | "&" >
|
  < DISJUNCTION: "or" | "||" | "|" >
}

TOKEN [IGNORE_CASE]:
{
  < UNARY_OPERATOR: <EQUALS> | <NOT_EQUALS> | <LESS_THAN> | <LESS_THAN_OR_EQUALS> | <GREATER_THAN> | <GREATER_THAN_OR_EQUALS> | <REGEX> | <NOT_REGEX> | <LINKS_TO> >
|
  < BINARY_OPERATOR: <BETWEEN> >
|
  < #EQUALS: "=" | "==" | "eq" >
|
  < #NOT_EQUALS: "!=" | "ne" >
|
  < #GREATER_THAN: ">" | "gt" >
|
  < #GREATER_THAN_OR_EQUALS: ">=" | "gte" >
|
  < #LESS_THAN: "<" | "lt" >
|
  < #LESS_THAN_OR_EQUALS: "<=" | "lte" >
|
  < #LINKS_TO: "->" | "lnks2" | "lnk2" >
|
  < #REGEX: "regex" >
|
  < #NOT_REGEX: "nregex" >
|
  < #LIKE: "like" >
|
  < #NOT_LIKE: "nlike" >
|
  < #BETWEEN: "><" | "bw" >
}

TOKEN :
{
  < QUOTED_STRING : <DOUBLE_QUOTED_STRING> | <SINGLE_QUOTED_STRING> >
|
  < DOUBLE_QUOTED_STRING : "\"" (~["\""])+ "\"">
|
  < SINGLE_QUOTED_STRING : "'" (~["'"])+ "'">
|
  < COMMA_SEPARATED_SIGNED_INTEGER : <SIGNED_INTEGER> ",">
|
  < COMMA_SEPARATED_ALPHANUMERIC : <ALPHANUMERIC> ",">
|
  < SIGNED_INTEGER : (("-" | "+")? (<DIGIT>)+) >
|
  < SIGNED_DECIMAL : (("-" | "+")?  (<DIGIT>)+<PERIOD>(<DIGIT>)+ ) >
|
  < ALPHANUMERIC: (<LETTER>|<DIGIT>)+ >
|
  < NON_ALPHANUMERIC_AND_ALPHANUMERIC: (<NON_ALPHANUMERIC>|<ALPHANUMERIC>)+ >
|
  < #NON_ALPHANUMERIC: ~["_","a"-"z","A"-"Z", "\n", "\t", "\r", " ", "(", ")", "="] >
|
  < #LETTER: ["_","a"-"z","A"-"Z"] >
|
  < #DIGIT: ["0"-"9"] >
|
  < #PERIOD: "." >
|
  < #ESCAPE: "\\" >
}

ASTStart generateAST() #Start : {}
{
   (<WHERE>)? DisjunctionExpression() <EOF>
   { return jjtThis; }
}
ASTStart generateSubAST() #Start : {}
{
   DisjunctionExpression()
   { return jjtThis; }
}


void DisjunctionExpression() : {}
{
  (
    ConjunctionExpression() (((<DISJUNCTION>) ConjunctionExpression()) #Or(2) )*
  )
}

void ConjunctionExpression() : {}
{
  (
    UnaryExpression() (((<CONJUNCTION>) UnaryExpression()) #And(2) )*
  )
}

void UnaryExpression() : {}
{
   (<OPEN_PARENTHESES>) DisjunctionExpression() (<CLOSE_PARENTHESES>) | RelationalExpression()
}

void RelationalExpression() #Expression : {}
{
    Key()
      (
        UnaryOperator() UnaryValue() Timestamp()
      |
        BinaryOperator() BinaryValue() BinaryValue() Timestamp()
      )
}

void Key() :
{
  Token key;
  Token function;
}
{
  (
    LOOKAHEAD(2)

    function=<ALPHANUMERIC> <OPEN_PARENTHESES> (key=<COMMA_SEPARATED_SIGNED_INTEGER> | key=<COMMA_SEPARATED_ALPHANUMERIC>) " ?" <CLOSE_PARENTHESES>
    { jjtThis.function(function.image); jjtThis.key(key.image.substring(0, key.image.length()-1));} #ImplicitFunction
  |
    (key=<RESERVED_IDENTIFIER> | key=<SIGNED_INTEGER> | key=<SIGNED_DECIMAL> | key=<ALPHANUMERIC>)
    { jjtThis.item(key); } #Container
  )
}

void UnaryValue() :
{
  Token function;
  Token key;
  Token word;
  String value = "";
  List<String> records = Lists.newArrayList();
  ASTStart ccl;
}
{
  LOOKAHEAD(2)

  function=<ALPHANUMERIC> <OPEN_PARENTHESES> (key=<COMMA_SEPARATED_SIGNED_INTEGER> | key=<COMMA_SEPARATED_ALPHANUMERIC>)
   (
     " ?" <CLOSE_PARENTHESES>
     { jjtThis.function(function.image); jjtThis.key(key.image.substring(0, key.image.length()-1));} #ImplicitFunction
   |
     LOOKAHEAD(2)

     (word=<COMMA_SEPARATED_SIGNED_INTEGER> { records.add(word.image.substring(0, word.image.length()-1)); })*
     (word=<SIGNED_INTEGER>) { records.add(word.image);} <CLOSE_PARENTHESES>
     { jjtThis.function(function.image); jjtThis.key(key.image.substring(0, key.image.length()-1)); jjtThis.records(records);} #ExplictFunctionWithRecords
   |
     ccl=generateSubAST() <CLOSE_PARENTHESES>
     { jjtThis.function(function.image); jjtThis.key(key.image.substring(0, key.image.length()-1)); jjtThis.ccl(ccl);} #ExplicitFunctionWithCCL
   )
|
  ( LOOKAHEAD(2) (word=<QUOTED_STRING> | word=<SIGNED_INTEGER> | word=<SIGNED_DECIMAL> | word=<ALPHANUMERIC> | word=<NON_ALPHANUMERIC_AND_ALPHANUMERIC>) { value += (value.equals("")) ? word.image : " " + word.image; })+
  { jjtThis.item(value.image); } #Container
}

void BinaryValue() #Container :
{
  Token value;
}
{
  (value=<QUOTED_STRING> | value=<SIGNED_INTEGER> | value=<SIGNED_DECIMAL> | value=<ALPHANUMERIC> | value=<NON_ALPHANUMERIC_AND_ALPHANUMERIC>)
  { jjtThis.item(value.image); }
}

void UnaryOperator() #Container :
{
  Token operator;
}
{
  operator=<UNARY_OPERATOR> { jjtThis.item(operator.image); }
}

void BinaryOperator() #Container :
{
  Token operator;
}
{
  operator=<BINARY_OPERATOR> { jjtThis.item(operator.image); }
}

void Timestamp() #Container :
{
  Token word;
  String timestamp = "";
}
{
  (<TIMESTAMP> ((word=<QUOTED_STRING> | word=<SIGNED_INTEGER> | word=<SIGNED_DECIMAL> | word=<ALPHANUMERIC> | word=<NON_ALPHANUMERIC_AND_ALPHANUMERIC>) { timestamp += (timestamp.equals("")) ? word.image : " " + word.image; })+
  { jjtThis.item(timestamp); })?
}