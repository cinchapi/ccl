/*
 * Copyright (c) 2013-2017 Cinchapi Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

options {
    MULTI=true;
    VISITOR=true;
    NODE_DEFAULT_VOID=true;
    STATIC=false;
}

PARSER_BEGIN(CriteriaGrammar)

package com.cinchapi.ccl.v2.generated;

/**
 * The Grammar generated by JavaCC
 */
public class CriteriaGrammar {
    public static void main(String args[]) {
        System.out.println("Reading from standard input...");
        CriteriaGrammar grammar = new CriteriaGrammar(System.in);
        while (true) {
            try {
                ASTStart start = grammar.StartCommandLine();
                CriteriaGrammarVisitor visitor = new CriteriaGrammarDumpVisitor();
                start.jjtAccept(visitor, null);
                System.out.println("Thank you.");
            } catch (Exception e) {
                System.out.println("Oops.");
                System.out.println(e.getMessage());
                e.printStackTrace();
            }
        }
    }
}

PARSER_END(CriteriaGrammar)


SKIP :
{
  " "
|
  "\t"
}

TOKEN : { < OPEN_PARENTHESES : "(" > }
TOKEN : { < CLOSE_PARENTHESES : ")" > }
TOKEN [IGNORE_CASE]: { < TIMESTAMP: "at" | "on" | "during" | "in" > }
TOKEN [IGNORE_CASE]: { < WHERE: "where" > }
TOKEN [IGNORE_CASE]: { < RESERVED_IDENTIFIER: "$id$" > }

TOKEN [IGNORE_CASE]:
{
  < CONJUNCTION: "and" | "&&" | "&" >
|
  < DISJUNCTION: "or" | "||" | "|" >
}

TOKEN [IGNORE_CASE]:
{
  < UNARY_OPERATOR: <EQUALS> | <NOT_EQUALS> | <LESS_THAN> | <LESS_THAN_OR_EQUALS> | <GREATER_THAN> | <GREATER_THAN_OR_EQUALS> | <REGEX> | <NOT_REGEX> | <LIKE> | <NOT_LIKE> >
|
  < BINARY_OPERATOR: <BETWEEN> >
|
  < #EQUALS: "=" | "==" | "eq" | "equals" >
|
  < #NOT_EQUALS: "!=" | "ne" | "not_equals" >
|
  < #GREATER_THAN: ">" | "gt" | "greater_than">
|
  < #GREATER_THAN_OR_EQUALS: ">=" | "gte" | "greater_than_or_equals" >
|
  < #LESS_THAN: "<" | "lt" | "less_than">
|
  < #LESS_THAN_OR_EQUALS: "<=" | "lte" | "less_than_or_equals" >
|
  < LINKS_TO: "->" | "lnks2" | "lnk2" | "links_to" >
|
  < #REGEX: "regex" >
|
  < #NOT_REGEX: "nregex" | "not_regex" >
|
  < #LIKE: "like" >
|
  < #NOT_LIKE: "nlike" | "not_like" >
|
  < #BETWEEN: "><" | "bw" | "between" >
}

TOKEN :
{
  < QUOTED_STRING : <DOUBLE_QUOTED_STRING> | <SINGLE_QUOTED_STRING> >
|
  < DOUBLE_QUOTED_STRING : ("\"" ("\\" ~[] | ~["\"", "\\"])+ "\"") | ("“" ("\\" ~[] | ~["”", "\\"])+ "”") >
|
  < SINGLE_QUOTED_STRING : ("'" ("\\" ~[] | ~["'", "\\"])+ "'") | ("‘" ("\\" ~[] | ~["’", "\\"])+ "’") >
|
  < SIGNED_DECIMAL : (("-")? ((<DIGIT>)+<PERIOD>(<DIGIT>)+ ))>
|
  < NUMERIC: (<DIGIT>)+ >
|
  < ALPHANUMERIC: (<LETTER>|<DIGIT>)+ >
|
  < NAVIGATION: (<SIGNED_DECIMAL> | <ALPHANUMERIC>) ("." (<SIGNED_DECIMAL> | <ALPHANUMERIC>))* >
|
  < NON_ALPHANUMERIC_AND_ALPHANUMERIC: (<NON_ALPHANUMERIC>|<ALPHANUMERIC>)+ >
|
  < #NON_ALPHANUMERIC: ~["_","a"-"z","A"-"Z", "\n", "\t", "\r", " ", "(", ")", "="] >
|
  < #LETTER: ["_","a"-"z","A"-"Z"] >
|
  < #DIGIT: ["0"-"9"] >
|
  < #PERIOD: "." >
}

/** Main production. */
ASTStart Start() #Start : {}
{
  (<WHERE>)? DisjunctionExpression() <EOF>
  { return jjtThis; }
}

/** Main production. */
ASTStart StartCommandLine() #Start : {}
{
  (<WHERE>)? DisjunctionExpression() "\n"
  { return jjtThis; }
}

void DisjunctionExpression() : {}
{
  (
    ConjunctionExpression() ((<DISJUNCTION> ConjunctionExpression()) #Or(2))*
  )
}

void ConjunctionExpression() : {}
{
  (
    UnaryExpression() ((<CONJUNCTION> UnaryExpression()) #And(2))*
  )
}

void UnaryExpression() : {}
{
   <OPEN_PARENTHESES> DisjunctionExpression() <CLOSE_PARENTHESES> | RelationalExpression()
}

void RelationalExpression() #RelationalExpression :
{
  Token k;
  Token o;
  Token v;
  Token t;
}
{
  LOOKAHEAD(2)

  (k=<RESERVED_IDENTIFIER> | k=<SIGNED_DECIMAL> | k=<NUMERIC> | k=<ALPHANUMERIC> | k=<NAVIGATION>) { jjtThis.key(k.image);}
  (
    (
      o=<LINKS_TO> { jjtThis.operator(o.image); } v=<NUMERIC> { jjtThis.appendValue(v.image); }
    )
  |
    (
      o=<UNARY_OPERATOR> { jjtThis.operator(o.image);}
      (
        ((v=<SIGNED_DECIMAL> | v=<NUMERIC> | v=<ALPHANUMERIC> | v=<NON_ALPHANUMERIC_AND_ALPHANUMERIC>)
            {
              jjtThis.appendValue(v.image.replace("\\@", "@"));
            })+
          |
        ((v=<QUOTED_STRING>) { jjtThis.appendValue(v.image.replace("\\\"", "\"")); })+
      )
    )
  )
  (<TIMESTAMP> ((t=<QUOTED_STRING> | t=<SIGNED_DECIMAL> | t=<NUMERIC> | t=<ALPHANUMERIC>) { jjtThis.timestamp(t.image);})+ )?
|
  (k=<RESERVED_IDENTIFIER> | k=<SIGNED_DECIMAL> | k=<NUMERIC> | k=<ALPHANUMERIC> | k=<NAVIGATION>) { jjtThis.key(k.image);}
  o=<BINARY_OPERATOR> { jjtThis.operator(o.image);}
  (
      (v=<SIGNED_DECIMAL> | v=<NUMERIC> | v=<ALPHANUMERIC> | v=<NON_ALPHANUMERIC_AND_ALPHANUMERIC>)
        {
          jjtThis.addValue(v.image.replace("\\@", "@"));
        }
    |
      (v=<QUOTED_STRING>) { jjtThis.addValue(v.image.replace("\\\"", "\"")); }
  )
  (
      (v=<SIGNED_DECIMAL> | v=<NUMERIC> | v=<ALPHANUMERIC> | v=<NON_ALPHANUMERIC_AND_ALPHANUMERIC>)
        {
          jjtThis.addValue(v.image.replace("\\@", "@"));
        }
    |
      (v=<QUOTED_STRING>) { jjtThis.addValue(v.image.replace("\\\"", "\"")); }
  )
  (<TIMESTAMP> ((t=<QUOTED_STRING> | t=<SIGNED_DECIMAL> | t=<NUMERIC> | t=<ALPHANUMERIC>) { jjtThis.timestamp(t.image);})+ )?
}
