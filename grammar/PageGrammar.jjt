/*
 * Copyright (c) 2013-2017 Cinchapi Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

options {
    MULTI=true;
    VISITOR=true;
    NODE_DEFAULT_VOID=true;
    STATIC=false;
}

PARSER_BEGIN(OrderGrammar)

package com.cinchapi.ccl.control.generated;

/**
 * The Grammar generated by JavaCC
 */
public class PageGrammar {
    public static void main(String args[]) {
        System.out.println("Reading from standard input...");
        PageGrammar grammar = new PageGrammar(System.in);
        while (true) {
            try {
                ASTStart start = grammar.StartCommandLine();
                PageGrammarVisitor visitor = new PageGrammarDumpVisitor();
                start.jjtAccept(visitor, null);
                System.out.println("Thank you.");
            } catch (Exception e) {
                System.out.println("Oops.");
                System.out.println(e.getMessage());
                e.printStackTrace();
            }
        }
    }
}

PARSER_END(OrderGrammar)


SKIP :
{
  " "
|
  "\t"
}

TOKEN :
{
  < PIPE : "|" >
|
  < AMPERSAND : "@" >
|
  < ASCENDING : "<" >
|
  < DESCENDING : ">" >
|
  < QUOTED_STRING : <DOUBLE_QUOTED_STRING> | <SINGLE_QUOTED_STRING> >
|
  < DOUBLE_QUOTED_STRING : ("\"" ("\\" ~[] | ~["\"", "\\"])+ "\"") | ("“" ("\\" ~[] | ~["”", "\\"])+ "”") >
|
  < SINGLE_QUOTED_STRING : ("'" ("\\" ~[] | ~["'", "\\"])+ "'") | ("‘" ("\\" ~[] | ~["’", "\\"])+ "’") >
|
  < SIGNED_DECIMAL : (("-")? ((<DIGIT>)+<PERIOD>(<DIGIT>)+ ))>
|
  < NUMERIC: (<DIGIT>)+ >
|
  < ALPHANUMERIC: (<LETTER>|<DIGIT>)+ >
|
  < PERIOD_SEPARATED_STRING: (<SIGNED_DECIMAL> | <ALPHANUMERIC>) ("." (<SIGNED_DECIMAL> | <ALPHANUMERIC>))* >
|
  < #NON_ALPHANUMERIC: ~["_","a"-"z","A"-"Z", "\n", "\t", "\r", " ", "(", ")", "="] >
|
  < #LETTER: ["_","a"-"z","A"-"Z"] >
|
  < #DIGIT: ["0"-"9"] >
|
  < #PERIOD: "." >
}

/** Main production. */
ASTStart Start() #Start : { }
{
  Order() <EOF>
  { return jjtThis; }
}

/** Main production. */
ASTStart StartCommandLine() #Start : {}
{
  Order() "\n"
  { return jjtThis; }
}

void Page() #Page :
{
  int pageNumber;
  int offset;
}
{
  (orderComponent=OrderComponent())?
  key=Key()
  (<AMPERSAND> (timestampNumber=TimestampNumber() | (timestampString=TimestampString() (<PIPE> timestampFormat=TimestampFormat())?)))?
  { jjtThis.orderComponent(orderComponent);
    jjtThis.key(key); }
}

String OrderComponent() :
{
   Token orderComponent;
}
{
  (
     (orderComponent=<ASCENDING> | orderComponent=<DESCENDING>)
     { return orderComponent.image; }
  )
}

String Key() :
{
   Token key;
}
{
  (
     (key=<SIGNED_DECIMAL> | key=<NUMERIC> | key=<ALPHANUMERIC> | key=<PERIOD_SEPARATED_STRING>)
     { return key.image; }
  )
}

String TimestampString() :
{
   Token timestamp;
}
{
  (
     timestamp=<QUOTED_STRING>
     { return timestamp.image; }
  )
}

String TimestampFormat() :
{
   Token format;
}
{
  (
     format=<QUOTED_STRING>
     { return format.image; }
  )
}

String TimestampNumber() :
{
   Token timestamp;
}
{
  (
     timestamp=<NUMERIC>
     { return timestamp.image; }
  )
}


