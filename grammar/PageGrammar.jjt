/*
 * Copyright (c) 2013-2017 Cinchapi Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

options {
    MULTI=true;
    VISITOR=true;
    NODE_DEFAULT_VOID=true;
    STATIC=false;
}

PARSER_BEGIN(PageGrammar)

package com.cinchapi.ccl.paginate.generated;

/**
 * The Grammar generated by JavaCC
 */
public class PageGrammar {
    public static void main(String args[]) {
        System.out.println("Reading from standard input...");
        PageGrammar grammar = new PageGrammar(System.in);
        while (true) {
            try {
                ASTStart start = grammar.StartCommandLine();
                PageGrammarVisitor visitor = new PageGrammarDumpVisitor();
                start.jjtAccept(visitor, null);
                System.out.println("Thank you.");
            } catch (Exception e) {
                System.out.println("Oops.");
                System.out.println(e.getMessage());
                e.printStackTrace();
            }
        }
    }
}

PARSER_END(PageGrammar)


SKIP :
{
  " "
|
  "\t"
}

TOKEN :
{
  < NUMBER : "number" >
|
  < SIZE : "size" >
|
  < NUMERIC: (<DIGIT>)+ >
|
  < #DIGIT: ["0"-"9"] >
}

/** Main production. */
ASTStart Start() #Start : { }
{
  Page() <EOF>
  { return jjtThis; }
}

/** Main production. */
ASTStart StartCommandLine() #Start : {}
{
  Page() "\n"
  { return jjtThis; }
}

void Page() #Page :
{
  String number = null;
  String size = null;
}
{
  (
    (number=Number() (size=Size())?)
  |
    (size=Size() (number=Number())?)
  )
  { jjtThis.number(number);
    jjtThis.size(size); }
}

String Number() :
{
   Token number;
}
{
  (
     (<NUMBER> number=<NUMERIC>)
     { return number.image; }
  )
}

String Size() :
{
   Token size;
}
{
  (
     (<SIZE> size=<NUMERIC>)
     { return size.image; }
  )
}


