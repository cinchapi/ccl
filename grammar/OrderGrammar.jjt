/*
 * Copyright (c) 2013-2017 Cinchapi Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

options {
    STATIC=false;
}

PARSER_BEGIN(CriteriaGrammar)

package com.cinchapi.ccl.v2.generated;

/**
 * The Grammar generated by JavaCC
 */
public class CriteriaGrammar {
    public static void main(String args[]) {
        System.out.println("Reading from standard input...");
        CriteriaGrammar grammar = new CriteriaGrammar(System.in);
        while (true) {
            try {
                ASTStart start = grammar.StartCommandLine();
                CriteriaGrammarVisitor visitor = new CriteriaGrammarDumpVisitor();
                start.jjtAccept(visitor, null);
                System.out.println("Thank you.");
            } catch (Exception e) {
                System.out.println("Oops.");
                System.out.println(e.getMessage());
                e.printStackTrace();
            }
        }
    }
}

PARSER_END(CriteriaGrammar)


SKIP :
{
  " "
|
  "\t"
}

TOKEN :
{
  < ASCENDING : "<" >
|
  < DESCENDING: ">" >
|
  < QUOTED_STRING : <DOUBLE_QUOTED_STRING> | <SINGLE_QUOTED_STRING> >
|
  < DOUBLE_QUOTED_STRING : ("\"" ("\\" ~[] | ~["\"", "\\"])+ "\"") | ("“" ("\\" ~[] | ~["”", "\\"])+ "”") >
|
  < SINGLE_QUOTED_STRING : ("'" ("\\" ~[] | ~["'", "\\"])+ "'") | ("‘" ("\\" ~[] | ~["’", "\\"])+ "’") >
|
  < SIGNED_DECIMAL : (("-")? ((<DIGIT>)+<PERIOD>(<DIGIT>)+ ))>
|
  < NUMERIC: (<DIGIT>)+ >
|
  < ALPHANUMERIC: (<LETTER>|<DIGIT>)+ >
|
  < NAVIGATION: (<SIGNED_DECIMAL> | <ALPHANUMERIC>) ("." (<SIGNED_DECIMAL> | <ALPHANUMERIC>))* >
|
  < NON_ALPHANUMERIC_AND_ALPHANUMERIC: (<NON_ALPHANUMERIC>|<ALPHANUMERIC>)+ >
|
  < #NON_ALPHANUMERIC: ~["_","a"-"z","A"-"Z", "\n", "\t", "\r", " ", "(", ")", "="] >
|
  < #LETTER: ["_","a"-"z","A"-"Z"] >
|
  < #DIGIT: ["0"-"9"] >
|
  < #PERIOD: "." >
}

/** Main production. */
ASTStart Start() #Start : { }
{
  Order() <EOF>
  { return jjtThis; }
}

/** Main production. */
ASTStart StartCommandLine() #Start : {}
{
  ("<" | ">")? Expression() "\n"
  { return jjtThis; }
}

String Order() #Order :
{
  String oc;
  String k;
  String t;
}
{
  (OrderComponent=OrderComponent() key=Key() t=Timestamp())
  { jjtThis.orderComponent(oc);
    jjtThis.key(k);
    jjtThis.timestamp(t);}
}

String OrderComponent() :
{
   Token oc;
}
{
  (
     (oc=<ASCENDING> | oc=<DESCENDING>)
     { return oc.image; }
  )
}

String Key() :
{
   Token key;
}
{
  (
     (key=<SIGNED_DECIMAL> | key=<NUMERIC> | key=<ALPHANUMERIC> | key=<PERIOD_SEPARATED_STRING>)
     { return key.image; }
  )
}

String Timestamp() :
{
   Token timestamp;
}
{
  (
     ("@" (t=<QUOTED_STRING> | t=<SIGNED_DECIMAL> | t=<NUMERIC> | t=<ALPHANUMERIC>) | (t=<QUOTED_STRING> "|" ))?
     { return t.image; }
  )
}


