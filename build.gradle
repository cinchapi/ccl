plugins {
  id 'java'
  id 'eclipse'
  id 'maven'
  id 'maven-publish'
  id 'signing'
}

if (JavaVersion.current().isJava8Compatible()) {
  allprojects {
    tasks.withType(Javadoc) {
      options.addStringOption('Xdoclint:none', '-quiet')
    }
  }
}

// The project version is controlled externally by the "version.sh" script.
def getVersion = { ->
  def stdout = new ByteArrayOutputStream()
  exec {
    commandLine 'bash', 'version.sh'
    standardOutput = stdout
  }
  return stdout.toString().trim()
}

group = 'com.cinchapi'
version  = getVersion()
// Drop the build component from version number and use that for
// publishing
ext.mavenVersion = version.split('\\.')
ext.mavenVersion[3] = ext.mavenVersion[3].replaceAll("[0-9]+-", "-")
ext.mavenVersion[3] = ext.mavenVersion[3].replaceAll("[0-9]+", "").trim()
ext.mavenVersion = ext.mavenVersion.join(".").replace(".-", "-").replaceAll('\\.$', "")

jar {
  manifest {
    attributes("Specificiation-Title": "CCL", "Specificiation-Version": version, "Implementation-Version": version)
  }
}

task sourcesJar(type: Jar, dependsOn: classes) {
  classifier = 'sources'
  from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
  classifier = 'javadoc'
  from javadoc.destinationDir
}

artifacts {
  archives sourcesJar
  archives javadocJar
}

publishing {
  repositories {
    maven {
      name = 'cloudsmith'
      def releasesRepoUrl = "https://api-g.cloudsmith.io/maven/cinchapi/open-source/"
      def snapshotsRepoUrl = "https://api-g.cloudsmith.io/maven/cinchapi/open-source-snapshots/"
      url = mavenVersion.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
      credentials {
        username = System.getenv('CLOUDSMITH_API_USER')
        password = System.getenv('CLOUDSMITH_API_KEY')
      }
    }
  }
  publications {
    maven(MavenPublication) {
      from components.java
      artifact sourcesJar
      artifact javadocJar
      groupId group
      artifactId project.name
      version mavenVersion
    }
  }
}

signing {
  required { gradle.taskGraph.hasTask("uploadArchives") }
  sign configurations.archives
}

uploadArchives {
  repositories {
    mavenDeployer {
      beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }
      pom.version = mavenVersion

      pom.project {
        name project.name
        packaging 'jar'
        description 'The official specificiation and library for the Concourse Criteria Language'
        url 'https://cinchapi.com'

        scm {
          url 'git@github.com:cinchapi/ccl.git'
          connection 'git@github.com:cinchapi/ccl.git'
          developerConnection 'git@github.com:cinchapi/ccl.git'
        }

        licenses {
          license {
            name 'The Apache License'
            url 'http://opensource.org/licenses/Apache-2.0'
            distribution 'repo'
          }
        }

        developers {
          developer {
            id 'jnelson'
            name 'Jeff Nelson'
          }
        }
      }

      def mavenUrl = pom.version.matches('^[0-9]+\\.[0-9]+\\.[0-9]+(-rc[0-9]+){0,1}$') ? 'https://oss.sonatype.org/service/local/staging/deploy/maven2' : 'https://oss.sonatype.org/content/repositories/snapshots'
      repository(url: mavenUrl) {
        authentication(userName: sonatypeUsername, password: sonatypePassword)
      }
    }
  }
}

test {
  testLogging {
    showStandardStreams = true
  }
}

repositories {
  mavenCentral()
  maven {
    url 'https://oss.sonatype.org/content/repositories/snapshots/'
  }
  maven {
    url "https://dl.cloudsmith.io/public/cinchapi/open-source/maven/"
  }
  maven {
    url "https://dl.cloudsmith.io/public/cinchapi/open-source-snapshots/maven/"
  }
  maven {
    url "https://dl.cloudsmith.io/public/cinchapi/platform/maven/"
  }
  maven {
    url "https://dl.cloudsmith.io/public/cinchapi/platform-snapshots/maven/"
  }
  maven {
    url "https://dl.cloudsmith.io/public/cinchapi/enterprise/maven/"
    credentials {
      username = System.getenv('CLOUDSMITH_API_USER')
      password = System.getenv('CLOUDSMITH_API_KEY')
    }
  }
  maven {
    url "https://dl.cloudsmith.io/public/cinchapi/enterprise-snapshots/maven/"
    credentials {
      username = System.getenv('CLOUDSMITH_API_USER')
      password = System.getenv('CLOUDSMITH_API_KEY')
    }
  }
}

ext.concourseVersion = '0.10.5'

dependencies {
  compile 'com.google.code.findbugs:jsr305:2.0.1'
  compile 'com.google.guava:guava:25.1-jre'
  compile 'com.joestelmach:natty:0.13'
  compile (group: 'com.cinchapi', name: 'accent4j', version: '1.6.1', changing:true) {
    exclude group: 'com.google.guava', module: 'guava'
  }
  compile 'joda-time:joda-time:2.2'

  testCompile 'junit:junit:4.11'
  testCompile (group: 'com.cinchapi', name: 'concourse-driver-java', version: concourseVersion) {
      exclude group: 'com.cinchapi', module: 'ccl'
  }
}

task generateJavaCCParser(type: Exec) {
  commandLine './javacc-parser-generator.sh', 'generate', '--source', 'grammar/grammar.jjt', '--out', 'src/main/java/com/cinchapi/ccl/v2/generated'
}

compileJava.dependsOn generateJavaCCParser
eclipseClasspath.dependsOn generateJavaCCParser
